/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import com.alterian.jo.model.AckMessage;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.QueueDetails;
import com.alterian.jo.model.QueueMessageResponse;
import com.alterian.jo.model.QueuePostMessageResponse;
import com.alterian.jo.model.QueueResponse;
import com.alterian.jo.model.ResourceAndStatusResponse;
import com.alterian.jo.model.TargetEnum;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueueApi
 */
@Disabled
public class QueueApiTest {

    private final QueueApi api = new QueueApi();

    /**
     * Delete all queues that this client owns.
     *
     * Delete all queues that this client owns, across all targets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientDeleteTest() throws ApiException {
        String client = null;
        ModelApiResponse response = api.queueClientDelete(client);
        // TODO: test validations
    }

    /**
     * Get all of the queues for a specific client, across all targets.
     *
     * Find the full details of all queues that this client owns, across all targets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        Boolean includeStatistics = null;
        QueueResponse response = api.queueClientGet(client, from, to, includeStatistics);
        // TODO: test validations
    }

    /**
     * Delete all of the queues within a specific target for the given client
     *
     * Delete all of the queues within a specific target for the given client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        ModelApiResponse response = api.queueClientTargetDelete(client, target);
        // TODO: test validations
    }

    /**
     * Get details about all of the queues within a specific target for this client.
     *
     * Get details about all of the queues within a specific target for this client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        Integer from = null;
        Integer to = null;
        Boolean includeStatistics = null;
        QueueResponse response = api.queueClientTargetGet(client, target, from, to, includeStatistics);
        // TODO: test validations
    }

    /**
     * Remove a set of messages from a given queue.
     *
     * If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNameAckPostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        List<AckMessage> ackMessage = null;
        QueueMessageResponse response = api.queueClientTargetQueueNameAckPost(client, target, queueName, ackMessage);
        // TODO: test validations
    }

    /**
     * Delete a specific named queue
     *
     * Delete a queue and all the messages within it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNameDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        ModelApiResponse response = api.queueClientTargetQueueNameDelete(client, target, queueName);
        // TODO: test validations
    }

    /**
     * Gets information about a specific named queue.
     *
     * Information returned is filtered by user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNameGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        Boolean includeStatistics = null;
        QueueResponse response = api.queueClientTargetQueueNameGet(client, target, queueName, includeStatistics);
        // TODO: test validations
    }

    /**
     * Gets one or more messages from the queue
     *
     * Return a JSON array containing zero or more messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNameMessagesGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        Integer numberOfMessages = null;
        Integer maxWaitTimeInSeconds = null;
        Boolean deleteAfterRead = null;
        String lock = null;
        QueueMessageResponse response = api.queueClientTargetQueueNameMessagesGet(client, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, lock);
        // TODO: test validations
    }

    /**
     * Add a message to the named queue
     *
     * Used for posting messages to a queue. The data passed in the message is not validated in any way
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNameMessagesPostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        String body = null;
        QueuePostMessageResponse response = api.queueClientTargetQueueNameMessagesPost(client, target, queueName, body);
        // TODO: test validations
    }

    /**
     * Create a new queue, passing a block of JSON that is associated with the queue
     *
     * Used for creating a new queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNamePostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        QueueDetails queueDetails = null;
        ResourceAndStatusResponse response = api.queueClientTargetQueueNamePost(client, target, queueName, queueDetails);
        // TODO: test validations
    }

    /**
     * Remove all messages from the named queue
     *
     * Used to clear messages from a queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNamePurgePostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        ModelApiResponse response = api.queueClientTargetQueueNamePurgePost(client, target, queueName);
        // TODO: test validations
    }

    /**
     * Edit an existing queue
     *
     * Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueClientTargetQueueNamePutTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String queueName = null;
        QueueDetails queueDetails = null;
        ResourceAndStatusResponse response = api.queueClientTargetQueueNamePut(client, target, queueName, queueDetails);
        // TODO: test validations
    }

    /**
     * Get information about all queues on the server.
     *
     * Get information about all queues that this user can access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        Boolean includeStatistics = null;
        QueueResponse response = api.queueGet(from, to, includeStatistics);
        // TODO: test validations
    }

}
