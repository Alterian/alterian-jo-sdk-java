/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import com.alterian.jo.model.CacheApiDeleteResponse;
import com.alterian.jo.model.CacheApiResponse;
import com.alterian.jo.model.CacheCQL;
import com.alterian.jo.model.CacheChangesResponse;
import com.alterian.jo.model.CacheDetailsResponse;
import com.alterian.jo.model.CacheExecuteResponse;
import com.alterian.jo.model.CacheTableDefinition;
import com.alterian.jo.model.TableTypeEnum;
import com.alterian.jo.model.TargetEnum;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CacheApi
 */
@Disabled
public class CacheApiTest {

    private final CacheApi api = new CacheApi();

    /**
     * Get information about cache tables, filtered by client.
     *
     * Get information about cache tables, filtered by client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientGetTest() throws ApiException {
        String client = null;
        CacheDetailsResponse response = api.cacheClientGet(client);
        // TODO: test validations
    }

    /**
     * Execute a limited set of cql commands against the cache
     *
     * insert, select, update or delete a single row of data from a single table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientTargetExecutePostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        CacheCQL cacheCQL = null;
        CacheExecuteResponse response = api.cacheClientTargetExecutePost(client, target, cacheCQL);
        // TODO: test validations
    }

    /**
     * Get information about cache tables, filtered by client and target.
     *
     * Get information about cache tables, filtered by client and target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientTargetGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        TableTypeEnum tabletype = null;
        CacheDetailsResponse response = api.cacheClientTargetGet(client, target, tabletype);
        // TODO: test validations
    }

    /**
     * Delete column from a cache table.
     *
     * Removes a column from a cache table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientTargetTableColumnDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String table = null;
        String column = null;
        String key = null;
        List<String> keys = null;
        CacheApiResponse response = api.cacheClientTargetTableColumnDelete(client, target, table, column, key, keys);
        // TODO: test validations
    }

    /**
     * Delete unused cache table and columns
     *
     * Removes the columns and tables that are no longer used by any of the rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientTargetTableColumnsDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String table = null;
        Boolean preview = null;
        CacheApiDeleteResponse response = api.cacheClientTargetTableColumnsDelete(client, target, table, preview);
        // TODO: test validations
    }

    /**
     * Delete data from a cache table.
     *
     * Removes data from a cache table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientTargetTableDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String table = null;
        String key = null;
        List<String> keys = null;
        CacheApiResponse response = api.cacheClientTargetTableDelete(client, target, table, key, keys);
        // TODO: test validations
    }

    /**
     * Get information about a specific cache table.
     *
     * Get information about a specific cache table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientTargetTableGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String table = null;
        String key = null;
        List<String> keys = null;
        Integer sample = null;
        Boolean pivot = null;
        String fieldvalue = null;
        Integer limit = null;
        CacheDetailsResponse response = api.cacheClientTargetTableGet(client, target, table, key, keys, sample, pivot, fieldvalue, limit);
        // TODO: test validations
    }

    /**
     * Alter a cache table
     *
     * Ensure that the cache table includes at least the set of columns requested
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheClientTargetTablePostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        CacheTableDefinition cacheTableDefinition = null;
        CacheChangesResponse response = api.cacheClientTargetTablePost(client, target, cacheTableDefinition);
        // TODO: test validations
    }

}
