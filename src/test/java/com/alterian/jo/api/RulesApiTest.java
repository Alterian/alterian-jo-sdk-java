/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import com.alterian.jo.model.ApiJSONArrayResponse;
import com.alterian.jo.model.CsvEnum;
import com.alterian.jo.model.DataGridApiResponse;
import com.alterian.jo.model.DataGridDetails;
import com.alterian.jo.model.DataGridRow;
import com.alterian.jo.model.DestinationTarget;
import java.io.File;
import com.alterian.jo.model.HealthScoreTimeFrame;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.RuleAndStateResponse;
import com.alterian.jo.model.RuleData;
import com.alterian.jo.model.RuleDesignerResponse;
import com.alterian.jo.model.RuleList;
import com.alterian.jo.model.TargetEnum;
import com.alterian.jo.model.TestData;
import com.alterian.jo.model.TestDataResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RulesApi
 */
@Disabled
public class RulesApiTest {

    private final RulesApi api = new RulesApi();

    /**
     * Download the rule file (KTR) for a running rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadRuleTargetClientRulenameGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        File response = api.downloadRuleTargetClientRulenameGet(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Get information about all published rules on the server
     *
     * Information returned is filtered by user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        String sortProperty = null;
        String sortDescending = null;
        String createdRuleUrl = null;
        HealthScoreTimeFrame healthScore = null;
        Boolean includeStatistics = null;
        String searchText = null;
        String parameterName = null;
        String parameterValue = null;
        String templateFilter = null;
        Boolean includePublic = null;
        Boolean checkTemplateLatestVersion = null;
        List<String> iClients = null;
        RuleList response = api.ruleGet(from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
        // TODO: test validations
    }

    /**
     * Unpublish all rules that this client has published to the given target.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientDeleteTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        RuleList response = api.ruleTargetClientDelete(target, client);
        // TODO: test validations
    }

    /**
     * Validate a new Rule Designer JSON
     *
     * This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientDesignerPutTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        RuleData ruleData = null;
        RuleDesignerResponse response = api.ruleTargetClientDesignerPut(target, client, ruleData);
        // TODO: test validations
    }

    /**
     * Get information about all rules published by this client to the given target.
     *
     * Information returned is filtered by user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        Integer from = null;
        Integer to = null;
        String sortProperty = null;
        String sortDescending = null;
        String createdRuleUrl = null;
        HealthScoreTimeFrame healthScore = null;
        Boolean includeStatistics = null;
        String searchText = null;
        String parameterName = null;
        String parameterValue = null;
        String templateFilter = null;
        Boolean includePublic = null;
        Boolean checkTemplateLatestVersion = null;
        List<String> iClients = null;
        RuleList response = api.ruleTargetClientGet(target, client, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
        // TODO: test validations
    }

    /**
     * Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
     *
     * This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameAutoloaderGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        RuleList response = api.ruleTargetClientRulenameAutoloaderGet(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Save the JSON for an autoloader rule
     *
     * This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameAutoloaderPostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        Object body = null;
        RuleAndStateResponse response = api.ruleTargetClientRulenameAutoloaderPost(target, client, rulename, body);
        // TODO: test validations
    }

    /**
     * Copy this rule to the given target.
     *
     * A copy of this rule will be started in the given target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameCopytoPostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        TargetEnum destinationtarget = null;
        DestinationTarget destinationTarget = null;
        RuleAndStateResponse response = api.ruleTargetClientRulenameCopytoPost(target, client, rulename, destinationtarget, destinationTarget);
        // TODO: test validations
    }

    /**
     * Get information about the data grid for a specific, published rule.
     *
     * Information returned is filtered by user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameDatagridDataGridNameGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        String dataGridName = null;
        CsvEnum format = null;
        DataGridApiResponse response = api.ruleTargetClientRulenameDatagridDataGridNameGet(target, client, rulename, dataGridName, format);
        // TODO: test validations
    }

    /**
     * Enter new data for an exisiting data grid and update
     *
     * If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameDatagridDataGridNamePostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        String dataGridName = null;
        List<DataGridDetails> dataGridDetails = null;
        RuleAndStateResponse response = api.ruleTargetClientRulenameDatagridDataGridNamePost(target, client, rulename, dataGridName, dataGridDetails);
        // TODO: test validations
    }

    /**
     * Add new data grid rows to a rule&#39;s Data Grid
     *
     * This is to append new data only. Existing data remains unchanged
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameDatagridDataGridNameRowsPostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        String dataGridName = null;
        DataGridRow dataGridRow = null;
        RuleAndStateResponse response = api.ruleTargetClientRulenameDatagridDataGridNameRowsPost(target, client, rulename, dataGridName, dataGridRow);
        // TODO: test validations
    }

    /**
     * Unpublish a specific rule.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameDeleteTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        RuleList response = api.ruleTargetClientRulenameDelete(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
     *
     * Information returned is filtered by user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameDesignerGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        RuleList response = api.ruleTargetClientRulenameDesignerGet(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Save or validate the rule designer JSON for a rule
     *
     * This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameDesignerPostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        Boolean validate = null;
        RuleData ruleData = null;
        RuleDesignerResponse response = api.ruleTargetClientRulenameDesignerPost(target, client, rulename, validate, ruleData);
        // TODO: test validations
    }

    /**
     * Add a new rule via the rule designer JSON.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameDesignerPutTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        Boolean validate = null;
        Boolean download = null;
        String body = null;
        ModelApiResponse response = api.ruleTargetClientRulenameDesignerPut(target, client, rulename, validate, download, body);
        // TODO: test validations
    }

    /**
     * Get information about one specific, published rule.
     *
     * Information returned is filtered by user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        HealthScoreTimeFrame healthScore = null;
        Boolean includeStatistics = null;
        Boolean checkTemplateLatestVersion = null;
        RuleList response = api.ruleTargetClientRulenameGet(target, client, rulename, healthScore, includeStatistics, checkTemplateLatestVersion);
        // TODO: test validations
    }

    /**
     * update the default values for parameters.
     *
     * this will update the rule with new default parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameParameterPostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        Object body = null;
        RuleAndStateResponse response = api.ruleTargetClientRulenameParameterPost(target, client, rulename, body);
        // TODO: test validations
    }

    /**
     * Pause this rule
     *
     * Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenamePauseDeleteTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        ModelApiResponse response = api.ruleTargetClientRulenamePauseDelete(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Start or restart one specific, published rule.
     *
     * Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenamePostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        ModelApiResponse response = api.ruleTargetClientRulenamePost(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Update the rule&#39;s priority weighting
     *
     * This will set a new value for a rule&#39;s priority weighting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenamePriorityWeightingPostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        Object body = null;
        RuleAndStateResponse response = api.ruleTargetClientRulenamePriorityWeightingPost(target, client, rulename, body);
        // TODO: test validations
    }

    /**
     * Perform extended actions to rules
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameResetDeleteTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        ModelApiResponse response = api.ruleTargetClientRulenameResetDelete(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Get JSON Schema representation of the data expected by the rule
     *
     * Generates a JSON Schema object, following json-schema.org specification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameSampleDataGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        ApiJSONArrayResponse response = api.ruleTargetClientRulenameSampleDataGet(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Make this rule start snoozing
     *
     * Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameSnoozePostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        ModelApiResponse response = api.ruleTargetClientRulenameSnoozePost(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Delete all test data
     *
     * Deletes all of user defined test data for this rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameTestDataDeleteTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        ModelApiResponse response = api.ruleTargetClientRulenameTestDataDelete(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Get the rule&#39;s test data and headers information
     *
     * Returns the test data and header information as specified in the rule&#39;s Realtime Input step
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameTestDataGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        TestDataResponse response = api.ruleTargetClientRulenameTestDataGet(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Add test data to rule
     *
     * User defined test data rows will be stored for this rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetClientRulenameTestDataPostTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        List<TestData> testData = null;
        ModelApiResponse response = api.ruleTargetClientRulenameTestDataPost(target, client, rulename, testData);
        // TODO: test validations
    }

    /**
     * Get information about all rules published by all clients to the given target
     *
     * Information returned is filtered by user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTargetGetTest() throws ApiException {
        TargetEnum target = null;
        Integer from = null;
        Integer to = null;
        String sortProperty = null;
        String sortDescending = null;
        String createdRuleUrl = null;
        HealthScoreTimeFrame healthScore = null;
        Boolean includeStatistics = null;
        String searchText = null;
        String parameterName = null;
        String parameterValue = null;
        String templateFilter = null;
        Boolean includePublic = null;
        Boolean checkTemplateLatestVersion = null;
        List<String> iClients = null;
        RuleList response = api.ruleTargetGet(target, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
        // TODO: test validations
    }

}
