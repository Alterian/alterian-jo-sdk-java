/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import java.io.File;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.ResourceAndStatusResponse;
import com.alterian.jo.model.RuleGroup;
import com.alterian.jo.model.RuleGroupDestinationTarget;
import com.alterian.jo.model.RuleGroupListingResponse;
import com.alterian.jo.model.TargetEnum;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RulegroupsApi
 */
@Disabled
public class RulegroupsApiTest {

    private final RulegroupsApi api = new RulegroupsApi();

    /**
     * Download the rulegroup file (JSON)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadRulegroupClientTargetRulegroupnameGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        File response = api.downloadRulegroupClientTargetRulegroupnameGet(client, target, rulegroupname);
        // TODO: test validations
    }

    /**
     * Delete all rule groups uploaded by this client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientDeleteTest() throws ApiException {
        String client = null;
        ModelApiResponse response = api.rulegroupClientDelete(client);
        // TODO: test validations
    }

    /**
     * Get details about all rule groups uploaded by a specific client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        Boolean includeproperties = null;
        Boolean allversions = null;
        RuleGroupListingResponse response = api.rulegroupClientGet(client, from, to, includeproperties, allversions);
        // TODO: test validations
    }

    /**
     * Delete all rule groups uploaded by this client in this target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        ModelApiResponse response = api.rulegroupClientTargetDelete(client, target);
        // TODO: test validations
    }

    /**
     * Get details about all rule groups uploaded by a specific client in a specific target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        Integer from = null;
        Integer to = null;
        Boolean includeproperties = null;
        Boolean allversions = null;
        RuleGroupListingResponse response = api.rulegroupClientTargetGet(client, target, from, to, includeproperties, allversions);
        // TODO: test validations
    }

    /**
     * Copy this rule group to the given target.  Also replicates any missing rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetRulegroupnameCopytoPostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        RuleGroupDestinationTarget ruleGroupDestinationTarget = null;
        ResourceAndStatusResponse response = api.rulegroupClientTargetRulegroupnameCopytoPost(client, target, rulegroupname, ruleGroupDestinationTarget);
        // TODO: test validations
    }

    /**
     * Delete all versions of a specific rulegroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetRulegroupnameDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        ModelApiResponse response = api.rulegroupClientTargetRulegroupnameDelete(client, target, rulegroupname);
        // TODO: test validations
    }

    /**
     * Get details about all versions of a specified rulegroup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetRulegroupnameGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        Integer from = null;
        Integer to = null;
        Boolean includeproperties = null;
        Boolean allversions = null;
        RuleGroupListingResponse response = api.rulegroupClientTargetRulegroupnameGet(client, target, rulegroupname, from, to, includeproperties, allversions);
        // TODO: test validations
    }

    /**
     * Upload a file which defines the rulegroup. This will generate and return a version number number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetRulegroupnamePostTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        RuleGroup ruleGroup = null;
        ResourceAndStatusResponse response = api.rulegroupClientTargetRulegroupnamePost(client, target, rulegroupname, ruleGroup);
        // TODO: test validations
    }

    /**
     * Update an existing rulegroup. This will generate and return a version number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetRulegroupnamePutTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        RuleGroup ruleGroup = null;
        ResourceAndStatusResponse response = api.rulegroupClientTargetRulegroupnamePut(client, target, rulegroupname, ruleGroup);
        // TODO: test validations
    }

    /**
     * Delete a specific version of a specific rulegroup on the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetRulegroupnameVersionDeleteTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        Integer version = null;
        ModelApiResponse response = api.rulegroupClientTargetRulegroupnameVersionDelete(client, target, rulegroupname, version);
        // TODO: test validations
    }

    /**
     * Get details about a specific version of a specific rulegroup for a specific client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupClientTargetRulegroupnameVersionGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulegroupname = null;
        Integer version = null;
        RuleGroupListingResponse response = api.rulegroupClientTargetRulegroupnameVersionGet(client, target, rulegroupname, version);
        // TODO: test validations
    }

    /**
     * Get details about all rule groups on the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        Boolean includeproperties = null;
        Boolean allversions = null;
        List<String> iClients = null;
        RuleGroupListingResponse response = api.rulegroupGet(from, to, includeproperties, allversions, iClients);
        // TODO: test validations
    }

    /**
     * upload a file which defines the rulegroup. This will generate and return a version number.  Please use the   /rulegroup/client/target/name post version now.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulegroupPostTest() throws ApiException {
        RuleGroup ruleGroup = null;
        ModelApiResponse response = api.rulegroupPost(ruleGroup);
        // TODO: test validations
    }

}
