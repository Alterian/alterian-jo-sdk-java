/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import com.alterian.jo.model.Client;
import com.alterian.jo.model.ClientResponse;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.ResourceAndStatusResponse;
import com.alterian.jo.model.TargetEnum;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientApi
 */
@Disabled
public class ClientApiTest {

    private final ClientApi api = new ClientApi();

    /**
     * Deletes a specific alias from the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientAliasAliasNameDeleteTest() throws ApiException {
        String client = null;
        String aliasName = null;
        ModelApiResponse response = api.clientClientAliasAliasNameDelete(client, aliasName);
        // TODO: test validations
    }

    /**
     * Returns back information about a specific alias
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientAliasAliasNameGetTest() throws ApiException {
        String client = null;
        String aliasName = null;
        ModelApiResponse response = api.clientClientAliasAliasNameGet(client, aliasName);
        // TODO: test validations
    }

    /**
     * Creates or updates an alias
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientAliasAliasNameTargetRuleorgroupPostTest() throws ApiException {
        String client = null;
        String aliasName = null;
        TargetEnum target = null;
        String ruleorgroup = null;
        ModelApiResponse response = api.clientClientAliasAliasNameTargetRuleorgroupPost(client, aliasName, target, ruleorgroup);
        // TODO: test validations
    }

    /**
     * Create a new alias, must not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientAliasAliasNameTargetRuleorgroupPutTest() throws ApiException {
        String client = null;
        String aliasName = null;
        TargetEnum target = null;
        String ruleorgroup = null;
        ResourceAndStatusResponse response = api.clientClientAliasAliasNameTargetRuleorgroupPut(client, aliasName, target, ruleorgroup);
        // TODO: test validations
    }

    /**
     * Returns back all aliases which have been defined for a client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientAliasGetTest() throws ApiException {
        String client = null;
        ClientResponse response = api.clientClientAliasGet(client);
        // TODO: test validations
    }

    /**
     * Copy an existing client to a client with a new name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientCopyDestinationPutTest() throws ApiException {
        String client = null;
        String destination = null;
        ModelApiResponse response = api.clientClientCopyDestinationPut(client, destination);
        // TODO: test validations
    }

    /**
     * Delete all client files that have been uploaded to the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientDeleteTest() throws ApiException {
        String client = null;
        ModelApiResponse response = api.clientClientDelete(client);
        // TODO: test validations
    }

    /**
     * Returns extended details about a client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientGetTest() throws ApiException {
        String client = null;
        Boolean aszip = null;
        Boolean asdata = null;
        ClientResponse response = api.clientClientGet(client, aszip, asdata);
        // TODO: test validations
    }

    /**
     * Updates a client&#39;s parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientPostTest() throws ApiException {
        String client = null;
        Client client2 = null;
        ModelApiResponse response = api.clientClientPost(client, client2);
        // TODO: test validations
    }

    /**
     * Create a new client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientClientPutTest() throws ApiException {
        String client = null;
        Client client2 = null;
        ModelApiResponse response = api.clientClientPut(client, client2);
        // TODO: test validations
    }

    /**
     * Copy an existing client to a client with a new name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientCopySourcePutTest() throws ApiException {
        String source = null;
        String destination = null;
        ModelApiResponse response = api.clientCopySourcePut(source, destination);
        // TODO: test validations
    }

    /**
     * Get a list of all clients that your login can access, and all permissions that you have
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientGetTest() throws ApiException {
        ClientResponse response = api.clientGet();
        // TODO: test validations
    }

}
