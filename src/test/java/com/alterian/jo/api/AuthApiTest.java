/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.PermissionList;
import com.alterian.jo.model.RefList;
import com.alterian.jo.model.Role;
import com.alterian.jo.model.RoleList;
import com.alterian.jo.model.SiteList;
import com.alterian.jo.model.UserList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    /**
     * Get a list of all permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authPermissionGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        PermissionList response = api.authPermissionGet(from, to);
        // TODO: test validations
    }

    /**
     * Get a list of roles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        RoleList response = api.authRoleGet(from, to);
        // TODO: test validations
    }

    /**
     * Remove client from a role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNameClientClientNameDeleteTest() throws ApiException {
        String name = null;
        String clientName = null;
        ModelApiResponse response = api.authRoleNameClientClientNameDelete(name, clientName);
        // TODO: test validations
    }

    /**
     * Add client to a role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNameClientClientNamePostTest() throws ApiException {
        String name = null;
        String clientName = null;
        ModelApiResponse response = api.authRoleNameClientClientNamePost(name, clientName);
        // TODO: test validations
    }

    /**
     * Get the list of clients for a role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNameClientGetTest() throws ApiException {
        String name = null;
        RefList response = api.authRoleNameClientGet(name);
        // TODO: test validations
    }

    /**
     * Remove a role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNameDeleteTest() throws ApiException {
        String name = null;
        ModelApiResponse response = api.authRoleNameDelete(name);
        // TODO: test validations
    }

    /**
     * Get information about a specific role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNameGetTest() throws ApiException {
        String name = null;
        RoleList response = api.authRoleNameGet(name);
        // TODO: test validations
    }

    /**
     * Remove permission from a role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNamePermissionDeleteTest() throws ApiException {
        String name = null;
        String permission = null;
        ModelApiResponse response = api.authRoleNamePermissionDelete(name, permission);
        // TODO: test validations
    }

    /**
     * Get the list of permissions granted by a specific role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNamePermissionGetTest() throws ApiException {
        String name = null;
        PermissionList response = api.authRoleNamePermissionGet(name);
        // TODO: test validations
    }

    /**
     * Add permission to a role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRoleNamePermissionPostTest() throws ApiException {
        String name = null;
        String permission = null;
        ModelApiResponse response = api.authRoleNamePermissionPost(name, permission);
        // TODO: test validations
    }

    /**
     * Create a new role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRolePostTest() throws ApiException {
        Role role = null;
        ModelApiResponse response = api.authRolePost(role);
        // TODO: test validations
    }

    /**
     * Get a list of sites
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authSiteGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        SiteList response = api.authSiteGet(from, to);
        // TODO: test validations
    }

    /**
     * Remove a site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authSiteIdDeleteTest() throws ApiException {
        String id = null;
        ModelApiResponse response = api.authSiteIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get information about specified site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authSiteIdGetTest() throws ApiException {
        String id = null;
        SiteList response = api.authSiteIdGet(id);
        // TODO: test validations
    }

    /**
     * Get the list of site users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authSiteIdUserGetTest() throws ApiException {
        String id = null;
        RefList response = api.authSiteIdUserGet(id);
        // TODO: test validations
    }

    /**
     * Remove user from a site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authSiteIdUserNameDeleteTest() throws ApiException {
        String id = null;
        String name = null;
        ModelApiResponse response = api.authSiteIdUserNameDelete(id, name);
        // TODO: test validations
    }

    /**
     * Add user to a site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authSiteIdUserNamePostTest() throws ApiException {
        String id = null;
        String name = null;
        ModelApiResponse response = api.authSiteIdUserNamePost(id, name);
        // TODO: test validations
    }

    /**
     * Create a new site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authSitePostTest() throws ApiException {
        String body = null;
        ModelApiResponse response = api.authSitePost(body);
        // TODO: test validations
    }

    /**
     * Get a list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        Boolean getAllDetails = null;
        UserList response = api.authUserGet(from, to, getAllDetails);
        // TODO: test validations
    }

    /**
     * Remove client access from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameClientClientNameDeleteTest() throws ApiException {
        String name = null;
        String clientName = null;
        ModelApiResponse response = api.authUserNameClientClientNameDelete(name, clientName);
        // TODO: test validations
    }

    /**
     * Add client access to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameClientClientNamePostTest() throws ApiException {
        String name = null;
        String clientName = null;
        ModelApiResponse response = api.authUserNameClientClientNamePost(name, clientName);
        // TODO: test validations
    }

    /**
     * Get the list of clients to which a user has been granted access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameClientGetTest() throws ApiException {
        String name = null;
        RefList response = api.authUserNameClientGet(name);
        // TODO: test validations
    }

    /**
     * Remove a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameDeleteTest() throws ApiException {
        String name = null;
        ModelApiResponse response = api.authUserNameDelete(name);
        // TODO: test validations
    }

    /**
     * Get information about specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameGetTest() throws ApiException {
        String name = null;
        Boolean getAllDetails = null;
        UserList response = api.authUserNameGet(name, getAllDetails);
        // TODO: test validations
    }

    /**
     * Get the list of user permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNamePermissionGetTest() throws ApiException {
        String name = null;
        PermissionList response = api.authUserNamePermissionGet(name);
        // TODO: test validations
    }

    /**
     * Remove permission from a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNamePermissionPermissionDeleteTest() throws ApiException {
        String name = null;
        String permission = null;
        ModelApiResponse response = api.authUserNamePermissionPermissionDelete(name, permission);
        // TODO: test validations
    }

    /**
     * Add permission to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNamePermissionPermissionPostTest() throws ApiException {
        String name = null;
        String permission = null;
        ModelApiResponse response = api.authUserNamePermissionPermissionPost(name, permission);
        // TODO: test validations
    }

    /**
     * Get the list of the roles which have been assigned to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameRoleGetTest() throws ApiException {
        String name = null;
        RefList response = api.authUserNameRoleGet(name);
        // TODO: test validations
    }

    /**
     * Remove role from a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameRoleRoleNameDeleteTest() throws ApiException {
        String name = null;
        String roleName = null;
        ModelApiResponse response = api.authUserNameRoleRoleNameDelete(name, roleName);
        // TODO: test validations
    }

    /**
     * Assign role to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameRoleRoleNamePostTest() throws ApiException {
        String name = null;
        String roleName = null;
        ModelApiResponse response = api.authUserNameRoleRoleNamePost(name, roleName);
        // TODO: test validations
    }

    /**
     * Remove static access token from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameTokenTokenNameDeleteTest() throws ApiException {
        String name = null;
        String tokenName = null;
        ModelApiResponse response = api.authUserNameTokenTokenNameDelete(name, tokenName);
        // TODO: test validations
    }

    /**
     * Add static access token to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserNameTokenTokenNamePostTest() throws ApiException {
        String name = null;
        String tokenName = null;
        ModelApiResponse response = api.authUserNameTokenTokenNamePost(name, tokenName);
        // TODO: test validations
    }

    /**
     * Create a new user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUserPostTest() throws ApiException {
        String body = null;
        ModelApiResponse response = api.authUserPost(body);
        // TODO: test validations
    }

}
