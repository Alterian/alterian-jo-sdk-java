/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import com.alterian.jo.model.ClusterPostRequest;
import com.alterian.jo.model.ClusterPutRequest;
import com.alterian.jo.model.ModelApiResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClusterApi
 */
@Disabled
public class ClusterApiTest {

    private final ClusterApi api = new ClusterApi();

    /**
     * Remove this node from the cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterDecommissionDeleteTest() throws ApiException {
        String targetnode = null;
        api.clusterDecommissionDelete(targetnode);
        // TODO: test validations
    }

    /**
     * Removes from the cluster a down node that has not been seen for the longest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterDeleteTest() throws ApiException {
        api.clusterDelete();
        // TODO: test validations
    }

    /**
     * Ask the cluster to rerun the discovery process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterDiscoverPostTest() throws ApiException {
        ModelApiResponse response = api.clusterDiscoverPost();
        // TODO: test validations
    }

    /**
     * Make sure all data in internal caches across the entire cluster are written to disk
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterFlushPostTest() throws ApiException {
        ModelApiResponse response = api.clusterFlushPost();
        // TODO: test validations
    }

    /**
     * Find out what instances are in the cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterGetTest() throws ApiException {
        Boolean update = null;
        Boolean repair = null;
        Boolean includeSettings = null;
        ModelApiResponse response = api.clusterGet(update, repair, includeSettings);
        // TODO: test validations
    }

    /**
     * Register an instance with the cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterPostTest() throws ApiException {
        ClusterPostRequest clusterPostRequest = null;
        ModelApiResponse response = api.clusterPost(clusterPostRequest);
        // TODO: test validations
    }

    /**
     * Update an advanced cluster setting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterPutTest() throws ApiException {
        ClusterPutRequest clusterPutRequest = null;
        ModelApiResponse response = api.clusterPut(clusterPutRequest);
        // TODO: test validations
    }

    /**
     * Make this note reregister itself with all the other nodes in the cluster without requiring a restart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterReregisterPostTest() throws ApiException {
        String body = null;
        ModelApiResponse response = api.clusterReregisterPost(body);
        // TODO: test validations
    }

    /**
     * Find out the streaming status of an instance in the cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterStreamGetTest() throws ApiException {
        String targetnode = null;
        ModelApiResponse response = api.clusterStreamGet(targetnode);
        // TODO: test validations
    }

    /**
     * Find out the current stream throughput (Mb per sec) of an instance in the cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterStreamThroughputGetTest() throws ApiException {
        String targetnode = null;
        ModelApiResponse response = api.clusterStreamThroughputGet(targetnode);
        // TODO: test validations
    }

    /**
     * Set the current stream throughput (Mb per sec) of an instance in the cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterStreamThroughputPostTest() throws ApiException {
        Integer throughput = null;
        String targetnode = null;
        ModelApiResponse response = api.clusterStreamThroughputPost(throughput, targetnode);
        // TODO: test validations
    }

}
