/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiException;
import com.alterian.jo.model.CsvEnum;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.TargetEnum;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InfoApi
 */
@Disabled
public class InfoApiTest {

    private final InfoApi api = new InfoApi();

    /**
     * Get audit log report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoAuditlogClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        TargetEnum target = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoAuditlogClientGet(client, from, to, target, format);
        // TODO: test validations
    }

    /**
     * Get cache data report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoCachedataClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        TargetEnum target = null;
        String rulename = null;
        String cachedirection = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoCachedataClientGet(client, from, to, target, rulename, cachedirection, format);
        // TODO: test validations
    }

    /**
     * Get a report on all the cache columns that are no longer used by any rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoCacheunusedcolumnsClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        TargetEnum target = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoCacheunusedcolumnsClientGet(client, from, to, target, format);
        // TODO: test validations
    }

    /**
     * Report on the users able to access given client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoClientaccessreportClientGetTest() throws ApiException {
        String client = null;
        Boolean includeClientAll = null;
        Boolean includePermissionAll = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoClientaccessreportClientGet(client, includeClientAll, includePermissionAll, format);
        // TODO: test validations
    }

    /**
     * Get the consistency report
     *
     * Compares this nodes resources with other nodes to see if node has latest information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoConsistencyreportGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoConsistencyreportGet(from, to, format);
        // TODO: test validations
    }

    /**
     * Report on the conversation usage by a specific client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoConversationusagereportClientTimeseriesGetTest() throws ApiException {
        String timeseries = null;
        String client = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoConversationusagereportClientTimeseriesGet(timeseries, client, format);
        // TODO: test validations
    }

    /**
     * Report on how fields are created, read and written within a rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoFieldusageTargetClientRulenameGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        Integer from = null;
        Integer to = null;
        CsvEnum format = null;
        Boolean mergefields = null;
        ModelApiResponse response = api.infoFieldusageTargetClientRulenameGet(target, client, rulename, from, to, format, mergefields);
        // TODO: test validations
    }

    /**
     * Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoFlowTargetClientRulenameGetTest() throws ApiException {
        TargetEnum target = null;
        String client = null;
        String rulename = null;
        ModelApiResponse response = api.infoFlowTargetClientRulenameGet(target, client, rulename);
        // TODO: test validations
    }

    /**
     * Get report on global parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoGlobalparamreportClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        String parameterName = null;
        String parameterValue = null;
        Boolean onlyGlobalParameters = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoGlobalparamreportClientGet(client, from, to, parameterName, parameterValue, onlyGlobalParameters, format);
        // TODO: test validations
    }

    /**
     * For a given rule, find all the rules that call this rule internally
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoInternalrulecallreportClientTargetRulenameGetTest() throws ApiException {
        String client = null;
        TargetEnum target = null;
        String rulename = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoInternalrulecallreportClientTargetRulenameGet(client, target, rulename, format);
        // TODO: test validations
    }

    /**
     * Get report on logged 404 errors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoLogged404sClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        Integer limit = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoLogged404sClientGet(client, from, to, limit, format);
        // TODO: test validations
    }

    /**
     * Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can   be accessed by this user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoResourceexistsreportPostTest() throws ApiException {
        String body = null;
        ModelApiResponse response = api.infoResourceexistsreportPost(body);
        // TODO: test validations
    }

    /**
     * Report on the complexity of the various rules for a client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoRulecomplexityreportClientGetTest() throws ApiException {
        String client = null;
        CsvEnum format = null;
        TargetEnum target = null;
        ModelApiResponse response = api.infoRulecomplexityreportClientGet(client, format, target);
        // TODO: test validations
    }

    /**
     * Report on whether rules can be snoozed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoSnoozeGetTest() throws ApiException {
        CsvEnum format = null;
        TargetEnum target = null;
        ModelApiResponse response = api.infoSnoozeGet(format, target);
        // TODO: test validations
    }

    /**
     * Clear the execution statistics histogram for all step types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoSteptypestatisticsDeleteTest() throws ApiException {
        ModelApiResponse response = api.infoSteptypestatisticsDelete();
        // TODO: test validations
    }

    /**
     * Find out the execution statistics histogram for each step type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoSteptypestatisticsGetTest() throws ApiException {
        CsvEnum format = null;
        ModelApiResponse response = api.infoSteptypestatisticsGet(format);
        // TODO: test validations
    }

    /**
     * Report on the steps being used by this client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoSteptypeusagereportClientGetTest() throws ApiException {
        String client = null;
        CsvEnum format = null;
        TargetEnum target = null;
        ModelApiResponse response = api.infoSteptypeusagereportClientGet(client, format, target);
        // TODO: test validations
    }

    /**
     * Find out which rules are using a specific step type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoStepusagereportClientStepnameGetTest() throws ApiException {
        String stepname = null;
        String client = null;
        TargetEnum target = null;
        Integer from = null;
        Integer to = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoStepusagereportClientStepnameGet(stepname, client, target, from, to, format);
        // TODO: test validations
    }

    /**
     * Report on the names of the columns in the cache used by templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTemplatecolumnreportClientGetTest() throws ApiException {
        String client = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoTemplatecolumnreportClientGet(client, format);
        // TODO: test validations
    }

    /**
     * List all templates that expect given input fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTemplateinputreportClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        List<String> inputFields = null;
        Boolean allversions = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoTemplateinputreportClientGet(client, from, to, inputFields, allversions, format);
        // TODO: test validations
    }

    /**
     * Find a list of rules which use a specific template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTemplateusagereportClientTemplatenameGetTest() throws ApiException {
        String templatename = null;
        String client = null;
        String templateClient = null;
        String templateVersion = null;
        Integer from = null;
        Integer to = null;
        TargetEnum target = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoTemplateusagereportClientTemplatenameGet(templatename, client, templateClient, templateVersion, from, to, target, format);
        // TODO: test validations
    }

    /**
     * Reports on validity of uploaded templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTemplatevalidityreportClientGetTest() throws ApiException {
        String client = null;
        Integer from = null;
        Integer to = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoTemplatevalidityreportClientGet(client, from, to, format);
        // TODO: test validations
    }

    /**
     * Reports on token access and last used date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTokenusereportGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        String user = null;
        CsvEnum format = null;
        String token = null;
        ModelApiResponse response = api.infoTokenusereportGet(from, to, user, format, token);
        // TODO: test validations
    }

    /**
     * Worker thread usage
     *
     * Worker threads execute steps within rules. This report shows what they are doing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoWorkerthreadusageGetTest() throws ApiException {
        Integer from = null;
        Integer to = null;
        CsvEnum format = null;
        ModelApiResponse response = api.infoWorkerthreadusageGet(from, to, format);
        // TODO: test validations
    }

}
