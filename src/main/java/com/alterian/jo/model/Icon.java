/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * Icon
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Icon {
  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private String background;

  public static final String SERIALIZED_NAME_SVG_ICON = "svgIcon";
  @SerializedName(SERIALIZED_NAME_SVG_ICON)
  private String svgIcon;

  public static final String SERIALIZED_NAME_FOREGROUND = "foreground";
  @SerializedName(SERIALIZED_NAME_FOREGROUND)
  private String foreground;

  public static final String SERIALIZED_NAME_MAT_ICON = "matIcon";
  @SerializedName(SERIALIZED_NAME_MAT_ICON)
  private String matIcon;

  public Icon() {
  }

  public Icon background(String background) {
    this.background = background;
    return this;
  }

   /**
   * Get background
   * @return background
  **/
  @javax.annotation.Nonnull
  public String getBackground() {
    return background;
  }

  public void setBackground(String background) {
    this.background = background;
  }


  public Icon svgIcon(String svgIcon) {
    this.svgIcon = svgIcon;
    return this;
  }

   /**
   * Get svgIcon
   * @return svgIcon
  **/
  @javax.annotation.Nullable
  public String getSvgIcon() {
    return svgIcon;
  }

  public void setSvgIcon(String svgIcon) {
    this.svgIcon = svgIcon;
  }


  public Icon foreground(String foreground) {
    this.foreground = foreground;
    return this;
  }

   /**
   * Get foreground
   * @return foreground
  **/
  @javax.annotation.Nonnull
  public String getForeground() {
    return foreground;
  }

  public void setForeground(String foreground) {
    this.foreground = foreground;
  }


  public Icon matIcon(String matIcon) {
    this.matIcon = matIcon;
    return this;
  }

   /**
   * Get matIcon
   * @return matIcon
  **/
  @javax.annotation.Nullable
  public String getMatIcon() {
    return matIcon;
  }

  public void setMatIcon(String matIcon) {
    this.matIcon = matIcon;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Icon icon = (Icon) o;
    return Objects.equals(this.background, icon.background) &&
        Objects.equals(this.svgIcon, icon.svgIcon) &&
        Objects.equals(this.foreground, icon.foreground) &&
        Objects.equals(this.matIcon, icon.matIcon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(background, svgIcon, foreground, matIcon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Icon {\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    svgIcon: ").append(toIndentedString(svgIcon)).append("\n");
    sb.append("    foreground: ").append(toIndentedString(foreground)).append("\n");
    sb.append("    matIcon: ").append(toIndentedString(matIcon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background");
    openapiFields.add("svgIcon");
    openapiFields.add("foreground");
    openapiFields.add("matIcon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("background");
    openapiRequiredFields.add("foreground");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Icon
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Icon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Icon is not found in the empty JSON string", Icon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Icon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Icon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Icon.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background").toString()));
      }
      if ((jsonObj.get("svgIcon") != null && !jsonObj.get("svgIcon").isJsonNull()) && !jsonObj.get("svgIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svgIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svgIcon").toString()));
      }
      if (!jsonObj.get("foreground").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground").toString()));
      }
      if ((jsonObj.get("matIcon") != null && !jsonObj.get("matIcon").isJsonNull()) && !jsonObj.get("matIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matIcon").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Icon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Icon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Icon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Icon.class));

       return (TypeAdapter<T>) new TypeAdapter<Icon>() {
           @Override
           public void write(JsonWriter out, Icon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Icon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Icon given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Icon
  * @throws IOException if the JSON string is invalid with respect to Icon
  */
  public static Icon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Icon.class);
  }

 /**
  * Convert an instance of Icon to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

