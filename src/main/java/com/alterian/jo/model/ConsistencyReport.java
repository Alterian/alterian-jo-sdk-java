/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.RemoteObjectEnum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * ConsistencyReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class ConsistencyReport {
  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private RemoteObjectEnum objectType;

  public static final String SERIALIZED_NAME_IS_CONSISTENT = "isConsistent";
  @SerializedName(SERIALIZED_NAME_IS_CONSISTENT)
  private Boolean isConsistent;

  public static final String SERIALIZED_NAME_LOCAL_COUNT = "localCount";
  @SerializedName(SERIALIZED_NAME_LOCAL_COUNT)
  private Integer localCount;

  public static final String SERIALIZED_NAME_REMOTE_COUNT = "remoteCount";
  @SerializedName(SERIALIZED_NAME_REMOTE_COUNT)
  private Integer remoteCount;

  public static final String SERIALIZED_NAME_MISSING_REMOTELY = "missingRemotely";
  @SerializedName(SERIALIZED_NAME_MISSING_REMOTELY)
  private List<String> missingRemotely;

  public static final String SERIALIZED_NAME_MISSING_LOCALLY = "missingLocally";
  @SerializedName(SERIALIZED_NAME_MISSING_LOCALLY)
  private List<String> missingLocally;

  public static final String SERIALIZED_NAME_DIFFERENT_LOCALLY = "differentLocally";
  @SerializedName(SERIALIZED_NAME_DIFFERENT_LOCALLY)
  private List<String> differentLocally;

  public static final String SERIALIZED_NAME_REPORTED_EXCEPTIONS = "reportedExceptions";
  @SerializedName(SERIALIZED_NAME_REPORTED_EXCEPTIONS)
  private List<String> reportedExceptions;

  public ConsistencyReport() {
  }

  public ConsistencyReport objectType(RemoteObjectEnum objectType) {
    this.objectType = objectType;
    return this;
  }

   /**
   * Get objectType
   * @return objectType
  **/
  @javax.annotation.Nullable
  public RemoteObjectEnum getObjectType() {
    return objectType;
  }

  public void setObjectType(RemoteObjectEnum objectType) {
    this.objectType = objectType;
  }


  public ConsistencyReport isConsistent(Boolean isConsistent) {
    this.isConsistent = isConsistent;
    return this;
  }

   /**
   * Get isConsistent
   * @return isConsistent
  **/
  @javax.annotation.Nullable
  public Boolean getIsConsistent() {
    return isConsistent;
  }

  public void setIsConsistent(Boolean isConsistent) {
    this.isConsistent = isConsistent;
  }


  public ConsistencyReport localCount(Integer localCount) {
    this.localCount = localCount;
    return this;
  }

   /**
   * Get localCount
   * @return localCount
  **/
  @javax.annotation.Nullable
  public Integer getLocalCount() {
    return localCount;
  }

  public void setLocalCount(Integer localCount) {
    this.localCount = localCount;
  }


  public ConsistencyReport remoteCount(Integer remoteCount) {
    this.remoteCount = remoteCount;
    return this;
  }

   /**
   * Get remoteCount
   * @return remoteCount
  **/
  @javax.annotation.Nullable
  public Integer getRemoteCount() {
    return remoteCount;
  }

  public void setRemoteCount(Integer remoteCount) {
    this.remoteCount = remoteCount;
  }


  public ConsistencyReport missingRemotely(List<String> missingRemotely) {
    this.missingRemotely = missingRemotely;
    return this;
  }

  public ConsistencyReport addMissingRemotelyItem(String missingRemotelyItem) {
    if (this.missingRemotely == null) {
      this.missingRemotely = new ArrayList<>();
    }
    this.missingRemotely.add(missingRemotelyItem);
    return this;
  }

   /**
   * Get missingRemotely
   * @return missingRemotely
  **/
  @javax.annotation.Nullable
  public List<String> getMissingRemotely() {
    return missingRemotely;
  }

  public void setMissingRemotely(List<String> missingRemotely) {
    this.missingRemotely = missingRemotely;
  }


  public ConsistencyReport missingLocally(List<String> missingLocally) {
    this.missingLocally = missingLocally;
    return this;
  }

  public ConsistencyReport addMissingLocallyItem(String missingLocallyItem) {
    if (this.missingLocally == null) {
      this.missingLocally = new ArrayList<>();
    }
    this.missingLocally.add(missingLocallyItem);
    return this;
  }

   /**
   * Get missingLocally
   * @return missingLocally
  **/
  @javax.annotation.Nullable
  public List<String> getMissingLocally() {
    return missingLocally;
  }

  public void setMissingLocally(List<String> missingLocally) {
    this.missingLocally = missingLocally;
  }


  public ConsistencyReport differentLocally(List<String> differentLocally) {
    this.differentLocally = differentLocally;
    return this;
  }

  public ConsistencyReport addDifferentLocallyItem(String differentLocallyItem) {
    if (this.differentLocally == null) {
      this.differentLocally = new ArrayList<>();
    }
    this.differentLocally.add(differentLocallyItem);
    return this;
  }

   /**
   * Get differentLocally
   * @return differentLocally
  **/
  @javax.annotation.Nullable
  public List<String> getDifferentLocally() {
    return differentLocally;
  }

  public void setDifferentLocally(List<String> differentLocally) {
    this.differentLocally = differentLocally;
  }


  public ConsistencyReport reportedExceptions(List<String> reportedExceptions) {
    this.reportedExceptions = reportedExceptions;
    return this;
  }

  public ConsistencyReport addReportedExceptionsItem(String reportedExceptionsItem) {
    if (this.reportedExceptions == null) {
      this.reportedExceptions = new ArrayList<>();
    }
    this.reportedExceptions.add(reportedExceptionsItem);
    return this;
  }

   /**
   * Get reportedExceptions
   * @return reportedExceptions
  **/
  @javax.annotation.Nullable
  public List<String> getReportedExceptions() {
    return reportedExceptions;
  }

  public void setReportedExceptions(List<String> reportedExceptions) {
    this.reportedExceptions = reportedExceptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsistencyReport consistencyReport = (ConsistencyReport) o;
    return Objects.equals(this.objectType, consistencyReport.objectType) &&
        Objects.equals(this.isConsistent, consistencyReport.isConsistent) &&
        Objects.equals(this.localCount, consistencyReport.localCount) &&
        Objects.equals(this.remoteCount, consistencyReport.remoteCount) &&
        Objects.equals(this.missingRemotely, consistencyReport.missingRemotely) &&
        Objects.equals(this.missingLocally, consistencyReport.missingLocally) &&
        Objects.equals(this.differentLocally, consistencyReport.differentLocally) &&
        Objects.equals(this.reportedExceptions, consistencyReport.reportedExceptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectType, isConsistent, localCount, remoteCount, missingRemotely, missingLocally, differentLocally, reportedExceptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsistencyReport {\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    isConsistent: ").append(toIndentedString(isConsistent)).append("\n");
    sb.append("    localCount: ").append(toIndentedString(localCount)).append("\n");
    sb.append("    remoteCount: ").append(toIndentedString(remoteCount)).append("\n");
    sb.append("    missingRemotely: ").append(toIndentedString(missingRemotely)).append("\n");
    sb.append("    missingLocally: ").append(toIndentedString(missingLocally)).append("\n");
    sb.append("    differentLocally: ").append(toIndentedString(differentLocally)).append("\n");
    sb.append("    reportedExceptions: ").append(toIndentedString(reportedExceptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("objectType");
    openapiFields.add("isConsistent");
    openapiFields.add("localCount");
    openapiFields.add("remoteCount");
    openapiFields.add("missingRemotely");
    openapiFields.add("missingLocally");
    openapiFields.add("differentLocally");
    openapiFields.add("reportedExceptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConsistencyReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsistencyReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsistencyReport is not found in the empty JSON string", ConsistencyReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsistencyReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsistencyReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `objectType`
      if (jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) {
        RemoteObjectEnum.validateJsonElement(jsonObj.get("objectType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("missingRemotely") != null && !jsonObj.get("missingRemotely").isJsonNull() && !jsonObj.get("missingRemotely").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `missingRemotely` to be an array in the JSON string but got `%s`", jsonObj.get("missingRemotely").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("missingLocally") != null && !jsonObj.get("missingLocally").isJsonNull() && !jsonObj.get("missingLocally").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `missingLocally` to be an array in the JSON string but got `%s`", jsonObj.get("missingLocally").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("differentLocally") != null && !jsonObj.get("differentLocally").isJsonNull() && !jsonObj.get("differentLocally").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `differentLocally` to be an array in the JSON string but got `%s`", jsonObj.get("differentLocally").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reportedExceptions") != null && !jsonObj.get("reportedExceptions").isJsonNull() && !jsonObj.get("reportedExceptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportedExceptions` to be an array in the JSON string but got `%s`", jsonObj.get("reportedExceptions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsistencyReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsistencyReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsistencyReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsistencyReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsistencyReport>() {
           @Override
           public void write(JsonWriter out, ConsistencyReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsistencyReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsistencyReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsistencyReport
  * @throws IOException if the JSON string is invalid with respect to ConsistencyReport
  */
  public static ConsistencyReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsistencyReport.class);
  }

 /**
  * Convert an instance of ConsistencyReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

