/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * RuleComplexityReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RuleComplexityReport {
  public static final String SERIALIZED_NAME_NUMBER_OF_RULES = "numberOfRules";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RULES)
  private Integer numberOfRules;

  public static final String SERIALIZED_NAME_CREATE_FUTURE_EVENT_STEPS = "createFutureEventSteps";
  @SerializedName(SERIALIZED_NAME_CREATE_FUTURE_EVENT_STEPS)
  private Integer createFutureEventSteps;

  public static final String SERIALIZED_NAME_PROCESS_FUTURE_EVENT_STEPS = "processFutureEventSteps";
  @SerializedName(SERIALIZED_NAME_PROCESS_FUTURE_EVENT_STEPS)
  private Integer processFutureEventSteps;

  public static final String SERIALIZED_NAME_MAX_HOP_COUNT = "maxHopCount";
  @SerializedName(SERIALIZED_NAME_MAX_HOP_COUNT)
  private Integer maxHopCount;

  public static final String SERIALIZED_NAME_MIN_HOP_COUNT = "minHopCount";
  @SerializedName(SERIALIZED_NAME_MIN_HOP_COUNT)
  private Integer minHopCount;

  public static final String SERIALIZED_NAME_AVERAGE_HOP_COUNT = "averageHopCount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_HOP_COUNT)
  private BigDecimal averageHopCount;

  public static final String SERIALIZED_NAME_MIN_ACTIVE_COUNT = "minActiveCount";
  @SerializedName(SERIALIZED_NAME_MIN_ACTIVE_COUNT)
  private Integer minActiveCount;

  public static final String SERIALIZED_NAME_MAX_ACTIVE_COUNT = "maxActiveCount";
  @SerializedName(SERIALIZED_NAME_MAX_ACTIVE_COUNT)
  private BigDecimal maxActiveCount;

  public static final String SERIALIZED_NAME_AVERAGE_ACTIVE_COUNT = "averageActiveCount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ACTIVE_COUNT)
  private Integer averageActiveCount;

  public static final String SERIALIZED_NAME_MIN_STEP_COUNT = "minStepCount";
  @SerializedName(SERIALIZED_NAME_MIN_STEP_COUNT)
  private Integer minStepCount;

  public static final String SERIALIZED_NAME_MAX_STEP_COUNT = "maxStepCount";
  @SerializedName(SERIALIZED_NAME_MAX_STEP_COUNT)
  private Integer maxStepCount;

  public static final String SERIALIZED_NAME_AVERAGE_STEP_COUNT = "averageStepCount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_STEP_COUNT)
  private BigDecimal averageStepCount;

  public static final String SERIALIZED_NAME_CACHE_READ_WRITE_RATIO = "cacheReadWriteRatio";
  @SerializedName(SERIALIZED_NAME_CACHE_READ_WRITE_RATIO)
  private BigDecimal cacheReadWriteRatio;

  public RuleComplexityReport() {
  }

  public RuleComplexityReport numberOfRules(Integer numberOfRules) {
    this.numberOfRules = numberOfRules;
    return this;
  }

   /**
   * Get numberOfRules
   * @return numberOfRules
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfRules() {
    return numberOfRules;
  }

  public void setNumberOfRules(Integer numberOfRules) {
    this.numberOfRules = numberOfRules;
  }


  public RuleComplexityReport createFutureEventSteps(Integer createFutureEventSteps) {
    this.createFutureEventSteps = createFutureEventSteps;
    return this;
  }

   /**
   * Get createFutureEventSteps
   * @return createFutureEventSteps
  **/
  @javax.annotation.Nullable
  public Integer getCreateFutureEventSteps() {
    return createFutureEventSteps;
  }

  public void setCreateFutureEventSteps(Integer createFutureEventSteps) {
    this.createFutureEventSteps = createFutureEventSteps;
  }


  public RuleComplexityReport processFutureEventSteps(Integer processFutureEventSteps) {
    this.processFutureEventSteps = processFutureEventSteps;
    return this;
  }

   /**
   * Get processFutureEventSteps
   * @return processFutureEventSteps
  **/
  @javax.annotation.Nullable
  public Integer getProcessFutureEventSteps() {
    return processFutureEventSteps;
  }

  public void setProcessFutureEventSteps(Integer processFutureEventSteps) {
    this.processFutureEventSteps = processFutureEventSteps;
  }


  public RuleComplexityReport maxHopCount(Integer maxHopCount) {
    this.maxHopCount = maxHopCount;
    return this;
  }

   /**
   * Get maxHopCount
   * @return maxHopCount
  **/
  @javax.annotation.Nullable
  public Integer getMaxHopCount() {
    return maxHopCount;
  }

  public void setMaxHopCount(Integer maxHopCount) {
    this.maxHopCount = maxHopCount;
  }


  public RuleComplexityReport minHopCount(Integer minHopCount) {
    this.minHopCount = minHopCount;
    return this;
  }

   /**
   * Get minHopCount
   * @return minHopCount
  **/
  @javax.annotation.Nullable
  public Integer getMinHopCount() {
    return minHopCount;
  }

  public void setMinHopCount(Integer minHopCount) {
    this.minHopCount = minHopCount;
  }


  public RuleComplexityReport averageHopCount(BigDecimal averageHopCount) {
    this.averageHopCount = averageHopCount;
    return this;
  }

   /**
   * Get averageHopCount
   * @return averageHopCount
  **/
  @javax.annotation.Nullable
  public BigDecimal getAverageHopCount() {
    return averageHopCount;
  }

  public void setAverageHopCount(BigDecimal averageHopCount) {
    this.averageHopCount = averageHopCount;
  }


  public RuleComplexityReport minActiveCount(Integer minActiveCount) {
    this.minActiveCount = minActiveCount;
    return this;
  }

   /**
   * Get minActiveCount
   * @return minActiveCount
  **/
  @javax.annotation.Nullable
  public Integer getMinActiveCount() {
    return minActiveCount;
  }

  public void setMinActiveCount(Integer minActiveCount) {
    this.minActiveCount = minActiveCount;
  }


  public RuleComplexityReport maxActiveCount(BigDecimal maxActiveCount) {
    this.maxActiveCount = maxActiveCount;
    return this;
  }

   /**
   * Get maxActiveCount
   * @return maxActiveCount
  **/
  @javax.annotation.Nullable
  public BigDecimal getMaxActiveCount() {
    return maxActiveCount;
  }

  public void setMaxActiveCount(BigDecimal maxActiveCount) {
    this.maxActiveCount = maxActiveCount;
  }


  public RuleComplexityReport averageActiveCount(Integer averageActiveCount) {
    this.averageActiveCount = averageActiveCount;
    return this;
  }

   /**
   * Get averageActiveCount
   * @return averageActiveCount
  **/
  @javax.annotation.Nullable
  public Integer getAverageActiveCount() {
    return averageActiveCount;
  }

  public void setAverageActiveCount(Integer averageActiveCount) {
    this.averageActiveCount = averageActiveCount;
  }


  public RuleComplexityReport minStepCount(Integer minStepCount) {
    this.minStepCount = minStepCount;
    return this;
  }

   /**
   * Get minStepCount
   * @return minStepCount
  **/
  @javax.annotation.Nullable
  public Integer getMinStepCount() {
    return minStepCount;
  }

  public void setMinStepCount(Integer minStepCount) {
    this.minStepCount = minStepCount;
  }


  public RuleComplexityReport maxStepCount(Integer maxStepCount) {
    this.maxStepCount = maxStepCount;
    return this;
  }

   /**
   * Get maxStepCount
   * @return maxStepCount
  **/
  @javax.annotation.Nullable
  public Integer getMaxStepCount() {
    return maxStepCount;
  }

  public void setMaxStepCount(Integer maxStepCount) {
    this.maxStepCount = maxStepCount;
  }


  public RuleComplexityReport averageStepCount(BigDecimal averageStepCount) {
    this.averageStepCount = averageStepCount;
    return this;
  }

   /**
   * Get averageStepCount
   * @return averageStepCount
  **/
  @javax.annotation.Nullable
  public BigDecimal getAverageStepCount() {
    return averageStepCount;
  }

  public void setAverageStepCount(BigDecimal averageStepCount) {
    this.averageStepCount = averageStepCount;
  }


  public RuleComplexityReport cacheReadWriteRatio(BigDecimal cacheReadWriteRatio) {
    this.cacheReadWriteRatio = cacheReadWriteRatio;
    return this;
  }

   /**
   * Get cacheReadWriteRatio
   * @return cacheReadWriteRatio
  **/
  @javax.annotation.Nullable
  public BigDecimal getCacheReadWriteRatio() {
    return cacheReadWriteRatio;
  }

  public void setCacheReadWriteRatio(BigDecimal cacheReadWriteRatio) {
    this.cacheReadWriteRatio = cacheReadWriteRatio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleComplexityReport ruleComplexityReport = (RuleComplexityReport) o;
    return Objects.equals(this.numberOfRules, ruleComplexityReport.numberOfRules) &&
        Objects.equals(this.createFutureEventSteps, ruleComplexityReport.createFutureEventSteps) &&
        Objects.equals(this.processFutureEventSteps, ruleComplexityReport.processFutureEventSteps) &&
        Objects.equals(this.maxHopCount, ruleComplexityReport.maxHopCount) &&
        Objects.equals(this.minHopCount, ruleComplexityReport.minHopCount) &&
        Objects.equals(this.averageHopCount, ruleComplexityReport.averageHopCount) &&
        Objects.equals(this.minActiveCount, ruleComplexityReport.minActiveCount) &&
        Objects.equals(this.maxActiveCount, ruleComplexityReport.maxActiveCount) &&
        Objects.equals(this.averageActiveCount, ruleComplexityReport.averageActiveCount) &&
        Objects.equals(this.minStepCount, ruleComplexityReport.minStepCount) &&
        Objects.equals(this.maxStepCount, ruleComplexityReport.maxStepCount) &&
        Objects.equals(this.averageStepCount, ruleComplexityReport.averageStepCount) &&
        Objects.equals(this.cacheReadWriteRatio, ruleComplexityReport.cacheReadWriteRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfRules, createFutureEventSteps, processFutureEventSteps, maxHopCount, minHopCount, averageHopCount, minActiveCount, maxActiveCount, averageActiveCount, minStepCount, maxStepCount, averageStepCount, cacheReadWriteRatio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleComplexityReport {\n");
    sb.append("    numberOfRules: ").append(toIndentedString(numberOfRules)).append("\n");
    sb.append("    createFutureEventSteps: ").append(toIndentedString(createFutureEventSteps)).append("\n");
    sb.append("    processFutureEventSteps: ").append(toIndentedString(processFutureEventSteps)).append("\n");
    sb.append("    maxHopCount: ").append(toIndentedString(maxHopCount)).append("\n");
    sb.append("    minHopCount: ").append(toIndentedString(minHopCount)).append("\n");
    sb.append("    averageHopCount: ").append(toIndentedString(averageHopCount)).append("\n");
    sb.append("    minActiveCount: ").append(toIndentedString(minActiveCount)).append("\n");
    sb.append("    maxActiveCount: ").append(toIndentedString(maxActiveCount)).append("\n");
    sb.append("    averageActiveCount: ").append(toIndentedString(averageActiveCount)).append("\n");
    sb.append("    minStepCount: ").append(toIndentedString(minStepCount)).append("\n");
    sb.append("    maxStepCount: ").append(toIndentedString(maxStepCount)).append("\n");
    sb.append("    averageStepCount: ").append(toIndentedString(averageStepCount)).append("\n");
    sb.append("    cacheReadWriteRatio: ").append(toIndentedString(cacheReadWriteRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numberOfRules");
    openapiFields.add("createFutureEventSteps");
    openapiFields.add("processFutureEventSteps");
    openapiFields.add("maxHopCount");
    openapiFields.add("minHopCount");
    openapiFields.add("averageHopCount");
    openapiFields.add("minActiveCount");
    openapiFields.add("maxActiveCount");
    openapiFields.add("averageActiveCount");
    openapiFields.add("minStepCount");
    openapiFields.add("maxStepCount");
    openapiFields.add("averageStepCount");
    openapiFields.add("cacheReadWriteRatio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleComplexityReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleComplexityReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleComplexityReport is not found in the empty JSON string", RuleComplexityReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleComplexityReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleComplexityReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleComplexityReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleComplexityReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleComplexityReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleComplexityReport.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleComplexityReport>() {
           @Override
           public void write(JsonWriter out, RuleComplexityReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleComplexityReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleComplexityReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleComplexityReport
  * @throws IOException if the JSON string is invalid with respect to RuleComplexityReport
  */
  public static RuleComplexityReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleComplexityReport.class);
  }

 /**
  * Convert an instance of RuleComplexityReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

