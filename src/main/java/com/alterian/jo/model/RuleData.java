/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.LogLevelEnum;
import com.alterian.jo.model.PriorityWeighting;
import com.alterian.jo.model.RuleParameter;
import com.alterian.jo.model.RuleStateEnum;
import com.alterian.jo.model.Statistics;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * RuleData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RuleData {
  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_AUTOLOADER = "autoloader";
  @SerializedName(SERIALIZED_NAME_AUTOLOADER)
  private Object autoloader;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_DATAGRIDS = "datagrids";
  @SerializedName(SERIALIZED_NAME_DATAGRIDS)
  private List<Object> datagrids;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EDGES = "edges";
  @SerializedName(SERIALIZED_NAME_EDGES)
  private List<Object> edges;

  public static final String SERIALIZED_NAME_EXAMPLE_DATA = "exampleData";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_DATA)
  private String exampleData;

  public static final String SERIALIZED_NAME_HAS_AUTOLOADER = "hasAutoloader";
  @SerializedName(SERIALIZED_NAME_HAS_AUTOLOADER)
  private Boolean hasAutoloader;

  public static final String SERIALIZED_NAME_HAS_RULEDESIGNER = "hasRuledesigner";
  @SerializedName(SERIALIZED_NAME_HAS_RULEDESIGNER)
  private Boolean hasRuledesigner;

  public static final String SERIALIZED_NAME_HELP_LINK = "helpLink";
  @SerializedName(SERIALIZED_NAME_HELP_LINK)
  private String helpLink;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_JOURNEYS = "journeys";
  @SerializedName(SERIALIZED_NAME_JOURNEYS)
  private List<String> journeys;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private String lastSeen;

  public static final String SERIALIZED_NAME_LATEST_TEMPLATE_VERSIONS = "latestTemplateVersions";
  @SerializedName(SERIALIZED_NAME_LATEST_TEMPLATE_VERSIONS)
  private Boolean latestTemplateVersions;

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEWER_TEMPLATE_VERSION = "newerTemplateVersion";
  @SerializedName(SERIALIZED_NAME_NEWER_TEMPLATE_VERSION)
  private Integer newerTemplateVersion;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<RuleParameter> parameters;

  public static final String SERIALIZED_NAME_PRIORITY_WEIGHTING = "priorityWeighting";
  @SerializedName(SERIALIZED_NAME_PRIORITY_WEIGHTING)
  private PriorityWeighting priorityWeighting;

  public static final String SERIALIZED_NAME_RELATIVE_TIME = "relativeTime";
  @SerializedName(SERIALIZED_NAME_RELATIVE_TIME)
  private String relativeTime;

  public static final String SERIALIZED_NAME_REQUESTED_AT = "requestedAt";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AT)
  private String requestedAt;

  public static final String SERIALIZED_NAME_RULEGROUPS = "rulegroups";
  @SerializedName(SERIALIZED_NAME_RULEGROUPS)
  private List<String> rulegroups;

  public static final String SERIALIZED_NAME_SECURITY_OPTION = "securityOption";
  @SerializedName(SERIALIZED_NAME_SECURITY_OPTION)
  private String securityOption;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private RuleStateEnum state;

  public static final String SERIALIZED_NAME_STATE_MODIFIED_DATE = "stateModifiedDate";
  @SerializedName(SERIALIZED_NAME_STATE_MODIFIED_DATE)
  private String stateModifiedDate;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private Statistics statistics;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "templateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_TEMPLATE_U_R_L = "templateURL";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_U_R_L)
  private String templateURL;

  public static final String SERIALIZED_NAME_TEMPLATE_VERSION = "templateVersion";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VERSION)
  private Integer templateVersion;

  public static final String SERIALIZED_NAME_TILES = "tiles";
  @SerializedName(SERIALIZED_NAME_TILES)
  private List<Object> tiles;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL_PATH = "urlPath";
  @SerializedName(SERIALIZED_NAME_URL_PATH)
  private String urlPath;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_WTL_LOGGING_ACTIVE = "wtlLoggingActive";
  @SerializedName(SERIALIZED_NAME_WTL_LOGGING_ACTIVE)
  private Boolean wtlLoggingActive;

  public static final String SERIALIZED_NAME_WTL_LOGGING_ALLOWED = "wtlLoggingAllowed";
  @SerializedName(SERIALIZED_NAME_WTL_LOGGING_ALLOWED)
  private Boolean wtlLoggingAllowed;

  public static final String SERIALIZED_NAME_REQUEST_CONTENT_TYPE = "requestContentType";
  @SerializedName(SERIALIZED_NAME_REQUEST_CONTENT_TYPE)
  private String requestContentType;

  public static final String SERIALIZED_NAME_SNOOZED = "snoozed";
  @SerializedName(SERIALIZED_NAME_SNOOZED)
  private Boolean snoozed;

  public RuleData() {
  }

  public RuleData apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * Get apiVersion
   * @return apiVersion
  **/
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public RuleData autoloader(Object autoloader) {
    this.autoloader = autoloader;
    return this;
  }

   /**
   * Get autoloader
   * @return autoloader
  **/
  @javax.annotation.Nullable
  public Object getAutoloader() {
    return autoloader;
  }

  public void setAutoloader(Object autoloader) {
    this.autoloader = autoloader;
  }


  public RuleData client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public RuleData datagrids(List<Object> datagrids) {
    this.datagrids = datagrids;
    return this;
  }

  public RuleData addDatagridsItem(Object datagridsItem) {
    if (this.datagrids == null) {
      this.datagrids = new ArrayList<>();
    }
    this.datagrids.add(datagridsItem);
    return this;
  }

   /**
   * Get datagrids
   * @return datagrids
  **/
  @javax.annotation.Nullable
  public List<Object> getDatagrids() {
    return datagrids;
  }

  public void setDatagrids(List<Object> datagrids) {
    this.datagrids = datagrids;
  }


  public RuleData description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the rule
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RuleData edges(List<Object> edges) {
    this.edges = edges;
    return this;
  }

  public RuleData addEdgesItem(Object edgesItem) {
    if (this.edges == null) {
      this.edges = new ArrayList<>();
    }
    this.edges.add(edgesItem);
    return this;
  }

   /**
   * Get edges
   * @return edges
  **/
  @javax.annotation.Nullable
  public List<Object> getEdges() {
    return edges;
  }

  public void setEdges(List<Object> edges) {
    this.edges = edges;
  }


  public RuleData exampleData(String exampleData) {
    this.exampleData = exampleData;
    return this;
  }

   /**
   * Get exampleData
   * @return exampleData
  **/
  @javax.annotation.Nullable
  public String getExampleData() {
    return exampleData;
  }

  public void setExampleData(String exampleData) {
    this.exampleData = exampleData;
  }


  public RuleData hasAutoloader(Boolean hasAutoloader) {
    this.hasAutoloader = hasAutoloader;
    return this;
  }

   /**
   * Get hasAutoloader
   * @return hasAutoloader
  **/
  @javax.annotation.Nullable
  public Boolean getHasAutoloader() {
    return hasAutoloader;
  }

  public void setHasAutoloader(Boolean hasAutoloader) {
    this.hasAutoloader = hasAutoloader;
  }


  public RuleData hasRuledesigner(Boolean hasRuledesigner) {
    this.hasRuledesigner = hasRuledesigner;
    return this;
  }

   /**
   * Get hasRuledesigner
   * @return hasRuledesigner
  **/
  @javax.annotation.Nullable
  public Boolean getHasRuledesigner() {
    return hasRuledesigner;
  }

  public void setHasRuledesigner(Boolean hasRuledesigner) {
    this.hasRuledesigner = hasRuledesigner;
  }


  public RuleData helpLink(String helpLink) {
    this.helpLink = helpLink;
    return this;
  }

   /**
   * Get helpLink
   * @return helpLink
  **/
  @javax.annotation.Nullable
  public String getHelpLink() {
    return helpLink;
  }

  public void setHelpLink(String helpLink) {
    this.helpLink = helpLink;
  }


  public RuleData isValid(Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

   /**
   * Get isValid
   * @return isValid
  **/
  @javax.annotation.Nullable
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public RuleData journeys(List<String> journeys) {
    this.journeys = journeys;
    return this;
  }

  public RuleData addJourneysItem(String journeysItem) {
    if (this.journeys == null) {
      this.journeys = new ArrayList<>();
    }
    this.journeys.add(journeysItem);
    return this;
  }

   /**
   * Get journeys
   * @return journeys
  **/
  @javax.annotation.Nullable
  public List<String> getJourneys() {
    return journeys;
  }

  public void setJourneys(List<String> journeys) {
    this.journeys = journeys;
  }


  public RuleData lastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Get lastSeen
   * @return lastSeen
  **/
  @javax.annotation.Nullable
  public String getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
  }


  public RuleData latestTemplateVersions(Boolean latestTemplateVersions) {
    this.latestTemplateVersions = latestTemplateVersions;
    return this;
  }

   /**
   * Get latestTemplateVersions
   * @return latestTemplateVersions
  **/
  @javax.annotation.Nullable
  public Boolean getLatestTemplateVersions() {
    return latestTemplateVersions;
  }

  public void setLatestTemplateVersions(Boolean latestTemplateVersions) {
    this.latestTemplateVersions = latestTemplateVersions;
  }


  public RuleData logLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
    return this;
  }

   /**
   * Get logLevel
   * @return logLevel
  **/
  @javax.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public RuleData modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * Get modifiedDate
   * @return modifiedDate
  **/
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public RuleData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RuleData newerTemplateVersion(Integer newerTemplateVersion) {
    this.newerTemplateVersion = newerTemplateVersion;
    return this;
  }

   /**
   * Get newerTemplateVersion
   * @return newerTemplateVersion
  **/
  @javax.annotation.Nullable
  public Integer getNewerTemplateVersion() {
    return newerTemplateVersion;
  }

  public void setNewerTemplateVersion(Integer newerTemplateVersion) {
    this.newerTemplateVersion = newerTemplateVersion;
  }


  public RuleData parameters(List<RuleParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public RuleData addParametersItem(RuleParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  public List<RuleParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<RuleParameter> parameters) {
    this.parameters = parameters;
  }


  public RuleData priorityWeighting(PriorityWeighting priorityWeighting) {
    this.priorityWeighting = priorityWeighting;
    return this;
  }

   /**
   * Get priorityWeighting
   * @return priorityWeighting
  **/
  @javax.annotation.Nullable
  public PriorityWeighting getPriorityWeighting() {
    return priorityWeighting;
  }

  public void setPriorityWeighting(PriorityWeighting priorityWeighting) {
    this.priorityWeighting = priorityWeighting;
  }


  public RuleData relativeTime(String relativeTime) {
    this.relativeTime = relativeTime;
    return this;
  }

   /**
   * Get relativeTime
   * @return relativeTime
  **/
  @javax.annotation.Nullable
  public String getRelativeTime() {
    return relativeTime;
  }

  public void setRelativeTime(String relativeTime) {
    this.relativeTime = relativeTime;
  }


  public RuleData requestedAt(String requestedAt) {
    this.requestedAt = requestedAt;
    return this;
  }

   /**
   * Get requestedAt
   * @return requestedAt
  **/
  @javax.annotation.Nullable
  public String getRequestedAt() {
    return requestedAt;
  }

  public void setRequestedAt(String requestedAt) {
    this.requestedAt = requestedAt;
  }


  public RuleData rulegroups(List<String> rulegroups) {
    this.rulegroups = rulegroups;
    return this;
  }

  public RuleData addRulegroupsItem(String rulegroupsItem) {
    if (this.rulegroups == null) {
      this.rulegroups = new ArrayList<>();
    }
    this.rulegroups.add(rulegroupsItem);
    return this;
  }

   /**
   * Get rulegroups
   * @return rulegroups
  **/
  @javax.annotation.Nullable
  public List<String> getRulegroups() {
    return rulegroups;
  }

  public void setRulegroups(List<String> rulegroups) {
    this.rulegroups = rulegroups;
  }


  public RuleData securityOption(String securityOption) {
    this.securityOption = securityOption;
    return this;
  }

   /**
   * Get securityOption
   * @return securityOption
  **/
  @javax.annotation.Nullable
  public String getSecurityOption() {
    return securityOption;
  }

  public void setSecurityOption(String securityOption) {
    this.securityOption = securityOption;
  }


  public RuleData state(RuleStateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public RuleStateEnum getState() {
    return state;
  }

  public void setState(RuleStateEnum state) {
    this.state = state;
  }


  public RuleData stateModifiedDate(String stateModifiedDate) {
    this.stateModifiedDate = stateModifiedDate;
    return this;
  }

   /**
   * Get stateModifiedDate
   * @return stateModifiedDate
  **/
  @javax.annotation.Nullable
  public String getStateModifiedDate() {
    return stateModifiedDate;
  }

  public void setStateModifiedDate(String stateModifiedDate) {
    this.stateModifiedDate = stateModifiedDate;
  }


  public RuleData statistics(Statistics statistics) {
    this.statistics = statistics;
    return this;
  }

   /**
   * Get statistics
   * @return statistics
  **/
  @javax.annotation.Nullable
  public Statistics getStatistics() {
    return statistics;
  }

  public void setStatistics(Statistics statistics) {
    this.statistics = statistics;
  }


  public RuleData target(String target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public RuleData templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

   /**
   * Get templateName
   * @return templateName
  **/
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public RuleData templateURL(String templateURL) {
    this.templateURL = templateURL;
    return this;
  }

   /**
   * Get templateURL
   * @return templateURL
  **/
  @javax.annotation.Nullable
  public String getTemplateURL() {
    return templateURL;
  }

  public void setTemplateURL(String templateURL) {
    this.templateURL = templateURL;
  }


  public RuleData templateVersion(Integer templateVersion) {
    this.templateVersion = templateVersion;
    return this;
  }

   /**
   * Get templateVersion
   * @return templateVersion
  **/
  @javax.annotation.Nullable
  public Integer getTemplateVersion() {
    return templateVersion;
  }

  public void setTemplateVersion(Integer templateVersion) {
    this.templateVersion = templateVersion;
  }


  public RuleData tiles(List<Object> tiles) {
    this.tiles = tiles;
    return this;
  }

  public RuleData addTilesItem(Object tilesItem) {
    if (this.tiles == null) {
      this.tiles = new ArrayList<>();
    }
    this.tiles.add(tilesItem);
    return this;
  }

   /**
   * Get tiles
   * @return tiles
  **/
  @javax.annotation.Nullable
  public List<Object> getTiles() {
    return tiles;
  }

  public void setTiles(List<Object> tiles) {
    this.tiles = tiles;
  }


  public RuleData type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public RuleData urlPath(String urlPath) {
    this.urlPath = urlPath;
    return this;
  }

   /**
   * Get urlPath
   * @return urlPath
  **/
  @javax.annotation.Nullable
  public String getUrlPath() {
    return urlPath;
  }

  public void setUrlPath(String urlPath) {
    this.urlPath = urlPath;
  }


  public RuleData version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public RuleData wtlLoggingActive(Boolean wtlLoggingActive) {
    this.wtlLoggingActive = wtlLoggingActive;
    return this;
  }

   /**
   * Get wtlLoggingActive
   * @return wtlLoggingActive
  **/
  @javax.annotation.Nullable
  public Boolean getWtlLoggingActive() {
    return wtlLoggingActive;
  }

  public void setWtlLoggingActive(Boolean wtlLoggingActive) {
    this.wtlLoggingActive = wtlLoggingActive;
  }


  public RuleData wtlLoggingAllowed(Boolean wtlLoggingAllowed) {
    this.wtlLoggingAllowed = wtlLoggingAllowed;
    return this;
  }

   /**
   * Get wtlLoggingAllowed
   * @return wtlLoggingAllowed
  **/
  @javax.annotation.Nullable
  public Boolean getWtlLoggingAllowed() {
    return wtlLoggingAllowed;
  }

  public void setWtlLoggingAllowed(Boolean wtlLoggingAllowed) {
    this.wtlLoggingAllowed = wtlLoggingAllowed;
  }


  public RuleData requestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
    return this;
  }

   /**
   * Get requestContentType
   * @return requestContentType
  **/
  @javax.annotation.Nullable
  public String getRequestContentType() {
    return requestContentType;
  }

  public void setRequestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
  }


  public RuleData snoozed(Boolean snoozed) {
    this.snoozed = snoozed;
    return this;
  }

   /**
   * Get snoozed
   * @return snoozed
  **/
  @javax.annotation.Nullable
  public Boolean getSnoozed() {
    return snoozed;
  }

  public void setSnoozed(Boolean snoozed) {
    this.snoozed = snoozed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleData ruleData = (RuleData) o;
    return Objects.equals(this.apiVersion, ruleData.apiVersion) &&
        Objects.equals(this.autoloader, ruleData.autoloader) &&
        Objects.equals(this.client, ruleData.client) &&
        Objects.equals(this.datagrids, ruleData.datagrids) &&
        Objects.equals(this.description, ruleData.description) &&
        Objects.equals(this.edges, ruleData.edges) &&
        Objects.equals(this.exampleData, ruleData.exampleData) &&
        Objects.equals(this.hasAutoloader, ruleData.hasAutoloader) &&
        Objects.equals(this.hasRuledesigner, ruleData.hasRuledesigner) &&
        Objects.equals(this.helpLink, ruleData.helpLink) &&
        Objects.equals(this.isValid, ruleData.isValid) &&
        Objects.equals(this.journeys, ruleData.journeys) &&
        Objects.equals(this.lastSeen, ruleData.lastSeen) &&
        Objects.equals(this.latestTemplateVersions, ruleData.latestTemplateVersions) &&
        Objects.equals(this.logLevel, ruleData.logLevel) &&
        Objects.equals(this.modifiedDate, ruleData.modifiedDate) &&
        Objects.equals(this.name, ruleData.name) &&
        Objects.equals(this.newerTemplateVersion, ruleData.newerTemplateVersion) &&
        Objects.equals(this.parameters, ruleData.parameters) &&
        Objects.equals(this.priorityWeighting, ruleData.priorityWeighting) &&
        Objects.equals(this.relativeTime, ruleData.relativeTime) &&
        Objects.equals(this.requestedAt, ruleData.requestedAt) &&
        Objects.equals(this.rulegroups, ruleData.rulegroups) &&
        Objects.equals(this.securityOption, ruleData.securityOption) &&
        Objects.equals(this.state, ruleData.state) &&
        Objects.equals(this.stateModifiedDate, ruleData.stateModifiedDate) &&
        Objects.equals(this.statistics, ruleData.statistics) &&
        Objects.equals(this.target, ruleData.target) &&
        Objects.equals(this.templateName, ruleData.templateName) &&
        Objects.equals(this.templateURL, ruleData.templateURL) &&
        Objects.equals(this.templateVersion, ruleData.templateVersion) &&
        Objects.equals(this.tiles, ruleData.tiles) &&
        Objects.equals(this.type, ruleData.type) &&
        Objects.equals(this.urlPath, ruleData.urlPath) &&
        Objects.equals(this.version, ruleData.version) &&
        Objects.equals(this.wtlLoggingActive, ruleData.wtlLoggingActive) &&
        Objects.equals(this.wtlLoggingAllowed, ruleData.wtlLoggingAllowed) &&
        Objects.equals(this.requestContentType, ruleData.requestContentType) &&
        Objects.equals(this.snoozed, ruleData.snoozed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, autoloader, client, datagrids, description, edges, exampleData, hasAutoloader, hasRuledesigner, helpLink, isValid, journeys, lastSeen, latestTemplateVersions, logLevel, modifiedDate, name, newerTemplateVersion, parameters, priorityWeighting, relativeTime, requestedAt, rulegroups, securityOption, state, stateModifiedDate, statistics, target, templateName, templateURL, templateVersion, tiles, type, urlPath, version, wtlLoggingActive, wtlLoggingAllowed, requestContentType, snoozed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleData {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    autoloader: ").append(toIndentedString(autoloader)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    datagrids: ").append(toIndentedString(datagrids)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    edges: ").append(toIndentedString(edges)).append("\n");
    sb.append("    exampleData: ").append(toIndentedString(exampleData)).append("\n");
    sb.append("    hasAutoloader: ").append(toIndentedString(hasAutoloader)).append("\n");
    sb.append("    hasRuledesigner: ").append(toIndentedString(hasRuledesigner)).append("\n");
    sb.append("    helpLink: ").append(toIndentedString(helpLink)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    journeys: ").append(toIndentedString(journeys)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    latestTemplateVersions: ").append(toIndentedString(latestTemplateVersions)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newerTemplateVersion: ").append(toIndentedString(newerTemplateVersion)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    priorityWeighting: ").append(toIndentedString(priorityWeighting)).append("\n");
    sb.append("    relativeTime: ").append(toIndentedString(relativeTime)).append("\n");
    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    rulegroups: ").append(toIndentedString(rulegroups)).append("\n");
    sb.append("    securityOption: ").append(toIndentedString(securityOption)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateModifiedDate: ").append(toIndentedString(stateModifiedDate)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    templateURL: ").append(toIndentedString(templateURL)).append("\n");
    sb.append("    templateVersion: ").append(toIndentedString(templateVersion)).append("\n");
    sb.append("    tiles: ").append(toIndentedString(tiles)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    urlPath: ").append(toIndentedString(urlPath)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    wtlLoggingActive: ").append(toIndentedString(wtlLoggingActive)).append("\n");
    sb.append("    wtlLoggingAllowed: ").append(toIndentedString(wtlLoggingAllowed)).append("\n");
    sb.append("    requestContentType: ").append(toIndentedString(requestContentType)).append("\n");
    sb.append("    snoozed: ").append(toIndentedString(snoozed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiVersion");
    openapiFields.add("autoloader");
    openapiFields.add("client");
    openapiFields.add("datagrids");
    openapiFields.add("description");
    openapiFields.add("edges");
    openapiFields.add("exampleData");
    openapiFields.add("hasAutoloader");
    openapiFields.add("hasRuledesigner");
    openapiFields.add("helpLink");
    openapiFields.add("isValid");
    openapiFields.add("journeys");
    openapiFields.add("lastSeen");
    openapiFields.add("latestTemplateVersions");
    openapiFields.add("logLevel");
    openapiFields.add("modifiedDate");
    openapiFields.add("name");
    openapiFields.add("newerTemplateVersion");
    openapiFields.add("parameters");
    openapiFields.add("priorityWeighting");
    openapiFields.add("relativeTime");
    openapiFields.add("requestedAt");
    openapiFields.add("rulegroups");
    openapiFields.add("securityOption");
    openapiFields.add("state");
    openapiFields.add("stateModifiedDate");
    openapiFields.add("statistics");
    openapiFields.add("target");
    openapiFields.add("templateName");
    openapiFields.add("templateURL");
    openapiFields.add("templateVersion");
    openapiFields.add("tiles");
    openapiFields.add("type");
    openapiFields.add("urlPath");
    openapiFields.add("version");
    openapiFields.add("wtlLoggingActive");
    openapiFields.add("wtlLoggingAllowed");
    openapiFields.add("requestContentType");
    openapiFields.add("snoozed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleData is not found in the empty JSON string", RuleData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("datagrids") != null && !jsonObj.get("datagrids").isJsonNull() && !jsonObj.get("datagrids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `datagrids` to be an array in the JSON string but got `%s`", jsonObj.get("datagrids").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("edges") != null && !jsonObj.get("edges").isJsonNull() && !jsonObj.get("edges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `edges` to be an array in the JSON string but got `%s`", jsonObj.get("edges").toString()));
      }
      if ((jsonObj.get("exampleData") != null && !jsonObj.get("exampleData").isJsonNull()) && !jsonObj.get("exampleData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exampleData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exampleData").toString()));
      }
      if ((jsonObj.get("helpLink") != null && !jsonObj.get("helpLink").isJsonNull()) && !jsonObj.get("helpLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpLink").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("journeys") != null && !jsonObj.get("journeys").isJsonNull() && !jsonObj.get("journeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `journeys` to be an array in the JSON string but got `%s`", jsonObj.get("journeys").toString()));
      }
      if ((jsonObj.get("lastSeen") != null && !jsonObj.get("lastSeen").isJsonNull()) && !jsonObj.get("lastSeen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSeen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSeen").toString()));
      }
      // validate the optional field `logLevel`
      if (jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) {
        LogLevelEnum.validateJsonElement(jsonObj.get("logLevel"));
      }
      if ((jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) && !jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            RuleParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `priorityWeighting`
      if (jsonObj.get("priorityWeighting") != null && !jsonObj.get("priorityWeighting").isJsonNull()) {
        PriorityWeighting.validateJsonElement(jsonObj.get("priorityWeighting"));
      }
      if ((jsonObj.get("relativeTime") != null && !jsonObj.get("relativeTime").isJsonNull()) && !jsonObj.get("relativeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeTime").toString()));
      }
      if ((jsonObj.get("requestedAt") != null && !jsonObj.get("requestedAt").isJsonNull()) && !jsonObj.get("requestedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedAt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rulegroups") != null && !jsonObj.get("rulegroups").isJsonNull() && !jsonObj.get("rulegroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulegroups` to be an array in the JSON string but got `%s`", jsonObj.get("rulegroups").toString()));
      }
      if ((jsonObj.get("securityOption") != null && !jsonObj.get("securityOption").isJsonNull()) && !jsonObj.get("securityOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityOption").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        RuleStateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateModifiedDate") != null && !jsonObj.get("stateModifiedDate").isJsonNull()) && !jsonObj.get("stateModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateModifiedDate").toString()));
      }
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        Statistics.validateJsonElement(jsonObj.get("statistics"));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("templateName") != null && !jsonObj.get("templateName").isJsonNull()) && !jsonObj.get("templateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateName").toString()));
      }
      if ((jsonObj.get("templateURL") != null && !jsonObj.get("templateURL").isJsonNull()) && !jsonObj.get("templateURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateURL").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tiles") != null && !jsonObj.get("tiles").isJsonNull() && !jsonObj.get("tiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tiles` to be an array in the JSON string but got `%s`", jsonObj.get("tiles").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("urlPath") != null && !jsonObj.get("urlPath").isJsonNull()) && !jsonObj.get("urlPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlPath").toString()));
      }
      if ((jsonObj.get("requestContentType") != null && !jsonObj.get("requestContentType").isJsonNull()) && !jsonObj.get("requestContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestContentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleData.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleData>() {
           @Override
           public void write(JsonWriter out, RuleData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleData
  * @throws IOException if the JSON string is invalid with respect to RuleData
  */
  public static RuleData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleData.class);
  }

 /**
  * Convert an instance of RuleData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

