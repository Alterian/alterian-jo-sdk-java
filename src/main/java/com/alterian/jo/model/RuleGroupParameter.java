/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.Icon;
import com.alterian.jo.model.PickListItem;
import com.alterian.jo.model.RuleGroupParameterDefaultValue;
import com.alterian.jo.model.TargetValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * RuleGroupParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RuleGroupParameter {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USING_GLOBAL = "usingGlobal";
  @SerializedName(SERIALIZED_NAME_USING_GLOBAL)
  private String usingGlobal;

  public static final String SERIALIZED_NAME_IS_EDITABLE = "IsEditable";
  @SerializedName(SERIALIZED_NAME_IS_EDITABLE)
  private Boolean isEditable;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_REFERENCED_PROPERTY = "ReferencedProperty";
  @SerializedName(SERIALIZED_NAME_REFERENCED_PROPERTY)
  private String referencedProperty;

  public static final String SERIALIZED_NAME_REFERENCED_RULE = "ReferencedRule";
  @SerializedName(SERIALIZED_NAME_REFERENCED_RULE)
  private String referencedRule;

  public static final String SERIALIZED_NAME_PROPERTY_TYPE = "PropertyType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_TYPE)
  private String propertyType;

  public static final String SERIALIZED_NAME_UNITS = "Units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_GLOBAL_PARAM = "globalParam";
  @SerializedName(SERIALIZED_NAME_GLOBAL_PARAM)
  private String globalParam;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private RuleGroupParameterDefaultValue defaultValue;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "IsVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_TEMPLATENAME = "Templatename";
  @SerializedName(SERIALIZED_NAME_TEMPLATENAME)
  private String templatename;

  public static final String SERIALIZED_NAME_DATA_TYPE = "DataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<TargetValue> targets;

  public static final String SERIALIZED_NAME_PICK_LIST_ITEMS = "PickListItems";
  @SerializedName(SERIALIZED_NAME_PICK_LIST_ITEMS)
  private List<PickListItem> pickListItems;

  public static final String SERIALIZED_NAME_ICON_AND_COLOR = "IconAndColor";
  @SerializedName(SERIALIZED_NAME_ICON_AND_COLOR)
  private Icon iconAndColor;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "TemplateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public RuleGroupParameter() {
  }

  public RuleGroupParameter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RuleGroupParameter usingGlobal(String usingGlobal) {
    this.usingGlobal = usingGlobal;
    return this;
  }

   /**
   * Get usingGlobal
   * @return usingGlobal
  **/
  @javax.annotation.Nullable
  public String getUsingGlobal() {
    return usingGlobal;
  }

  public void setUsingGlobal(String usingGlobal) {
    this.usingGlobal = usingGlobal;
  }


  public RuleGroupParameter isEditable(Boolean isEditable) {
    this.isEditable = isEditable;
    return this;
  }

   /**
   * Get isEditable
   * @return isEditable
  **/
  @javax.annotation.Nullable
  public Boolean getIsEditable() {
    return isEditable;
  }

  public void setIsEditable(Boolean isEditable) {
    this.isEditable = isEditable;
  }


  public RuleGroupParameter description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RuleGroupParameter position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public RuleGroupParameter referencedProperty(String referencedProperty) {
    this.referencedProperty = referencedProperty;
    return this;
  }

   /**
   * Get referencedProperty
   * @return referencedProperty
  **/
  @javax.annotation.Nullable
  public String getReferencedProperty() {
    return referencedProperty;
  }

  public void setReferencedProperty(String referencedProperty) {
    this.referencedProperty = referencedProperty;
  }


  public RuleGroupParameter referencedRule(String referencedRule) {
    this.referencedRule = referencedRule;
    return this;
  }

   /**
   * Get referencedRule
   * @return referencedRule
  **/
  @javax.annotation.Nullable
  public String getReferencedRule() {
    return referencedRule;
  }

  public void setReferencedRule(String referencedRule) {
    this.referencedRule = referencedRule;
  }


  public RuleGroupParameter propertyType(String propertyType) {
    this.propertyType = propertyType;
    return this;
  }

   /**
   * Get propertyType
   * @return propertyType
  **/
  @javax.annotation.Nullable
  public String getPropertyType() {
    return propertyType;
  }

  public void setPropertyType(String propertyType) {
    this.propertyType = propertyType;
  }


  public RuleGroupParameter units(String units) {
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }


  public RuleGroupParameter globalParam(String globalParam) {
    this.globalParam = globalParam;
    return this;
  }

   /**
   * Get globalParam
   * @return globalParam
  **/
  @javax.annotation.Nullable
  public String getGlobalParam() {
    return globalParam;
  }

  public void setGlobalParam(String globalParam) {
    this.globalParam = globalParam;
  }


  public RuleGroupParameter defaultValue(RuleGroupParameterDefaultValue defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  public RuleGroupParameterDefaultValue getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(RuleGroupParameterDefaultValue defaultValue) {
    this.defaultValue = defaultValue;
  }


  public RuleGroupParameter isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

   /**
   * Get isVisible
   * @return isVisible
  **/
  @javax.annotation.Nullable
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public RuleGroupParameter templatename(String templatename) {
    this.templatename = templatename;
    return this;
  }

   /**
   * Get templatename
   * @return templatename
  **/
  @javax.annotation.Nullable
  public String getTemplatename() {
    return templatename;
  }

  public void setTemplatename(String templatename) {
    this.templatename = templatename;
  }


  public RuleGroupParameter dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public RuleGroupParameter targets(List<TargetValue> targets) {
    this.targets = targets;
    return this;
  }

  public RuleGroupParameter addTargetsItem(TargetValue targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Get targets
   * @return targets
  **/
  @javax.annotation.Nullable
  public List<TargetValue> getTargets() {
    return targets;
  }

  public void setTargets(List<TargetValue> targets) {
    this.targets = targets;
  }


  public RuleGroupParameter pickListItems(List<PickListItem> pickListItems) {
    this.pickListItems = pickListItems;
    return this;
  }

  public RuleGroupParameter addPickListItemsItem(PickListItem pickListItemsItem) {
    if (this.pickListItems == null) {
      this.pickListItems = new ArrayList<>();
    }
    this.pickListItems.add(pickListItemsItem);
    return this;
  }

   /**
   * Get pickListItems
   * @return pickListItems
  **/
  @javax.annotation.Nullable
  public List<PickListItem> getPickListItems() {
    return pickListItems;
  }

  public void setPickListItems(List<PickListItem> pickListItems) {
    this.pickListItems = pickListItems;
  }


  public RuleGroupParameter iconAndColor(Icon iconAndColor) {
    this.iconAndColor = iconAndColor;
    return this;
  }

   /**
   * Get iconAndColor
   * @return iconAndColor
  **/
  @javax.annotation.Nullable
  public Icon getIconAndColor() {
    return iconAndColor;
  }

  public void setIconAndColor(Icon iconAndColor) {
    this.iconAndColor = iconAndColor;
  }


  public RuleGroupParameter templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RuleGroupParameter instance itself
   */
  public RuleGroupParameter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleGroupParameter ruleGroupParameter = (RuleGroupParameter) o;
    return Objects.equals(this.name, ruleGroupParameter.name) &&
        Objects.equals(this.usingGlobal, ruleGroupParameter.usingGlobal) &&
        Objects.equals(this.isEditable, ruleGroupParameter.isEditable) &&
        Objects.equals(this.description, ruleGroupParameter.description) &&
        Objects.equals(this.position, ruleGroupParameter.position) &&
        Objects.equals(this.referencedProperty, ruleGroupParameter.referencedProperty) &&
        Objects.equals(this.referencedRule, ruleGroupParameter.referencedRule) &&
        Objects.equals(this.propertyType, ruleGroupParameter.propertyType) &&
        Objects.equals(this.units, ruleGroupParameter.units) &&
        Objects.equals(this.globalParam, ruleGroupParameter.globalParam) &&
        Objects.equals(this.defaultValue, ruleGroupParameter.defaultValue) &&
        Objects.equals(this.isVisible, ruleGroupParameter.isVisible) &&
        Objects.equals(this.templatename, ruleGroupParameter.templatename) &&
        Objects.equals(this.dataType, ruleGroupParameter.dataType) &&
        Objects.equals(this.targets, ruleGroupParameter.targets) &&
        Objects.equals(this.pickListItems, ruleGroupParameter.pickListItems) &&
        Objects.equals(this.iconAndColor, ruleGroupParameter.iconAndColor) &&
        Objects.equals(this.templateId, ruleGroupParameter.templateId)&&
        Objects.equals(this.additionalProperties, ruleGroupParameter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, usingGlobal, isEditable, description, position, referencedProperty, referencedRule, propertyType, units, globalParam, defaultValue, isVisible, templatename, dataType, targets, pickListItems, iconAndColor, templateId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleGroupParameter {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    usingGlobal: ").append(toIndentedString(usingGlobal)).append("\n");
    sb.append("    isEditable: ").append(toIndentedString(isEditable)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    referencedProperty: ").append(toIndentedString(referencedProperty)).append("\n");
    sb.append("    referencedRule: ").append(toIndentedString(referencedRule)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    globalParam: ").append(toIndentedString(globalParam)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    templatename: ").append(toIndentedString(templatename)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    pickListItems: ").append(toIndentedString(pickListItems)).append("\n");
    sb.append("    iconAndColor: ").append(toIndentedString(iconAndColor)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("usingGlobal");
    openapiFields.add("IsEditable");
    openapiFields.add("Description");
    openapiFields.add("Position");
    openapiFields.add("ReferencedProperty");
    openapiFields.add("ReferencedRule");
    openapiFields.add("PropertyType");
    openapiFields.add("Units");
    openapiFields.add("globalParam");
    openapiFields.add("DefaultValue");
    openapiFields.add("IsVisible");
    openapiFields.add("Templatename");
    openapiFields.add("DataType");
    openapiFields.add("Targets");
    openapiFields.add("PickListItems");
    openapiFields.add("IconAndColor");
    openapiFields.add("TemplateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleGroupParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleGroupParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleGroupParameter is not found in the empty JSON string", RuleGroupParameter.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("usingGlobal") != null && !jsonObj.get("usingGlobal").isJsonNull()) && !jsonObj.get("usingGlobal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usingGlobal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usingGlobal").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ReferencedProperty") != null && !jsonObj.get("ReferencedProperty").isJsonNull()) && !jsonObj.get("ReferencedProperty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferencedProperty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferencedProperty").toString()));
      }
      if ((jsonObj.get("ReferencedRule") != null && !jsonObj.get("ReferencedRule").isJsonNull()) && !jsonObj.get("ReferencedRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferencedRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferencedRule").toString()));
      }
      if ((jsonObj.get("PropertyType") != null && !jsonObj.get("PropertyType").isJsonNull()) && !jsonObj.get("PropertyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyType").toString()));
      }
      if ((jsonObj.get("Units") != null && !jsonObj.get("Units").isJsonNull()) && !jsonObj.get("Units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Units").toString()));
      }
      if ((jsonObj.get("globalParam") != null && !jsonObj.get("globalParam").isJsonNull()) && !jsonObj.get("globalParam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalParam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalParam").toString()));
      }
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        RuleGroupParameterDefaultValue.validateJsonElement(jsonObj.get("DefaultValue"));
      }
      if ((jsonObj.get("Templatename") != null && !jsonObj.get("Templatename").isJsonNull()) && !jsonObj.get("Templatename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Templatename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Templatename").toString()));
      }
      if ((jsonObj.get("DataType") != null && !jsonObj.get("DataType").isJsonNull()) && !jsonObj.get("DataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataType").toString()));
      }
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("Targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Targets` to be an array in the JSON string but got `%s`", jsonObj.get("Targets").toString()));
          }

          // validate the optional field `Targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            TargetValue.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
      if (jsonObj.get("PickListItems") != null && !jsonObj.get("PickListItems").isJsonNull()) {
        JsonArray jsonArraypickListItems = jsonObj.getAsJsonArray("PickListItems");
        if (jsonArraypickListItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PickListItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PickListItems` to be an array in the JSON string but got `%s`", jsonObj.get("PickListItems").toString()));
          }

          // validate the optional field `PickListItems` (array)
          for (int i = 0; i < jsonArraypickListItems.size(); i++) {
            PickListItem.validateJsonElement(jsonArraypickListItems.get(i));
          };
        }
      }
      // validate the optional field `IconAndColor`
      if (jsonObj.get("IconAndColor") != null && !jsonObj.get("IconAndColor").isJsonNull()) {
        Icon.validateJsonElement(jsonObj.get("IconAndColor"));
      }
      if ((jsonObj.get("TemplateId") != null && !jsonObj.get("TemplateId").isJsonNull()) && !jsonObj.get("TemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TemplateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleGroupParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleGroupParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleGroupParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleGroupParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleGroupParameter>() {
           @Override
           public void write(JsonWriter out, RuleGroupParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleGroupParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             RuleGroupParameter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleGroupParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleGroupParameter
  * @throws IOException if the JSON string is invalid with respect to RuleGroupParameter
  */
  public static RuleGroupParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleGroupParameter.class);
  }

 /**
  * Convert an instance of RuleGroupParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

