/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.RuleData;
import com.alterian.jo.model.RuleStateEnum;
import com.alterian.jo.model.SuccessCursor;
import com.alterian.jo.model.ValidationMessage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * RuleDesignerResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RuleDesignerResponse {
  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private SuccessCursor cursor;

  public static final String SERIALIZED_NAME_DEBUG = "debug";
  @SerializedName(SERIALIZED_NAME_DEBUG)
  private String debug;

  public static final String SERIALIZED_NAME_EXCEPTION_TYPE = "exceptionType";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_TYPE)
  private String exceptionType;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private List<String> changes;

  public static final String SERIALIZED_NAME_HAS_CHANGES = "hasChanges";
  @SerializedName(SERIALIZED_NAME_HAS_CHANGES)
  private Boolean hasChanges;

  public static final String SERIALIZED_NAME_RULE_DESIGNER_J_S_O_N = "ruleDesignerJSON";
  @SerializedName(SERIALIZED_NAME_RULE_DESIGNER_J_S_O_N)
  private RuleData ruleDesignerJSON;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private RuleStateEnum state;

  public static final String SERIALIZED_NAME_VALIDATION_MESSAGES = "validationMessages";
  @SerializedName(SERIALIZED_NAME_VALIDATION_MESSAGES)
  private List<ValidationMessage> validationMessages;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public RuleDesignerResponse() {
  }

  public RuleDesignerResponse cursor(SuccessCursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public SuccessCursor getCursor() {
    return cursor;
  }

  public void setCursor(SuccessCursor cursor) {
    this.cursor = cursor;
  }


  public RuleDesignerResponse debug(String debug) {
    this.debug = debug;
    return this;
  }

   /**
   * Get debug
   * @return debug
  **/
  @javax.annotation.Nullable
  public String getDebug() {
    return debug;
  }

  public void setDebug(String debug) {
    this.debug = debug;
  }


  public RuleDesignerResponse exceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
    return this;
  }

   /**
   * Get exceptionType
   * @return exceptionType
  **/
  @javax.annotation.Nullable
  public String getExceptionType() {
    return exceptionType;
  }

  public void setExceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
  }


  public RuleDesignerResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public RuleDesignerResponse status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RuleDesignerResponse changes(List<String> changes) {
    this.changes = changes;
    return this;
  }

  public RuleDesignerResponse addChangesItem(String changesItem) {
    if (this.changes == null) {
      this.changes = new ArrayList<>();
    }
    this.changes.add(changesItem);
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @javax.annotation.Nullable
  public List<String> getChanges() {
    return changes;
  }

  public void setChanges(List<String> changes) {
    this.changes = changes;
  }


  public RuleDesignerResponse hasChanges(Boolean hasChanges) {
    this.hasChanges = hasChanges;
    return this;
  }

   /**
   * Get hasChanges
   * @return hasChanges
  **/
  @javax.annotation.Nullable
  public Boolean getHasChanges() {
    return hasChanges;
  }

  public void setHasChanges(Boolean hasChanges) {
    this.hasChanges = hasChanges;
  }


  public RuleDesignerResponse ruleDesignerJSON(RuleData ruleDesignerJSON) {
    this.ruleDesignerJSON = ruleDesignerJSON;
    return this;
  }

   /**
   * Get ruleDesignerJSON
   * @return ruleDesignerJSON
  **/
  @javax.annotation.Nullable
  public RuleData getRuleDesignerJSON() {
    return ruleDesignerJSON;
  }

  public void setRuleDesignerJSON(RuleData ruleDesignerJSON) {
    this.ruleDesignerJSON = ruleDesignerJSON;
  }


  public RuleDesignerResponse state(RuleStateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public RuleStateEnum getState() {
    return state;
  }

  public void setState(RuleStateEnum state) {
    this.state = state;
  }


  public RuleDesignerResponse validationMessages(List<ValidationMessage> validationMessages) {
    this.validationMessages = validationMessages;
    return this;
  }

  public RuleDesignerResponse addValidationMessagesItem(ValidationMessage validationMessagesItem) {
    if (this.validationMessages == null) {
      this.validationMessages = new ArrayList<>();
    }
    this.validationMessages.add(validationMessagesItem);
    return this;
  }

   /**
   * Get validationMessages
   * @return validationMessages
  **/
  @javax.annotation.Nullable
  public List<ValidationMessage> getValidationMessages() {
    return validationMessages;
  }

  public void setValidationMessages(List<ValidationMessage> validationMessages) {
    this.validationMessages = validationMessages;
  }


  public RuleDesignerResponse version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public RuleDesignerResponse modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * Get modifiedDate
   * @return modifiedDate
  **/
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleDesignerResponse ruleDesignerResponse = (RuleDesignerResponse) o;
    return Objects.equals(this.cursor, ruleDesignerResponse.cursor) &&
        Objects.equals(this.debug, ruleDesignerResponse.debug) &&
        Objects.equals(this.exceptionType, ruleDesignerResponse.exceptionType) &&
        Objects.equals(this.message, ruleDesignerResponse.message) &&
        Objects.equals(this.status, ruleDesignerResponse.status) &&
        Objects.equals(this.changes, ruleDesignerResponse.changes) &&
        Objects.equals(this.hasChanges, ruleDesignerResponse.hasChanges) &&
        Objects.equals(this.ruleDesignerJSON, ruleDesignerResponse.ruleDesignerJSON) &&
        Objects.equals(this.state, ruleDesignerResponse.state) &&
        Objects.equals(this.validationMessages, ruleDesignerResponse.validationMessages) &&
        Objects.equals(this.version, ruleDesignerResponse.version) &&
        Objects.equals(this.modifiedDate, ruleDesignerResponse.modifiedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cursor, debug, exceptionType, message, status, changes, hasChanges, ruleDesignerJSON, state, validationMessages, version, modifiedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleDesignerResponse {\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("    exceptionType: ").append(toIndentedString(exceptionType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    hasChanges: ").append(toIndentedString(hasChanges)).append("\n");
    sb.append("    ruleDesignerJSON: ").append(toIndentedString(ruleDesignerJSON)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    validationMessages: ").append(toIndentedString(validationMessages)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cursor");
    openapiFields.add("debug");
    openapiFields.add("exceptionType");
    openapiFields.add("message");
    openapiFields.add("status");
    openapiFields.add("changes");
    openapiFields.add("hasChanges");
    openapiFields.add("ruleDesignerJSON");
    openapiFields.add("state");
    openapiFields.add("validationMessages");
    openapiFields.add("version");
    openapiFields.add("modifiedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleDesignerResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleDesignerResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleDesignerResponse is not found in the empty JSON string", RuleDesignerResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleDesignerResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleDesignerResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleDesignerResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cursor`
      if (jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull()) {
        SuccessCursor.validateJsonElement(jsonObj.get("cursor"));
      }
      if ((jsonObj.get("debug") != null && !jsonObj.get("debug").isJsonNull()) && !jsonObj.get("debug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debug").toString()));
      }
      if ((jsonObj.get("exceptionType") != null && !jsonObj.get("exceptionType").isJsonNull()) && !jsonObj.get("exceptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exceptionType").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changes") != null && !jsonObj.get("changes").isJsonNull() && !jsonObj.get("changes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changes` to be an array in the JSON string but got `%s`", jsonObj.get("changes").toString()));
      }
      // validate the optional field `ruleDesignerJSON`
      if (jsonObj.get("ruleDesignerJSON") != null && !jsonObj.get("ruleDesignerJSON").isJsonNull()) {
        RuleData.validateJsonElement(jsonObj.get("ruleDesignerJSON"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        RuleStateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("validationMessages") != null && !jsonObj.get("validationMessages").isJsonNull()) {
        JsonArray jsonArrayvalidationMessages = jsonObj.getAsJsonArray("validationMessages");
        if (jsonArrayvalidationMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationMessages` to be an array in the JSON string but got `%s`", jsonObj.get("validationMessages").toString()));
          }

          // validate the optional field `validationMessages` (array)
          for (int i = 0; i < jsonArrayvalidationMessages.size(); i++) {
            ValidationMessage.validateJsonElement(jsonArrayvalidationMessages.get(i));
          };
        }
      }
      if ((jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) && !jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleDesignerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleDesignerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleDesignerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleDesignerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleDesignerResponse>() {
           @Override
           public void write(JsonWriter out, RuleDesignerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleDesignerResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleDesignerResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleDesignerResponse
  * @throws IOException if the JSON string is invalid with respect to RuleDesignerResponse
  */
  public static RuleDesignerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleDesignerResponse.class);
  }

 /**
  * Convert an instance of RuleDesignerResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

