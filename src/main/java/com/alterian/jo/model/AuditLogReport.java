/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.AuditLogEntry;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * AuditLogReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class AuditLogReport {
  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_AUDITLOG = "auditlog";
  @SerializedName(SERIALIZED_NAME_AUDITLOG)
  private List<AuditLogEntry> auditlog;

  public static final String SERIALIZED_NAME_ISRULE = "isrule";
  @SerializedName(SERIALIZED_NAME_ISRULE)
  private Boolean isrule;

  public AuditLogReport() {
  }

  public AuditLogReport target(String target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public AuditLogReport client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public AuditLogReport name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AuditLogReport url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public AuditLogReport auditlog(List<AuditLogEntry> auditlog) {
    this.auditlog = auditlog;
    return this;
  }

  public AuditLogReport addAuditlogItem(AuditLogEntry auditlogItem) {
    if (this.auditlog == null) {
      this.auditlog = new ArrayList<>();
    }
    this.auditlog.add(auditlogItem);
    return this;
  }

   /**
   * Get auditlog
   * @return auditlog
  **/
  @javax.annotation.Nullable
  public List<AuditLogEntry> getAuditlog() {
    return auditlog;
  }

  public void setAuditlog(List<AuditLogEntry> auditlog) {
    this.auditlog = auditlog;
  }


  public AuditLogReport isrule(Boolean isrule) {
    this.isrule = isrule;
    return this;
  }

   /**
   * Get isrule
   * @return isrule
  **/
  @javax.annotation.Nullable
  public Boolean getIsrule() {
    return isrule;
  }

  public void setIsrule(Boolean isrule) {
    this.isrule = isrule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLogReport auditLogReport = (AuditLogReport) o;
    return Objects.equals(this.target, auditLogReport.target) &&
        Objects.equals(this.client, auditLogReport.client) &&
        Objects.equals(this.name, auditLogReport.name) &&
        Objects.equals(this.url, auditLogReport.url) &&
        Objects.equals(this.auditlog, auditLogReport.auditlog) &&
        Objects.equals(this.isrule, auditLogReport.isrule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, client, name, url, auditlog, isrule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLogReport {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    auditlog: ").append(toIndentedString(auditlog)).append("\n");
    sb.append("    isrule: ").append(toIndentedString(isrule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("target");
    openapiFields.add("client");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("auditlog");
    openapiFields.add("isrule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuditLogReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditLogReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditLogReport is not found in the empty JSON string", AuditLogReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditLogReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditLogReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("auditlog") != null && !jsonObj.get("auditlog").isJsonNull()) {
        JsonArray jsonArrayauditlog = jsonObj.getAsJsonArray("auditlog");
        if (jsonArrayauditlog != null) {
          // ensure the json data is an array
          if (!jsonObj.get("auditlog").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `auditlog` to be an array in the JSON string but got `%s`", jsonObj.get("auditlog").toString()));
          }

          // validate the optional field `auditlog` (array)
          for (int i = 0; i < jsonArrayauditlog.size(); i++) {
            AuditLogEntry.validateJsonElement(jsonArrayauditlog.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditLogReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditLogReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditLogReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditLogReport.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditLogReport>() {
           @Override
           public void write(JsonWriter out, AuditLogReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditLogReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuditLogReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuditLogReport
  * @throws IOException if the JSON string is invalid with respect to AuditLogReport
  */
  public static AuditLogReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditLogReport.class);
  }

 /**
  * Convert an instance of AuditLogReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

