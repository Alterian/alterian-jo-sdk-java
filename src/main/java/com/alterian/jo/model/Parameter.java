/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.PickListItem;
import com.alterian.jo.model.TargetValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * Parameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Parameter {
  public static final String SERIALIZED_NAME_BUSINESS_GOAL = "businessGoal";
  @SerializedName(SERIALIZED_NAME_BUSINESS_GOAL)
  private String businessGoal;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  /**
   * The data type
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    STRING("string"),
    
    NUMBER("number"),
    
    DATE("date"),
    
    PICKLIST("picklist"),
    
    ORDEREDLIST("orderedlist"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GLOBAL_PARAM = "globalParam";
  @SerializedName(SERIALIZED_NAME_GLOBAL_PARAM)
  private Boolean globalParam;

  public static final String SERIALIZED_NAME_IS_CONFIDENTIAL = "isConfidential";
  @SerializedName(SERIALIZED_NAME_IS_CONFIDENTIAL)
  private Boolean isConfidential;

  public static final String SERIALIZED_NAME_IS_EDITABLE = "isEditable";
  @SerializedName(SERIALIZED_NAME_IS_EDITABLE)
  private Boolean isEditable;

  public static final String SERIALIZED_NAME_IS_FORCED_VALUE = "isForcedValue";
  @SerializedName(SERIALIZED_NAME_IS_FORCED_VALUE)
  private Boolean isForcedValue;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "isVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICKLIST_ITEMS = "picklistItems";
  @SerializedName(SERIALIZED_NAME_PICKLIST_ITEMS)
  private List<PickListItem> picklistItems;

  public static final String SERIALIZED_NAME_REQUIRES_ADMIN = "requiresAdmin";
  @SerializedName(SERIALIZED_NAME_REQUIRES_ADMIN)
  private Boolean requiresAdmin;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<TargetValue> targets;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Parameter() {
  }

  public Parameter businessGoal(String businessGoal) {
    this.businessGoal = businessGoal;
    return this;
  }

   /**
   * Get businessGoal
   * @return businessGoal
  **/
  @javax.annotation.Nullable
  public String getBusinessGoal() {
    return businessGoal;
  }

  public void setBusinessGoal(String businessGoal) {
    this.businessGoal = businessGoal;
  }


  public Parameter client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Client name
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public Parameter dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * The data type
   * @return dataType
  **/
  @javax.annotation.Nullable
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public Parameter description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the global parameter
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Parameter globalParam(Boolean globalParam) {
    this.globalParam = globalParam;
    return this;
  }

   /**
   * Get globalParam
   * @return globalParam
  **/
  @javax.annotation.Nullable
  public Boolean getGlobalParam() {
    return globalParam;
  }

  public void setGlobalParam(Boolean globalParam) {
    this.globalParam = globalParam;
  }


  public Parameter isConfidential(Boolean isConfidential) {
    this.isConfidential = isConfidential;
    return this;
  }

   /**
   * Value is masked, e.g. for passwords/keys characters (true/false)
   * @return isConfidential
  **/
  @javax.annotation.Nullable
  public Boolean getIsConfidential() {
    return isConfidential;
  }

  public void setIsConfidential(Boolean isConfidential) {
    this.isConfidential = isConfidential;
  }


  public Parameter isEditable(Boolean isEditable) {
    this.isEditable = isEditable;
    return this;
  }

   /**
   * Values can be edited by users without GLOBALPARAMETER_CAN_CONFIGURE permission characters (true/false)
   * @return isEditable
  **/
  @javax.annotation.Nullable
  public Boolean getIsEditable() {
    return isEditable;
  }

  public void setIsEditable(Boolean isEditable) {
    this.isEditable = isEditable;
  }


  public Parameter isForcedValue(Boolean isForcedValue) {
    this.isForcedValue = isForcedValue;
    return this;
  }

   /**
   * Rule parameter values will be overridden characters (true/false)
   * @return isForcedValue
  **/
  @javax.annotation.Nullable
  public Boolean getIsForcedValue() {
    return isForcedValue;
  }

  public void setIsForcedValue(Boolean isForcedValue) {
    this.isForcedValue = isForcedValue;
  }


  public Parameter isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

   /**
   * Should display characters (true/false)
   * @return isVisible
  **/
  @javax.annotation.Nullable
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public Parameter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Global param name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Parameter picklistItems(List<PickListItem> picklistItems) {
    this.picklistItems = picklistItems;
    return this;
  }

  public Parameter addPicklistItemsItem(PickListItem picklistItemsItem) {
    if (this.picklistItems == null) {
      this.picklistItems = new ArrayList<>();
    }
    this.picklistItems.add(picklistItemsItem);
    return this;
  }

   /**
   * Array of items to select from
   * @return picklistItems
  **/
  @javax.annotation.Nullable
  public List<PickListItem> getPicklistItems() {
    return picklistItems;
  }

  public void setPicklistItems(List<PickListItem> picklistItems) {
    this.picklistItems = picklistItems;
  }


  public Parameter requiresAdmin(Boolean requiresAdmin) {
    this.requiresAdmin = requiresAdmin;
    return this;
  }

   /**
   * Get requiresAdmin
   * @return requiresAdmin
  **/
  @javax.annotation.Nullable
  public Boolean getRequiresAdmin() {
    return requiresAdmin;
  }

  public void setRequiresAdmin(Boolean requiresAdmin) {
    this.requiresAdmin = requiresAdmin;
  }


  public Parameter targets(List<TargetValue> targets) {
    this.targets = targets;
    return this;
  }

  public Parameter addTargetsItem(TargetValue targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Each target/value
   * @return targets
  **/
  @javax.annotation.Nullable
  public List<TargetValue> getTargets() {
    return targets;
  }

  public void setTargets(List<TargetValue> targets) {
    this.targets = targets;
  }


  public Parameter units(String units) {
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }


  public Parameter url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parameter parameter = (Parameter) o;
    return Objects.equals(this.businessGoal, parameter.businessGoal) &&
        Objects.equals(this.client, parameter.client) &&
        Objects.equals(this.dataType, parameter.dataType) &&
        Objects.equals(this.description, parameter.description) &&
        Objects.equals(this.globalParam, parameter.globalParam) &&
        Objects.equals(this.isConfidential, parameter.isConfidential) &&
        Objects.equals(this.isEditable, parameter.isEditable) &&
        Objects.equals(this.isForcedValue, parameter.isForcedValue) &&
        Objects.equals(this.isVisible, parameter.isVisible) &&
        Objects.equals(this.name, parameter.name) &&
        Objects.equals(this.picklistItems, parameter.picklistItems) &&
        Objects.equals(this.requiresAdmin, parameter.requiresAdmin) &&
        Objects.equals(this.targets, parameter.targets) &&
        Objects.equals(this.units, parameter.units) &&
        Objects.equals(this.url, parameter.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessGoal, client, dataType, description, globalParam, isConfidential, isEditable, isForcedValue, isVisible, name, picklistItems, requiresAdmin, targets, units, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parameter {\n");
    sb.append("    businessGoal: ").append(toIndentedString(businessGoal)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    globalParam: ").append(toIndentedString(globalParam)).append("\n");
    sb.append("    isConfidential: ").append(toIndentedString(isConfidential)).append("\n");
    sb.append("    isEditable: ").append(toIndentedString(isEditable)).append("\n");
    sb.append("    isForcedValue: ").append(toIndentedString(isForcedValue)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    picklistItems: ").append(toIndentedString(picklistItems)).append("\n");
    sb.append("    requiresAdmin: ").append(toIndentedString(requiresAdmin)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessGoal");
    openapiFields.add("client");
    openapiFields.add("dataType");
    openapiFields.add("description");
    openapiFields.add("globalParam");
    openapiFields.add("isConfidential");
    openapiFields.add("isEditable");
    openapiFields.add("isForcedValue");
    openapiFields.add("isVisible");
    openapiFields.add("name");
    openapiFields.add("picklistItems");
    openapiFields.add("requiresAdmin");
    openapiFields.add("targets");
    openapiFields.add("units");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Parameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Parameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Parameter is not found in the empty JSON string", Parameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Parameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Parameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("businessGoal") != null && !jsonObj.get("businessGoal").isJsonNull()) && !jsonObj.get("businessGoal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessGoal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessGoal").toString()));
      }
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      // validate the optional field `dataType`
      if (jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) {
        DataTypeEnum.validateJsonElement(jsonObj.get("dataType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("picklistItems") != null && !jsonObj.get("picklistItems").isJsonNull()) {
        JsonArray jsonArraypicklistItems = jsonObj.getAsJsonArray("picklistItems");
        if (jsonArraypicklistItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("picklistItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `picklistItems` to be an array in the JSON string but got `%s`", jsonObj.get("picklistItems").toString()));
          }

          // validate the optional field `picklistItems` (array)
          for (int i = 0; i < jsonArraypicklistItems.size(); i++) {
            PickListItem.validateJsonElement(jsonArraypicklistItems.get(i));
          };
        }
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            TargetValue.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Parameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Parameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Parameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Parameter.class));

       return (TypeAdapter<T>) new TypeAdapter<Parameter>() {
           @Override
           public void write(JsonWriter out, Parameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Parameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Parameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Parameter
  * @throws IOException if the JSON string is invalid with respect to Parameter
  */
  public static Parameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Parameter.class);
  }

 /**
  * Convert an instance of Parameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

