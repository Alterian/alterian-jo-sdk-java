/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * ClusterStreamData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class ClusterStreamData {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PLAN_ID = "planId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_TOTAL_RX_BYTES = "totalRxBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_RX_BYTES)
  private Integer totalRxBytes;

  public static final String SERIALIZED_NAME_CURRENT_RX_BYTES = "currentRxBytes";
  @SerializedName(SERIALIZED_NAME_CURRENT_RX_BYTES)
  private Integer currentRxBytes;

  public static final String SERIALIZED_NAME_RX_PERCENTAGE = "rxPercentage";
  @SerializedName(SERIALIZED_NAME_RX_PERCENTAGE)
  private Integer rxPercentage;

  public static final String SERIALIZED_NAME_TOTAL_TX_BYTES = "totalTxBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_TX_BYTES)
  private Integer totalTxBytes;

  public static final String SERIALIZED_NAME_CURRENT_TX_BYTES = "currentTxBytes";
  @SerializedName(SERIALIZED_NAME_CURRENT_TX_BYTES)
  private Integer currentTxBytes;

  public static final String SERIALIZED_NAME_TX_PERCENTAGE = "txPercentage";
  @SerializedName(SERIALIZED_NAME_TX_PERCENTAGE)
  private Integer txPercentage;

  public ClusterStreamData() {
  }

  public ClusterStreamData description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ClusterStreamData planId(String planId) {
    this.planId = planId;
    return this;
  }

   /**
   * Get planId
   * @return planId
  **/
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public ClusterStreamData totalRxBytes(Integer totalRxBytes) {
    this.totalRxBytes = totalRxBytes;
    return this;
  }

   /**
   * Get totalRxBytes
   * @return totalRxBytes
  **/
  @javax.annotation.Nullable
  public Integer getTotalRxBytes() {
    return totalRxBytes;
  }

  public void setTotalRxBytes(Integer totalRxBytes) {
    this.totalRxBytes = totalRxBytes;
  }


  public ClusterStreamData currentRxBytes(Integer currentRxBytes) {
    this.currentRxBytes = currentRxBytes;
    return this;
  }

   /**
   * Get currentRxBytes
   * @return currentRxBytes
  **/
  @javax.annotation.Nullable
  public Integer getCurrentRxBytes() {
    return currentRxBytes;
  }

  public void setCurrentRxBytes(Integer currentRxBytes) {
    this.currentRxBytes = currentRxBytes;
  }


  public ClusterStreamData rxPercentage(Integer rxPercentage) {
    this.rxPercentage = rxPercentage;
    return this;
  }

   /**
   * Get rxPercentage
   * @return rxPercentage
  **/
  @javax.annotation.Nullable
  public Integer getRxPercentage() {
    return rxPercentage;
  }

  public void setRxPercentage(Integer rxPercentage) {
    this.rxPercentage = rxPercentage;
  }


  public ClusterStreamData totalTxBytes(Integer totalTxBytes) {
    this.totalTxBytes = totalTxBytes;
    return this;
  }

   /**
   * Get totalTxBytes
   * @return totalTxBytes
  **/
  @javax.annotation.Nullable
  public Integer getTotalTxBytes() {
    return totalTxBytes;
  }

  public void setTotalTxBytes(Integer totalTxBytes) {
    this.totalTxBytes = totalTxBytes;
  }


  public ClusterStreamData currentTxBytes(Integer currentTxBytes) {
    this.currentTxBytes = currentTxBytes;
    return this;
  }

   /**
   * Get currentTxBytes
   * @return currentTxBytes
  **/
  @javax.annotation.Nullable
  public Integer getCurrentTxBytes() {
    return currentTxBytes;
  }

  public void setCurrentTxBytes(Integer currentTxBytes) {
    this.currentTxBytes = currentTxBytes;
  }


  public ClusterStreamData txPercentage(Integer txPercentage) {
    this.txPercentage = txPercentage;
    return this;
  }

   /**
   * Get txPercentage
   * @return txPercentage
  **/
  @javax.annotation.Nullable
  public Integer getTxPercentage() {
    return txPercentage;
  }

  public void setTxPercentage(Integer txPercentage) {
    this.txPercentage = txPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterStreamData clusterStreamData = (ClusterStreamData) o;
    return Objects.equals(this.description, clusterStreamData.description) &&
        Objects.equals(this.planId, clusterStreamData.planId) &&
        Objects.equals(this.totalRxBytes, clusterStreamData.totalRxBytes) &&
        Objects.equals(this.currentRxBytes, clusterStreamData.currentRxBytes) &&
        Objects.equals(this.rxPercentage, clusterStreamData.rxPercentage) &&
        Objects.equals(this.totalTxBytes, clusterStreamData.totalTxBytes) &&
        Objects.equals(this.currentTxBytes, clusterStreamData.currentTxBytes) &&
        Objects.equals(this.txPercentage, clusterStreamData.txPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, planId, totalRxBytes, currentRxBytes, rxPercentage, totalTxBytes, currentTxBytes, txPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterStreamData {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    totalRxBytes: ").append(toIndentedString(totalRxBytes)).append("\n");
    sb.append("    currentRxBytes: ").append(toIndentedString(currentRxBytes)).append("\n");
    sb.append("    rxPercentage: ").append(toIndentedString(rxPercentage)).append("\n");
    sb.append("    totalTxBytes: ").append(toIndentedString(totalTxBytes)).append("\n");
    sb.append("    currentTxBytes: ").append(toIndentedString(currentTxBytes)).append("\n");
    sb.append("    txPercentage: ").append(toIndentedString(txPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("planId");
    openapiFields.add("totalRxBytes");
    openapiFields.add("currentRxBytes");
    openapiFields.add("rxPercentage");
    openapiFields.add("totalTxBytes");
    openapiFields.add("currentTxBytes");
    openapiFields.add("txPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ClusterStreamData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterStreamData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterStreamData is not found in the empty JSON string", ClusterStreamData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterStreamData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterStreamData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("planId") != null && !jsonObj.get("planId").isJsonNull()) && !jsonObj.get("planId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterStreamData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterStreamData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterStreamData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterStreamData.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterStreamData>() {
           @Override
           public void write(JsonWriter out, ClusterStreamData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterStreamData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClusterStreamData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClusterStreamData
  * @throws IOException if the JSON string is invalid with respect to ClusterStreamData
  */
  public static ClusterStreamData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterStreamData.class);
  }

 /**
  * Convert an instance of ClusterStreamData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

