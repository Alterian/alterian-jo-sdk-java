/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * GlobalParameterReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GlobalParameterReport {
  public static final String SERIALIZED_NAME_CLIENT = "Client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_PARAM_NAME = "ParamName";
  @SerializedName(SERIALIZED_NAME_PARAM_NAME)
  private String paramName;

  public static final String SERIALIZED_NAME_PARAM_VALUE = "ParamValue";
  @SerializedName(SERIALIZED_NAME_PARAM_VALUE)
  private String paramValue;

  public static final String SERIALIZED_NAME_RULES = "Rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<String> rules;

  public static final String SERIALIZED_NAME_GLOBAL_PARAM = "globalParam";
  @SerializedName(SERIALIZED_NAME_GLOBAL_PARAM)
  private Boolean globalParam;

  public GlobalParameterReport() {
  }

  public GlobalParameterReport client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public GlobalParameterReport paramName(String paramName) {
    this.paramName = paramName;
    return this;
  }

   /**
   * Get paramName
   * @return paramName
  **/
  @javax.annotation.Nullable
  public String getParamName() {
    return paramName;
  }

  public void setParamName(String paramName) {
    this.paramName = paramName;
  }


  public GlobalParameterReport paramValue(String paramValue) {
    this.paramValue = paramValue;
    return this;
  }

   /**
   * Get paramValue
   * @return paramValue
  **/
  @javax.annotation.Nullable
  public String getParamValue() {
    return paramValue;
  }

  public void setParamValue(String paramValue) {
    this.paramValue = paramValue;
  }


  public GlobalParameterReport rules(List<String> rules) {
    this.rules = rules;
    return this;
  }

  public GlobalParameterReport addRulesItem(String rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @javax.annotation.Nullable
  public List<String> getRules() {
    return rules;
  }

  public void setRules(List<String> rules) {
    this.rules = rules;
  }


  public GlobalParameterReport globalParam(Boolean globalParam) {
    this.globalParam = globalParam;
    return this;
  }

   /**
   * Get globalParam
   * @return globalParam
  **/
  @javax.annotation.Nullable
  public Boolean getGlobalParam() {
    return globalParam;
  }

  public void setGlobalParam(Boolean globalParam) {
    this.globalParam = globalParam;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalParameterReport globalParameterReport = (GlobalParameterReport) o;
    return Objects.equals(this.client, globalParameterReport.client) &&
        Objects.equals(this.paramName, globalParameterReport.paramName) &&
        Objects.equals(this.paramValue, globalParameterReport.paramValue) &&
        Objects.equals(this.rules, globalParameterReport.rules) &&
        Objects.equals(this.globalParam, globalParameterReport.globalParam);
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, paramName, paramValue, rules, globalParam);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalParameterReport {\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    paramName: ").append(toIndentedString(paramName)).append("\n");
    sb.append("    paramValue: ").append(toIndentedString(paramValue)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    globalParam: ").append(toIndentedString(globalParam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Client");
    openapiFields.add("ParamName");
    openapiFields.add("ParamValue");
    openapiFields.add("Rules");
    openapiFields.add("globalParam");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GlobalParameterReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalParameterReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalParameterReport is not found in the empty JSON string", GlobalParameterReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalParameterReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalParameterReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Client") != null && !jsonObj.get("Client").isJsonNull()) && !jsonObj.get("Client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Client").toString()));
      }
      if ((jsonObj.get("ParamName") != null && !jsonObj.get("ParamName").isJsonNull()) && !jsonObj.get("ParamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParamName").toString()));
      }
      if ((jsonObj.get("ParamValue") != null && !jsonObj.get("ParamValue").isJsonNull()) && !jsonObj.get("ParamValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParamValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParamValue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Rules") != null && !jsonObj.get("Rules").isJsonNull() && !jsonObj.get("Rules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rules` to be an array in the JSON string but got `%s`", jsonObj.get("Rules").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalParameterReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalParameterReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalParameterReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalParameterReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalParameterReport>() {
           @Override
           public void write(JsonWriter out, GlobalParameterReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalParameterReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GlobalParameterReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GlobalParameterReport
  * @throws IOException if the JSON string is invalid with respect to GlobalParameterReport
  */
  public static GlobalParameterReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalParameterReport.class);
  }

 /**
  * Convert an instance of GlobalParameterReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

