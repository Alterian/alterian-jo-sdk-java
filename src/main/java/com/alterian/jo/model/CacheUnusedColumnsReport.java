/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.CacheUnusedColumn;
import com.alterian.jo.model.TargetEnum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * CacheUnusedColumnsReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class CacheUnusedColumnsReport {
  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private TargetEnum target;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_UNUSED_COLUMNS = "unusedColumns";
  @SerializedName(SERIALIZED_NAME_UNUSED_COLUMNS)
  private List<CacheUnusedColumn> unusedColumns;

  public CacheUnusedColumnsReport() {
  }

  public CacheUnusedColumnsReport client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public CacheUnusedColumnsReport target(TargetEnum target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public TargetEnum getTarget() {
    return target;
  }

  public void setTarget(TargetEnum target) {
    this.target = target;
  }


  public CacheUnusedColumnsReport tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public CacheUnusedColumnsReport unusedColumns(List<CacheUnusedColumn> unusedColumns) {
    this.unusedColumns = unusedColumns;
    return this;
  }

  public CacheUnusedColumnsReport addUnusedColumnsItem(CacheUnusedColumn unusedColumnsItem) {
    if (this.unusedColumns == null) {
      this.unusedColumns = new ArrayList<>();
    }
    this.unusedColumns.add(unusedColumnsItem);
    return this;
  }

   /**
   * Get unusedColumns
   * @return unusedColumns
  **/
  @javax.annotation.Nullable
  public List<CacheUnusedColumn> getUnusedColumns() {
    return unusedColumns;
  }

  public void setUnusedColumns(List<CacheUnusedColumn> unusedColumns) {
    this.unusedColumns = unusedColumns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheUnusedColumnsReport cacheUnusedColumnsReport = (CacheUnusedColumnsReport) o;
    return Objects.equals(this.client, cacheUnusedColumnsReport.client) &&
        Objects.equals(this.target, cacheUnusedColumnsReport.target) &&
        Objects.equals(this.tableName, cacheUnusedColumnsReport.tableName) &&
        Objects.equals(this.unusedColumns, cacheUnusedColumnsReport.unusedColumns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, target, tableName, unusedColumns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheUnusedColumnsReport {\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    unusedColumns: ").append(toIndentedString(unusedColumns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client");
    openapiFields.add("target");
    openapiFields.add("tableName");
    openapiFields.add("unusedColumns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CacheUnusedColumnsReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CacheUnusedColumnsReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CacheUnusedColumnsReport is not found in the empty JSON string", CacheUnusedColumnsReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CacheUnusedColumnsReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CacheUnusedColumnsReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        TargetEnum.validateJsonElement(jsonObj.get("target"));
      }
      if ((jsonObj.get("tableName") != null && !jsonObj.get("tableName").isJsonNull()) && !jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
      if (jsonObj.get("unusedColumns") != null && !jsonObj.get("unusedColumns").isJsonNull()) {
        JsonArray jsonArrayunusedColumns = jsonObj.getAsJsonArray("unusedColumns");
        if (jsonArrayunusedColumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unusedColumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unusedColumns` to be an array in the JSON string but got `%s`", jsonObj.get("unusedColumns").toString()));
          }

          // validate the optional field `unusedColumns` (array)
          for (int i = 0; i < jsonArrayunusedColumns.size(); i++) {
            CacheUnusedColumn.validateJsonElement(jsonArrayunusedColumns.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CacheUnusedColumnsReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CacheUnusedColumnsReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CacheUnusedColumnsReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CacheUnusedColumnsReport.class));

       return (TypeAdapter<T>) new TypeAdapter<CacheUnusedColumnsReport>() {
           @Override
           public void write(JsonWriter out, CacheUnusedColumnsReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CacheUnusedColumnsReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CacheUnusedColumnsReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CacheUnusedColumnsReport
  * @throws IOException if the JSON string is invalid with respect to CacheUnusedColumnsReport
  */
  public static CacheUnusedColumnsReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CacheUnusedColumnsReport.class);
  }

 /**
  * Convert an instance of CacheUnusedColumnsReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

