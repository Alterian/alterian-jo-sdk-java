/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.Parameter;
import com.alterian.jo.model.TargetEnum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * RuleParamDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RuleParamDetails {
  public static final String SERIALIZED_NAME_RULE_NAME = "RuleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private TargetEnum target;

  public static final String SERIALIZED_NAME_CLIENT = "Client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_ALL_PARAMETERS = "AllParameters";
  @SerializedName(SERIALIZED_NAME_ALL_PARAMETERS)
  private List<Parameter> allParameters;

  public RuleParamDetails() {
  }

  public RuleParamDetails ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

   /**
   * Get ruleName
   * @return ruleName
  **/
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public RuleParamDetails target(TargetEnum target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public TargetEnum getTarget() {
    return target;
  }

  public void setTarget(TargetEnum target) {
    this.target = target;
  }


  public RuleParamDetails client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public RuleParamDetails allParameters(List<Parameter> allParameters) {
    this.allParameters = allParameters;
    return this;
  }

  public RuleParamDetails addAllParametersItem(Parameter allParametersItem) {
    if (this.allParameters == null) {
      this.allParameters = new ArrayList<>();
    }
    this.allParameters.add(allParametersItem);
    return this;
  }

   /**
   * Get allParameters
   * @return allParameters
  **/
  @javax.annotation.Nullable
  public List<Parameter> getAllParameters() {
    return allParameters;
  }

  public void setAllParameters(List<Parameter> allParameters) {
    this.allParameters = allParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleParamDetails ruleParamDetails = (RuleParamDetails) o;
    return Objects.equals(this.ruleName, ruleParamDetails.ruleName) &&
        Objects.equals(this.target, ruleParamDetails.target) &&
        Objects.equals(this.client, ruleParamDetails.client) &&
        Objects.equals(this.allParameters, ruleParamDetails.allParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleName, target, client, allParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleParamDetails {\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    allParameters: ").append(toIndentedString(allParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RuleName");
    openapiFields.add("Target");
    openapiFields.add("Client");
    openapiFields.add("AllParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleParamDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleParamDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleParamDetails is not found in the empty JSON string", RuleParamDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleParamDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleParamDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("RuleName") != null && !jsonObj.get("RuleName").isJsonNull()) && !jsonObj.get("RuleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RuleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RuleName").toString()));
      }
      // validate the optional field `Target`
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        TargetEnum.validateJsonElement(jsonObj.get("Target"));
      }
      if ((jsonObj.get("Client") != null && !jsonObj.get("Client").isJsonNull()) && !jsonObj.get("Client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Client").toString()));
      }
      if (jsonObj.get("AllParameters") != null && !jsonObj.get("AllParameters").isJsonNull()) {
        JsonArray jsonArrayallParameters = jsonObj.getAsJsonArray("AllParameters");
        if (jsonArrayallParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AllParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AllParameters` to be an array in the JSON string but got `%s`", jsonObj.get("AllParameters").toString()));
          }

          // validate the optional field `AllParameters` (array)
          for (int i = 0; i < jsonArrayallParameters.size(); i++) {
            Parameter.validateJsonElement(jsonArrayallParameters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleParamDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleParamDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleParamDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleParamDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleParamDetails>() {
           @Override
           public void write(JsonWriter out, RuleParamDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleParamDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleParamDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleParamDetails
  * @throws IOException if the JSON string is invalid with respect to RuleParamDetails
  */
  public static RuleParamDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleParamDetails.class);
  }

 /**
  * Convert an instance of RuleParamDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

