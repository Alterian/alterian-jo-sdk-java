/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.Parameter;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * DataGridDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DataGridDetails {
  /**
   * Gets or Sets columnType
   */
  @JsonAdapter(ColumnTypeEnum.Adapter.class)
  public enum ColumnTypeEnum {
    STRING("String"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    ColumnTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColumnTypeEnum fromValue(String value) {
      for (ColumnTypeEnum b : ColumnTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<ColumnTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColumnTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColumnTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColumnTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColumnTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLUMN_TYPE = "columnType";
  @SerializedName(SERIALIZED_NAME_COLUMN_TYPE)
  private List<ColumnTypeEnum> columnType = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<List<String>> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMN_HEADER = "columnHeader";
  @SerializedName(SERIALIZED_NAME_COLUMN_HEADER)
  private List<String> columnHeader = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COLUMN_FORMAT = "columnFormat";
  @SerializedName(SERIALIZED_NAME_COLUMN_FORMAT)
  private List<String> columnFormat = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<Parameter> parameters;

  public DataGridDetails() {
  }

  public DataGridDetails columnType(List<ColumnTypeEnum> columnType) {
    this.columnType = columnType;
    return this;
  }

  public DataGridDetails addColumnTypeItem(ColumnTypeEnum columnTypeItem) {
    if (this.columnType == null) {
      this.columnType = new ArrayList<>();
    }
    this.columnType.add(columnTypeItem);
    return this;
  }

   /**
   * Get columnType
   * @return columnType
  **/
  @javax.annotation.Nonnull
  public List<ColumnTypeEnum> getColumnType() {
    return columnType;
  }

  public void setColumnType(List<ColumnTypeEnum> columnType) {
    this.columnType = columnType;
  }


  public DataGridDetails data(List<List<String>> data) {
    this.data = data;
    return this;
  }

  public DataGridDetails addDataItem(List<String> dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nonnull
  public List<List<String>> getData() {
    return data;
  }

  public void setData(List<List<String>> data) {
    this.data = data;
  }


  public DataGridDetails columnHeader(List<String> columnHeader) {
    this.columnHeader = columnHeader;
    return this;
  }

  public DataGridDetails addColumnHeaderItem(String columnHeaderItem) {
    if (this.columnHeader == null) {
      this.columnHeader = new ArrayList<>();
    }
    this.columnHeader.add(columnHeaderItem);
    return this;
  }

   /**
   * Get columnHeader
   * @return columnHeader
  **/
  @javax.annotation.Nonnull
  public List<String> getColumnHeader() {
    return columnHeader;
  }

  public void setColumnHeader(List<String> columnHeader) {
    this.columnHeader = columnHeader;
  }


  public DataGridDetails name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataGridDetails columnFormat(List<String> columnFormat) {
    this.columnFormat = columnFormat;
    return this;
  }

  public DataGridDetails addColumnFormatItem(String columnFormatItem) {
    if (this.columnFormat == null) {
      this.columnFormat = new ArrayList<>();
    }
    this.columnFormat.add(columnFormatItem);
    return this;
  }

   /**
   * Get columnFormat
   * @return columnFormat
  **/
  @javax.annotation.Nonnull
  public List<String> getColumnFormat() {
    return columnFormat;
  }

  public void setColumnFormat(List<String> columnFormat) {
    this.columnFormat = columnFormat;
  }


  public DataGridDetails parameters(List<Parameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public DataGridDetails addParametersItem(Parameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  public List<Parameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<Parameter> parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataGridDetails dataGridDetails = (DataGridDetails) o;
    return Objects.equals(this.columnType, dataGridDetails.columnType) &&
        Objects.equals(this.data, dataGridDetails.data) &&
        Objects.equals(this.columnHeader, dataGridDetails.columnHeader) &&
        Objects.equals(this.name, dataGridDetails.name) &&
        Objects.equals(this.columnFormat, dataGridDetails.columnFormat) &&
        Objects.equals(this.parameters, dataGridDetails.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnType, data, columnHeader, name, columnFormat, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataGridDetails {\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    columnHeader: ").append(toIndentedString(columnHeader)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    columnFormat: ").append(toIndentedString(columnFormat)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnType");
    openapiFields.add("data");
    openapiFields.add("columnHeader");
    openapiFields.add("name");
    openapiFields.add("columnFormat");
    openapiFields.add("parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("columnType");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("columnHeader");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("columnFormat");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataGridDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataGridDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataGridDetails is not found in the empty JSON string", DataGridDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataGridDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataGridDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataGridDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("columnType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("columnType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnType` to be an array in the JSON string but got `%s`", jsonObj.get("columnType").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("data") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("columnHeader") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("columnHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnHeader` to be an array in the JSON string but got `%s`", jsonObj.get("columnHeader").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("columnFormat") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("columnFormat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnFormat` to be an array in the JSON string but got `%s`", jsonObj.get("columnFormat").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            Parameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataGridDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataGridDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataGridDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataGridDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DataGridDetails>() {
           @Override
           public void write(JsonWriter out, DataGridDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataGridDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataGridDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataGridDetails
  * @throws IOException if the JSON string is invalid with respect to DataGridDetails
  */
  public static DataGridDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataGridDetails.class);
  }

 /**
  * Convert an instance of DataGridDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

