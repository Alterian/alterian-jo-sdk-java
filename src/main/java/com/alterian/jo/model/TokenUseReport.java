/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * TokenUseReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class TokenUseReport {
  public static final String SERIALIZED_NAME_LOGIN_NAME = "LoginName";
  @SerializedName(SERIALIZED_NAME_LOGIN_NAME)
  private String loginName;

  public static final String SERIALIZED_NAME_TOKEN_NAME = "TokenName";
  @SerializedName(SERIALIZED_NAME_TOKEN_NAME)
  private String tokenName;

  public static final String SERIALIZED_NAME_IS_STATIC_TOKEN = "IsStaticToken";
  @SerializedName(SERIALIZED_NAME_IS_STATIC_TOKEN)
  private Boolean isStaticToken;

  public static final String SERIALIZED_NAME_LAST_USED = "LastUsed";
  @SerializedName(SERIALIZED_NAME_LAST_USED)
  private String lastUsed;

  public static final String SERIALIZED_NAME_TOKEN = "Token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public TokenUseReport() {
  }

  public TokenUseReport loginName(String loginName) {
    this.loginName = loginName;
    return this;
  }

   /**
   * Get loginName
   * @return loginName
  **/
  @javax.annotation.Nullable
  public String getLoginName() {
    return loginName;
  }

  public void setLoginName(String loginName) {
    this.loginName = loginName;
  }


  public TokenUseReport tokenName(String tokenName) {
    this.tokenName = tokenName;
    return this;
  }

   /**
   * Get tokenName
   * @return tokenName
  **/
  @javax.annotation.Nullable
  public String getTokenName() {
    return tokenName;
  }

  public void setTokenName(String tokenName) {
    this.tokenName = tokenName;
  }


  public TokenUseReport isStaticToken(Boolean isStaticToken) {
    this.isStaticToken = isStaticToken;
    return this;
  }

   /**
   * Get isStaticToken
   * @return isStaticToken
  **/
  @javax.annotation.Nullable
  public Boolean getIsStaticToken() {
    return isStaticToken;
  }

  public void setIsStaticToken(Boolean isStaticToken) {
    this.isStaticToken = isStaticToken;
  }


  public TokenUseReport lastUsed(String lastUsed) {
    this.lastUsed = lastUsed;
    return this;
  }

   /**
   * Get lastUsed
   * @return lastUsed
  **/
  @javax.annotation.Nullable
  public String getLastUsed() {
    return lastUsed;
  }

  public void setLastUsed(String lastUsed) {
    this.lastUsed = lastUsed;
  }


  public TokenUseReport token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenUseReport tokenUseReport = (TokenUseReport) o;
    return Objects.equals(this.loginName, tokenUseReport.loginName) &&
        Objects.equals(this.tokenName, tokenUseReport.tokenName) &&
        Objects.equals(this.isStaticToken, tokenUseReport.isStaticToken) &&
        Objects.equals(this.lastUsed, tokenUseReport.lastUsed) &&
        Objects.equals(this.token, tokenUseReport.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loginName, tokenName, isStaticToken, lastUsed, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenUseReport {\n");
    sb.append("    loginName: ").append(toIndentedString(loginName)).append("\n");
    sb.append("    tokenName: ").append(toIndentedString(tokenName)).append("\n");
    sb.append("    isStaticToken: ").append(toIndentedString(isStaticToken)).append("\n");
    sb.append("    lastUsed: ").append(toIndentedString(lastUsed)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LoginName");
    openapiFields.add("TokenName");
    openapiFields.add("IsStaticToken");
    openapiFields.add("LastUsed");
    openapiFields.add("Token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenUseReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenUseReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenUseReport is not found in the empty JSON string", TokenUseReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenUseReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenUseReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LoginName") != null && !jsonObj.get("LoginName").isJsonNull()) && !jsonObj.get("LoginName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoginName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoginName").toString()));
      }
      if ((jsonObj.get("TokenName") != null && !jsonObj.get("TokenName").isJsonNull()) && !jsonObj.get("TokenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TokenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TokenName").toString()));
      }
      if ((jsonObj.get("LastUsed") != null && !jsonObj.get("LastUsed").isJsonNull()) && !jsonObj.get("LastUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastUsed").toString()));
      }
      if ((jsonObj.get("Token") != null && !jsonObj.get("Token").isJsonNull()) && !jsonObj.get("Token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenUseReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenUseReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenUseReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenUseReport.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenUseReport>() {
           @Override
           public void write(JsonWriter out, TokenUseReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenUseReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenUseReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenUseReport
  * @throws IOException if the JSON string is invalid with respect to TokenUseReport
  */
  public static TokenUseReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenUseReport.class);
  }

 /**
  * Convert an instance of TokenUseReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

