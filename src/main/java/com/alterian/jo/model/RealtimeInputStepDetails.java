/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.RealtimeInputStepHeader;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * RealtimeInputStepDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RealtimeInputStepDetails {
  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<RealtimeInputStepHeader> headers;

  public static final String SERIALIZED_NAME_REPEAT_TEST_DATA = "repeatTestData";
  @SerializedName(SERIALIZED_NAME_REPEAT_TEST_DATA)
  private Boolean repeatTestData;

  public static final String SERIALIZED_NAME_TIMEOUT_HTTP_CODE = "timeoutHttpCode";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_HTTP_CODE)
  private String timeoutHttpCode;

  public static final String SERIALIZED_NAME_DEFAULT_RESPONSE_CONTENT_TYPE = "defaultResponseContentType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RESPONSE_CONTENT_TYPE)
  private String defaultResponseContentType;

  public static final String SERIALIZED_NAME_OVERFLOW_PROTECTION = "overflowProtection";
  @SerializedName(SERIALIZED_NAME_OVERFLOW_PROTECTION)
  private Boolean overflowProtection;

  public static final String SERIALIZED_NAME_DEFAULT_HTTP_CODE = "defaultHttpCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HTTP_CODE)
  private String defaultHttpCode;

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_USE_TEST_DATA = "useTestData";
  @SerializedName(SERIALIZED_NAME_USE_TEST_DATA)
  private Boolean useTestData;

  public static final String SERIALIZED_NAME_TIMEOUT_VALUE = "timeoutValue";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_VALUE)
  private String timeoutValue;

  public static final String SERIALIZED_NAME_TIMEOUT_MILLISECONDS = "timeoutMilliseconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_MILLISECONDS)
  private String timeoutMilliseconds;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_REQUEST_CONTENT_TYPE = "requestContentType";
  @SerializedName(SERIALIZED_NAME_REQUEST_CONTENT_TYPE)
  private String requestContentType;

  public RealtimeInputStepDetails() {
  }

  public RealtimeInputStepDetails headers(List<RealtimeInputStepHeader> headers) {
    this.headers = headers;
    return this;
  }

  public RealtimeInputStepDetails addHeadersItem(RealtimeInputStepHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nullable
  public List<RealtimeInputStepHeader> getHeaders() {
    return headers;
  }

  public void setHeaders(List<RealtimeInputStepHeader> headers) {
    this.headers = headers;
  }


  public RealtimeInputStepDetails repeatTestData(Boolean repeatTestData) {
    this.repeatTestData = repeatTestData;
    return this;
  }

   /**
   * Get repeatTestData
   * @return repeatTestData
  **/
  @javax.annotation.Nullable
  public Boolean getRepeatTestData() {
    return repeatTestData;
  }

  public void setRepeatTestData(Boolean repeatTestData) {
    this.repeatTestData = repeatTestData;
  }


  public RealtimeInputStepDetails timeoutHttpCode(String timeoutHttpCode) {
    this.timeoutHttpCode = timeoutHttpCode;
    return this;
  }

   /**
   * Get timeoutHttpCode
   * @return timeoutHttpCode
  **/
  @javax.annotation.Nullable
  public String getTimeoutHttpCode() {
    return timeoutHttpCode;
  }

  public void setTimeoutHttpCode(String timeoutHttpCode) {
    this.timeoutHttpCode = timeoutHttpCode;
  }


  public RealtimeInputStepDetails defaultResponseContentType(String defaultResponseContentType) {
    this.defaultResponseContentType = defaultResponseContentType;
    return this;
  }

   /**
   * Get defaultResponseContentType
   * @return defaultResponseContentType
  **/
  @javax.annotation.Nullable
  public String getDefaultResponseContentType() {
    return defaultResponseContentType;
  }

  public void setDefaultResponseContentType(String defaultResponseContentType) {
    this.defaultResponseContentType = defaultResponseContentType;
  }


  public RealtimeInputStepDetails overflowProtection(Boolean overflowProtection) {
    this.overflowProtection = overflowProtection;
    return this;
  }

   /**
   * Get overflowProtection
   * @return overflowProtection
  **/
  @javax.annotation.Nullable
  public Boolean getOverflowProtection() {
    return overflowProtection;
  }

  public void setOverflowProtection(Boolean overflowProtection) {
    this.overflowProtection = overflowProtection;
  }


  public RealtimeInputStepDetails defaultHttpCode(String defaultHttpCode) {
    this.defaultHttpCode = defaultHttpCode;
    return this;
  }

   /**
   * Get defaultHttpCode
   * @return defaultHttpCode
  **/
  @javax.annotation.Nullable
  public String getDefaultHttpCode() {
    return defaultHttpCode;
  }

  public void setDefaultHttpCode(String defaultHttpCode) {
    this.defaultHttpCode = defaultHttpCode;
  }


  public RealtimeInputStepDetails stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

   /**
   * Get stepName
   * @return stepName
  **/
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public RealtimeInputStepDetails defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public RealtimeInputStepDetails useTestData(Boolean useTestData) {
    this.useTestData = useTestData;
    return this;
  }

   /**
   * Get useTestData
   * @return useTestData
  **/
  @javax.annotation.Nullable
  public Boolean getUseTestData() {
    return useTestData;
  }

  public void setUseTestData(Boolean useTestData) {
    this.useTestData = useTestData;
  }


  public RealtimeInputStepDetails timeoutValue(String timeoutValue) {
    this.timeoutValue = timeoutValue;
    return this;
  }

   /**
   * Get timeoutValue
   * @return timeoutValue
  **/
  @javax.annotation.Nullable
  public String getTimeoutValue() {
    return timeoutValue;
  }

  public void setTimeoutValue(String timeoutValue) {
    this.timeoutValue = timeoutValue;
  }


  public RealtimeInputStepDetails timeoutMilliseconds(String timeoutMilliseconds) {
    this.timeoutMilliseconds = timeoutMilliseconds;
    return this;
  }

   /**
   * Get timeoutMilliseconds
   * @return timeoutMilliseconds
  **/
  @javax.annotation.Nullable
  public String getTimeoutMilliseconds() {
    return timeoutMilliseconds;
  }

  public void setTimeoutMilliseconds(String timeoutMilliseconds) {
    this.timeoutMilliseconds = timeoutMilliseconds;
  }


  public RealtimeInputStepDetails priority(String priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public RealtimeInputStepDetails requestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
    return this;
  }

   /**
   * Get requestContentType
   * @return requestContentType
  **/
  @javax.annotation.Nullable
  public String getRequestContentType() {
    return requestContentType;
  }

  public void setRequestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeInputStepDetails realtimeInputStepDetails = (RealtimeInputStepDetails) o;
    return Objects.equals(this.headers, realtimeInputStepDetails.headers) &&
        Objects.equals(this.repeatTestData, realtimeInputStepDetails.repeatTestData) &&
        Objects.equals(this.timeoutHttpCode, realtimeInputStepDetails.timeoutHttpCode) &&
        Objects.equals(this.defaultResponseContentType, realtimeInputStepDetails.defaultResponseContentType) &&
        Objects.equals(this.overflowProtection, realtimeInputStepDetails.overflowProtection) &&
        Objects.equals(this.defaultHttpCode, realtimeInputStepDetails.defaultHttpCode) &&
        Objects.equals(this.stepName, realtimeInputStepDetails.stepName) &&
        Objects.equals(this.defaultValue, realtimeInputStepDetails.defaultValue) &&
        Objects.equals(this.useTestData, realtimeInputStepDetails.useTestData) &&
        Objects.equals(this.timeoutValue, realtimeInputStepDetails.timeoutValue) &&
        Objects.equals(this.timeoutMilliseconds, realtimeInputStepDetails.timeoutMilliseconds) &&
        Objects.equals(this.priority, realtimeInputStepDetails.priority) &&
        Objects.equals(this.requestContentType, realtimeInputStepDetails.requestContentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headers, repeatTestData, timeoutHttpCode, defaultResponseContentType, overflowProtection, defaultHttpCode, stepName, defaultValue, useTestData, timeoutValue, timeoutMilliseconds, priority, requestContentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeInputStepDetails {\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    repeatTestData: ").append(toIndentedString(repeatTestData)).append("\n");
    sb.append("    timeoutHttpCode: ").append(toIndentedString(timeoutHttpCode)).append("\n");
    sb.append("    defaultResponseContentType: ").append(toIndentedString(defaultResponseContentType)).append("\n");
    sb.append("    overflowProtection: ").append(toIndentedString(overflowProtection)).append("\n");
    sb.append("    defaultHttpCode: ").append(toIndentedString(defaultHttpCode)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    useTestData: ").append(toIndentedString(useTestData)).append("\n");
    sb.append("    timeoutValue: ").append(toIndentedString(timeoutValue)).append("\n");
    sb.append("    timeoutMilliseconds: ").append(toIndentedString(timeoutMilliseconds)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    requestContentType: ").append(toIndentedString(requestContentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("headers");
    openapiFields.add("repeatTestData");
    openapiFields.add("timeoutHttpCode");
    openapiFields.add("defaultResponseContentType");
    openapiFields.add("overflowProtection");
    openapiFields.add("defaultHttpCode");
    openapiFields.add("stepName");
    openapiFields.add("defaultValue");
    openapiFields.add("useTestData");
    openapiFields.add("timeoutValue");
    openapiFields.add("timeoutMilliseconds");
    openapiFields.add("priority");
    openapiFields.add("requestContentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RealtimeInputStepDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealtimeInputStepDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealtimeInputStepDetails is not found in the empty JSON string", RealtimeInputStepDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealtimeInputStepDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealtimeInputStepDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            RealtimeInputStepHeader.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if ((jsonObj.get("timeoutHttpCode") != null && !jsonObj.get("timeoutHttpCode").isJsonNull()) && !jsonObj.get("timeoutHttpCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeoutHttpCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeoutHttpCode").toString()));
      }
      if ((jsonObj.get("defaultResponseContentType") != null && !jsonObj.get("defaultResponseContentType").isJsonNull()) && !jsonObj.get("defaultResponseContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultResponseContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultResponseContentType").toString()));
      }
      if ((jsonObj.get("defaultHttpCode") != null && !jsonObj.get("defaultHttpCode").isJsonNull()) && !jsonObj.get("defaultHttpCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultHttpCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultHttpCode").toString()));
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      if ((jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) && !jsonObj.get("defaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultValue").toString()));
      }
      if ((jsonObj.get("timeoutValue") != null && !jsonObj.get("timeoutValue").isJsonNull()) && !jsonObj.get("timeoutValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeoutValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeoutValue").toString()));
      }
      if ((jsonObj.get("timeoutMilliseconds") != null && !jsonObj.get("timeoutMilliseconds").isJsonNull()) && !jsonObj.get("timeoutMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeoutMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeoutMilliseconds").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if ((jsonObj.get("requestContentType") != null && !jsonObj.get("requestContentType").isJsonNull()) && !jsonObj.get("requestContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestContentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealtimeInputStepDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealtimeInputStepDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealtimeInputStepDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealtimeInputStepDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RealtimeInputStepDetails>() {
           @Override
           public void write(JsonWriter out, RealtimeInputStepDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealtimeInputStepDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RealtimeInputStepDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RealtimeInputStepDetails
  * @throws IOException if the JSON string is invalid with respect to RealtimeInputStepDetails
  */
  public static RealtimeInputStepDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealtimeInputStepDetails.class);
  }

 /**
  * Convert an instance of RealtimeInputStepDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

