/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.RuleStateEnum;
import com.alterian.jo.model.TargetEnum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * TemplateUsageReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class TemplateUsageReport {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private TargetEnum target;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private RuleStateEnum state;

  public static final String SERIALIZED_NAME_MATCHED_TEMPLATES = "matchedTemplates";
  @SerializedName(SERIALIZED_NAME_MATCHED_TEMPLATES)
  private List<String> matchedTemplates;

  public TemplateUsageReport() {
  }

  public TemplateUsageReport url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public TemplateUsageReport name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TemplateUsageReport target(TargetEnum target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public TargetEnum getTarget() {
    return target;
  }

  public void setTarget(TargetEnum target) {
    this.target = target;
  }


  public TemplateUsageReport client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public TemplateUsageReport state(RuleStateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public RuleStateEnum getState() {
    return state;
  }

  public void setState(RuleStateEnum state) {
    this.state = state;
  }


  public TemplateUsageReport matchedTemplates(List<String> matchedTemplates) {
    this.matchedTemplates = matchedTemplates;
    return this;
  }

  public TemplateUsageReport addMatchedTemplatesItem(String matchedTemplatesItem) {
    if (this.matchedTemplates == null) {
      this.matchedTemplates = new ArrayList<>();
    }
    this.matchedTemplates.add(matchedTemplatesItem);
    return this;
  }

   /**
   * Get matchedTemplates
   * @return matchedTemplates
  **/
  @javax.annotation.Nullable
  public List<String> getMatchedTemplates() {
    return matchedTemplates;
  }

  public void setMatchedTemplates(List<String> matchedTemplates) {
    this.matchedTemplates = matchedTemplates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateUsageReport templateUsageReport = (TemplateUsageReport) o;
    return Objects.equals(this.url, templateUsageReport.url) &&
        Objects.equals(this.name, templateUsageReport.name) &&
        Objects.equals(this.target, templateUsageReport.target) &&
        Objects.equals(this.client, templateUsageReport.client) &&
        Objects.equals(this.state, templateUsageReport.state) &&
        Objects.equals(this.matchedTemplates, templateUsageReport.matchedTemplates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, name, target, client, state, matchedTemplates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateUsageReport {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    matchedTemplates: ").append(toIndentedString(matchedTemplates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("name");
    openapiFields.add("target");
    openapiFields.add("client");
    openapiFields.add("state");
    openapiFields.add("matchedTemplates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TemplateUsageReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateUsageReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateUsageReport is not found in the empty JSON string", TemplateUsageReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateUsageReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateUsageReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        TargetEnum.validateJsonElement(jsonObj.get("target"));
      }
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        RuleStateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("matchedTemplates") != null && !jsonObj.get("matchedTemplates").isJsonNull() && !jsonObj.get("matchedTemplates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("matchedTemplates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateUsageReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateUsageReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateUsageReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateUsageReport.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateUsageReport>() {
           @Override
           public void write(JsonWriter out, TemplateUsageReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateUsageReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplateUsageReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplateUsageReport
  * @throws IOException if the JSON string is invalid with respect to TemplateUsageReport
  */
  public static TemplateUsageReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateUsageReport.class);
  }

 /**
  * Convert an instance of TemplateUsageReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

