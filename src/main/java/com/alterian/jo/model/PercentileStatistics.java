/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * PercentileStatistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class PercentileStatistics {
  public static final String SERIALIZED_NAME_P10 = "p10";
  @SerializedName(SERIALIZED_NAME_P10)
  private String p10;

  public static final String SERIALIZED_NAME_P20 = "p20";
  @SerializedName(SERIALIZED_NAME_P20)
  private String p20;

  public static final String SERIALIZED_NAME_P30 = "p30";
  @SerializedName(SERIALIZED_NAME_P30)
  private String p30;

  public static final String SERIALIZED_NAME_P40 = "p40";
  @SerializedName(SERIALIZED_NAME_P40)
  private String p40;

  public static final String SERIALIZED_NAME_P50 = "p50";
  @SerializedName(SERIALIZED_NAME_P50)
  private String p50;

  public static final String SERIALIZED_NAME_P60 = "p60";
  @SerializedName(SERIALIZED_NAME_P60)
  private String p60;

  public static final String SERIALIZED_NAME_P70 = "p70";
  @SerializedName(SERIALIZED_NAME_P70)
  private String p70;

  public static final String SERIALIZED_NAME_P80 = "p80";
  @SerializedName(SERIALIZED_NAME_P80)
  private String p80;

  public static final String SERIALIZED_NAME_P90 = "p90";
  @SerializedName(SERIALIZED_NAME_P90)
  private String p90;

  public static final String SERIALIZED_NAME_P99 = "p99";
  @SerializedName(SERIALIZED_NAME_P99)
  private String p99;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private String max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private String min;

  public PercentileStatistics() {
  }

  public PercentileStatistics p10(String p10) {
    this.p10 = p10;
    return this;
  }

   /**
   * Get p10
   * @return p10
  **/
  @javax.annotation.Nullable
  public String getP10() {
    return p10;
  }

  public void setP10(String p10) {
    this.p10 = p10;
  }


  public PercentileStatistics p20(String p20) {
    this.p20 = p20;
    return this;
  }

   /**
   * Get p20
   * @return p20
  **/
  @javax.annotation.Nullable
  public String getP20() {
    return p20;
  }

  public void setP20(String p20) {
    this.p20 = p20;
  }


  public PercentileStatistics p30(String p30) {
    this.p30 = p30;
    return this;
  }

   /**
   * Get p30
   * @return p30
  **/
  @javax.annotation.Nullable
  public String getP30() {
    return p30;
  }

  public void setP30(String p30) {
    this.p30 = p30;
  }


  public PercentileStatistics p40(String p40) {
    this.p40 = p40;
    return this;
  }

   /**
   * Get p40
   * @return p40
  **/
  @javax.annotation.Nullable
  public String getP40() {
    return p40;
  }

  public void setP40(String p40) {
    this.p40 = p40;
  }


  public PercentileStatistics p50(String p50) {
    this.p50 = p50;
    return this;
  }

   /**
   * Get p50
   * @return p50
  **/
  @javax.annotation.Nullable
  public String getP50() {
    return p50;
  }

  public void setP50(String p50) {
    this.p50 = p50;
  }


  public PercentileStatistics p60(String p60) {
    this.p60 = p60;
    return this;
  }

   /**
   * Get p60
   * @return p60
  **/
  @javax.annotation.Nullable
  public String getP60() {
    return p60;
  }

  public void setP60(String p60) {
    this.p60 = p60;
  }


  public PercentileStatistics p70(String p70) {
    this.p70 = p70;
    return this;
  }

   /**
   * Get p70
   * @return p70
  **/
  @javax.annotation.Nullable
  public String getP70() {
    return p70;
  }

  public void setP70(String p70) {
    this.p70 = p70;
  }


  public PercentileStatistics p80(String p80) {
    this.p80 = p80;
    return this;
  }

   /**
   * Get p80
   * @return p80
  **/
  @javax.annotation.Nullable
  public String getP80() {
    return p80;
  }

  public void setP80(String p80) {
    this.p80 = p80;
  }


  public PercentileStatistics p90(String p90) {
    this.p90 = p90;
    return this;
  }

   /**
   * Get p90
   * @return p90
  **/
  @javax.annotation.Nullable
  public String getP90() {
    return p90;
  }

  public void setP90(String p90) {
    this.p90 = p90;
  }


  public PercentileStatistics p99(String p99) {
    this.p99 = p99;
    return this;
  }

   /**
   * Get p99
   * @return p99
  **/
  @javax.annotation.Nullable
  public String getP99() {
    return p99;
  }

  public void setP99(String p99) {
    this.p99 = p99;
  }


  public PercentileStatistics count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public PercentileStatistics max(String max) {
    this.max = max;
    return this;
  }

   /**
   * Get max
   * @return max
  **/
  @javax.annotation.Nullable
  public String getMax() {
    return max;
  }

  public void setMax(String max) {
    this.max = max;
  }


  public PercentileStatistics min(String min) {
    this.min = min;
    return this;
  }

   /**
   * Get min
   * @return min
  **/
  @javax.annotation.Nullable
  public String getMin() {
    return min;
  }

  public void setMin(String min) {
    this.min = min;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PercentileStatistics percentileStatistics = (PercentileStatistics) o;
    return Objects.equals(this.p10, percentileStatistics.p10) &&
        Objects.equals(this.p20, percentileStatistics.p20) &&
        Objects.equals(this.p30, percentileStatistics.p30) &&
        Objects.equals(this.p40, percentileStatistics.p40) &&
        Objects.equals(this.p50, percentileStatistics.p50) &&
        Objects.equals(this.p60, percentileStatistics.p60) &&
        Objects.equals(this.p70, percentileStatistics.p70) &&
        Objects.equals(this.p80, percentileStatistics.p80) &&
        Objects.equals(this.p90, percentileStatistics.p90) &&
        Objects.equals(this.p99, percentileStatistics.p99) &&
        Objects.equals(this.count, percentileStatistics.count) &&
        Objects.equals(this.max, percentileStatistics.max) &&
        Objects.equals(this.min, percentileStatistics.min);
  }

  @Override
  public int hashCode() {
    return Objects.hash(p10, p20, p30, p40, p50, p60, p70, p80, p90, p99, count, max, min);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PercentileStatistics {\n");
    sb.append("    p10: ").append(toIndentedString(p10)).append("\n");
    sb.append("    p20: ").append(toIndentedString(p20)).append("\n");
    sb.append("    p30: ").append(toIndentedString(p30)).append("\n");
    sb.append("    p40: ").append(toIndentedString(p40)).append("\n");
    sb.append("    p50: ").append(toIndentedString(p50)).append("\n");
    sb.append("    p60: ").append(toIndentedString(p60)).append("\n");
    sb.append("    p70: ").append(toIndentedString(p70)).append("\n");
    sb.append("    p80: ").append(toIndentedString(p80)).append("\n");
    sb.append("    p90: ").append(toIndentedString(p90)).append("\n");
    sb.append("    p99: ").append(toIndentedString(p99)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("p10");
    openapiFields.add("p20");
    openapiFields.add("p30");
    openapiFields.add("p40");
    openapiFields.add("p50");
    openapiFields.add("p60");
    openapiFields.add("p70");
    openapiFields.add("p80");
    openapiFields.add("p90");
    openapiFields.add("p99");
    openapiFields.add("count");
    openapiFields.add("max");
    openapiFields.add("min");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PercentileStatistics
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PercentileStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PercentileStatistics is not found in the empty JSON string", PercentileStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PercentileStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PercentileStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("p10") != null && !jsonObj.get("p10").isJsonNull()) && !jsonObj.get("p10").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p10` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p10").toString()));
      }
      if ((jsonObj.get("p20") != null && !jsonObj.get("p20").isJsonNull()) && !jsonObj.get("p20").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p20` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p20").toString()));
      }
      if ((jsonObj.get("p30") != null && !jsonObj.get("p30").isJsonNull()) && !jsonObj.get("p30").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p30` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p30").toString()));
      }
      if ((jsonObj.get("p40") != null && !jsonObj.get("p40").isJsonNull()) && !jsonObj.get("p40").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p40` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p40").toString()));
      }
      if ((jsonObj.get("p50") != null && !jsonObj.get("p50").isJsonNull()) && !jsonObj.get("p50").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p50` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p50").toString()));
      }
      if ((jsonObj.get("p60") != null && !jsonObj.get("p60").isJsonNull()) && !jsonObj.get("p60").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p60` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p60").toString()));
      }
      if ((jsonObj.get("p70") != null && !jsonObj.get("p70").isJsonNull()) && !jsonObj.get("p70").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p70` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p70").toString()));
      }
      if ((jsonObj.get("p80") != null && !jsonObj.get("p80").isJsonNull()) && !jsonObj.get("p80").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p80` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p80").toString()));
      }
      if ((jsonObj.get("p90") != null && !jsonObj.get("p90").isJsonNull()) && !jsonObj.get("p90").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p90` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p90").toString()));
      }
      if ((jsonObj.get("p99") != null && !jsonObj.get("p99").isJsonNull()) && !jsonObj.get("p99").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p99` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p99").toString()));
      }
      if ((jsonObj.get("max") != null && !jsonObj.get("max").isJsonNull()) && !jsonObj.get("max").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max").toString()));
      }
      if ((jsonObj.get("min") != null && !jsonObj.get("min").isJsonNull()) && !jsonObj.get("min").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PercentileStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PercentileStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PercentileStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PercentileStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<PercentileStatistics>() {
           @Override
           public void write(JsonWriter out, PercentileStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PercentileStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PercentileStatistics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PercentileStatistics
  * @throws IOException if the JSON string is invalid with respect to PercentileStatistics
  */
  public static PercentileStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PercentileStatistics.class);
  }

 /**
  * Convert an instance of PercentileStatistics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

