/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.Position;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * FlowReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class FlowReport {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Position position;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_SOURCE_POSITION = "sourcePosition";
  @SerializedName(SERIALIZED_NAME_SOURCE_POSITION)
  private String sourcePosition;

  public static final String SERIALIZED_NAME_TARGET_POSITION = "targetPosition";
  @SerializedName(SERIALIZED_NAME_TARGET_POSITION)
  private String targetPosition;

  public static final String SERIALIZED_NAME_MARKER_END = "markerEnd";
  @SerializedName(SERIALIZED_NAME_MARKER_END)
  private String markerEnd;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public FlowReport() {
  }

  public FlowReport id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FlowReport label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public FlowReport position(Position position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  public Position getPosition() {
    return position;
  }

  public void setPosition(Position position) {
    this.position = position;
  }


  public FlowReport height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public FlowReport width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  public FlowReport sourcePosition(String sourcePosition) {
    this.sourcePosition = sourcePosition;
    return this;
  }

   /**
   * Get sourcePosition
   * @return sourcePosition
  **/
  @javax.annotation.Nullable
  public String getSourcePosition() {
    return sourcePosition;
  }

  public void setSourcePosition(String sourcePosition) {
    this.sourcePosition = sourcePosition;
  }


  public FlowReport targetPosition(String targetPosition) {
    this.targetPosition = targetPosition;
    return this;
  }

   /**
   * Get targetPosition
   * @return targetPosition
  **/
  @javax.annotation.Nullable
  public String getTargetPosition() {
    return targetPosition;
  }

  public void setTargetPosition(String targetPosition) {
    this.targetPosition = targetPosition;
  }


  public FlowReport markerEnd(String markerEnd) {
    this.markerEnd = markerEnd;
    return this;
  }

   /**
   * Get markerEnd
   * @return markerEnd
  **/
  @javax.annotation.Nullable
  public String getMarkerEnd() {
    return markerEnd;
  }

  public void setMarkerEnd(String markerEnd) {
    this.markerEnd = markerEnd;
  }


  public FlowReport source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public FlowReport type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public FlowReport propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * Get propertyClass
   * @return propertyClass
  **/
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public FlowReport target(String target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowReport flowReport = (FlowReport) o;
    return Objects.equals(this.id, flowReport.id) &&
        Objects.equals(this.label, flowReport.label) &&
        Objects.equals(this.position, flowReport.position) &&
        Objects.equals(this.height, flowReport.height) &&
        Objects.equals(this.width, flowReport.width) &&
        Objects.equals(this.sourcePosition, flowReport.sourcePosition) &&
        Objects.equals(this.targetPosition, flowReport.targetPosition) &&
        Objects.equals(this.markerEnd, flowReport.markerEnd) &&
        Objects.equals(this.source, flowReport.source) &&
        Objects.equals(this.type, flowReport.type) &&
        Objects.equals(this.propertyClass, flowReport.propertyClass) &&
        Objects.equals(this.target, flowReport.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, position, height, width, sourcePosition, targetPosition, markerEnd, source, type, propertyClass, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowReport {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    sourcePosition: ").append(toIndentedString(sourcePosition)).append("\n");
    sb.append("    targetPosition: ").append(toIndentedString(targetPosition)).append("\n");
    sb.append("    markerEnd: ").append(toIndentedString(markerEnd)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("position");
    openapiFields.add("height");
    openapiFields.add("width");
    openapiFields.add("sourcePosition");
    openapiFields.add("targetPosition");
    openapiFields.add("markerEnd");
    openapiFields.add("source");
    openapiFields.add("type");
    openapiFields.add("class");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FlowReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowReport is not found in the empty JSON string", FlowReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        Position.validateJsonElement(jsonObj.get("position"));
      }
      if ((jsonObj.get("sourcePosition") != null && !jsonObj.get("sourcePosition").isJsonNull()) && !jsonObj.get("sourcePosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePosition").toString()));
      }
      if ((jsonObj.get("targetPosition") != null && !jsonObj.get("targetPosition").isJsonNull()) && !jsonObj.get("targetPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetPosition").toString()));
      }
      if ((jsonObj.get("markerEnd") != null && !jsonObj.get("markerEnd").isJsonNull()) && !jsonObj.get("markerEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markerEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markerEnd").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowReport.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowReport>() {
           @Override
           public void write(JsonWriter out, FlowReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FlowReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FlowReport
  * @throws IOException if the JSON string is invalid with respect to FlowReport
  */
  public static FlowReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowReport.class);
  }

 /**
  * Convert an instance of FlowReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

