/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.MABVariant;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * MABStepDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class MABStepDetails {
  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_FIELD_KEY = "fieldKey";
  @SerializedName(SERIALIZED_NAME_FIELD_KEY)
  private String fieldKey;

  public static final String SERIALIZED_NAME_PARAMETER_KEY = "parameterKey";
  @SerializedName(SERIALIZED_NAME_PARAMETER_KEY)
  private String parameterKey;

  public static final String SERIALIZED_NAME_PARAMETER_EXPERIMENTATION_FREQUENCY = "parameterExperimentationFrequency";
  @SerializedName(SERIALIZED_NAME_PARAMETER_EXPERIMENTATION_FREQUENCY)
  private String parameterExperimentationFrequency;

  public static final String SERIALIZED_NAME_PARAMETER_MAB_MODE = "parameterMabMode";
  @SerializedName(SERIALIZED_NAME_PARAMETER_MAB_MODE)
  private String parameterMabMode;

  public static final String SERIALIZED_NAME_PARAMETER_STATISTICAL_SIGNIFICANCE = "parameterStatisticalSignificance";
  @SerializedName(SERIALIZED_NAME_PARAMETER_STATISTICAL_SIGNIFICANCE)
  private String parameterStatisticalSignificance;

  public static final String SERIALIZED_NAME_PARAMETER_TABLE = "parameterTable";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TABLE)
  private String parameterTable;

  public static final String SERIALIZED_NAME_REPORTING_FIELDS = "reportingFields";
  @SerializedName(SERIALIZED_NAME_REPORTING_FIELDS)
  private Boolean reportingFields;

  public static final String SERIALIZED_NAME_SEED = "seed";
  @SerializedName(SERIALIZED_NAME_SEED)
  private Integer seed;

  public static final String SERIALIZED_NAME_STATIC_MAB_MODE = "staticMabMode";
  @SerializedName(SERIALIZED_NAME_STATIC_MAB_MODE)
  private String staticMabMode;

  public static final String SERIALIZED_NAME_STATIC_EXPERIMENTATION_FREQUENCY = "staticExperimentationFrequency";
  @SerializedName(SERIALIZED_NAME_STATIC_EXPERIMENTATION_FREQUENCY)
  private Integer staticExperimentationFrequency;

  public static final String SERIALIZED_NAME_STATIC_KEY = "staticKey";
  @SerializedName(SERIALIZED_NAME_STATIC_KEY)
  private String staticKey;

  public static final String SERIALIZED_NAME_STATIC_STATISTICAL_SIGNIFICANCE = "staticStatisticalSignificance";
  @SerializedName(SERIALIZED_NAME_STATIC_STATISTICAL_SIGNIFICANCE)
  private String staticStatisticalSignificance;

  public static final String SERIALIZED_NAME_STATIC_TABLE = "staticTable";
  @SerializedName(SERIALIZED_NAME_STATIC_TABLE)
  private String staticTable;

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<MABVariant> variants;

  public MABStepDetails() {
  }

  public MABStepDetails field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public MABStepDetails fieldKey(String fieldKey) {
    this.fieldKey = fieldKey;
    return this;
  }

   /**
   * Get fieldKey
   * @return fieldKey
  **/
  @javax.annotation.Nullable
  public String getFieldKey() {
    return fieldKey;
  }

  public void setFieldKey(String fieldKey) {
    this.fieldKey = fieldKey;
  }


  public MABStepDetails parameterKey(String parameterKey) {
    this.parameterKey = parameterKey;
    return this;
  }

   /**
   * Get parameterKey
   * @return parameterKey
  **/
  @javax.annotation.Nullable
  public String getParameterKey() {
    return parameterKey;
  }

  public void setParameterKey(String parameterKey) {
    this.parameterKey = parameterKey;
  }


  public MABStepDetails parameterExperimentationFrequency(String parameterExperimentationFrequency) {
    this.parameterExperimentationFrequency = parameterExperimentationFrequency;
    return this;
  }

   /**
   * Get parameterExperimentationFrequency
   * @return parameterExperimentationFrequency
  **/
  @javax.annotation.Nullable
  public String getParameterExperimentationFrequency() {
    return parameterExperimentationFrequency;
  }

  public void setParameterExperimentationFrequency(String parameterExperimentationFrequency) {
    this.parameterExperimentationFrequency = parameterExperimentationFrequency;
  }


  public MABStepDetails parameterMabMode(String parameterMabMode) {
    this.parameterMabMode = parameterMabMode;
    return this;
  }

   /**
   * Get parameterMabMode
   * @return parameterMabMode
  **/
  @javax.annotation.Nullable
  public String getParameterMabMode() {
    return parameterMabMode;
  }

  public void setParameterMabMode(String parameterMabMode) {
    this.parameterMabMode = parameterMabMode;
  }


  public MABStepDetails parameterStatisticalSignificance(String parameterStatisticalSignificance) {
    this.parameterStatisticalSignificance = parameterStatisticalSignificance;
    return this;
  }

   /**
   * Get parameterStatisticalSignificance
   * @return parameterStatisticalSignificance
  **/
  @javax.annotation.Nullable
  public String getParameterStatisticalSignificance() {
    return parameterStatisticalSignificance;
  }

  public void setParameterStatisticalSignificance(String parameterStatisticalSignificance) {
    this.parameterStatisticalSignificance = parameterStatisticalSignificance;
  }


  public MABStepDetails parameterTable(String parameterTable) {
    this.parameterTable = parameterTable;
    return this;
  }

   /**
   * Get parameterTable
   * @return parameterTable
  **/
  @javax.annotation.Nullable
  public String getParameterTable() {
    return parameterTable;
  }

  public void setParameterTable(String parameterTable) {
    this.parameterTable = parameterTable;
  }


  public MABStepDetails reportingFields(Boolean reportingFields) {
    this.reportingFields = reportingFields;
    return this;
  }

   /**
   * Get reportingFields
   * @return reportingFields
  **/
  @javax.annotation.Nullable
  public Boolean getReportingFields() {
    return reportingFields;
  }

  public void setReportingFields(Boolean reportingFields) {
    this.reportingFields = reportingFields;
  }


  public MABStepDetails seed(Integer seed) {
    this.seed = seed;
    return this;
  }

   /**
   * Get seed
   * @return seed
  **/
  @javax.annotation.Nullable
  public Integer getSeed() {
    return seed;
  }

  public void setSeed(Integer seed) {
    this.seed = seed;
  }


  public MABStepDetails staticMabMode(String staticMabMode) {
    this.staticMabMode = staticMabMode;
    return this;
  }

   /**
   * Get staticMabMode
   * @return staticMabMode
  **/
  @javax.annotation.Nullable
  public String getStaticMabMode() {
    return staticMabMode;
  }

  public void setStaticMabMode(String staticMabMode) {
    this.staticMabMode = staticMabMode;
  }


  public MABStepDetails staticExperimentationFrequency(Integer staticExperimentationFrequency) {
    this.staticExperimentationFrequency = staticExperimentationFrequency;
    return this;
  }

   /**
   * Get staticExperimentationFrequency
   * @return staticExperimentationFrequency
  **/
  @javax.annotation.Nullable
  public Integer getStaticExperimentationFrequency() {
    return staticExperimentationFrequency;
  }

  public void setStaticExperimentationFrequency(Integer staticExperimentationFrequency) {
    this.staticExperimentationFrequency = staticExperimentationFrequency;
  }


  public MABStepDetails staticKey(String staticKey) {
    this.staticKey = staticKey;
    return this;
  }

   /**
   * Get staticKey
   * @return staticKey
  **/
  @javax.annotation.Nullable
  public String getStaticKey() {
    return staticKey;
  }

  public void setStaticKey(String staticKey) {
    this.staticKey = staticKey;
  }


  public MABStepDetails staticStatisticalSignificance(String staticStatisticalSignificance) {
    this.staticStatisticalSignificance = staticStatisticalSignificance;
    return this;
  }

   /**
   * Get staticStatisticalSignificance
   * @return staticStatisticalSignificance
  **/
  @javax.annotation.Nullable
  public String getStaticStatisticalSignificance() {
    return staticStatisticalSignificance;
  }

  public void setStaticStatisticalSignificance(String staticStatisticalSignificance) {
    this.staticStatisticalSignificance = staticStatisticalSignificance;
  }


  public MABStepDetails staticTable(String staticTable) {
    this.staticTable = staticTable;
    return this;
  }

   /**
   * Get staticTable
   * @return staticTable
  **/
  @javax.annotation.Nullable
  public String getStaticTable() {
    return staticTable;
  }

  public void setStaticTable(String staticTable) {
    this.staticTable = staticTable;
  }


  public MABStepDetails stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

   /**
   * Get stepName
   * @return stepName
  **/
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public MABStepDetails variants(List<MABVariant> variants) {
    this.variants = variants;
    return this;
  }

  public MABStepDetails addVariantsItem(MABVariant variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

   /**
   * Get variants
   * @return variants
  **/
  @javax.annotation.Nullable
  public List<MABVariant> getVariants() {
    return variants;
  }

  public void setVariants(List<MABVariant> variants) {
    this.variants = variants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MABStepDetails maBStepDetails = (MABStepDetails) o;
    return Objects.equals(this.field, maBStepDetails.field) &&
        Objects.equals(this.fieldKey, maBStepDetails.fieldKey) &&
        Objects.equals(this.parameterKey, maBStepDetails.parameterKey) &&
        Objects.equals(this.parameterExperimentationFrequency, maBStepDetails.parameterExperimentationFrequency) &&
        Objects.equals(this.parameterMabMode, maBStepDetails.parameterMabMode) &&
        Objects.equals(this.parameterStatisticalSignificance, maBStepDetails.parameterStatisticalSignificance) &&
        Objects.equals(this.parameterTable, maBStepDetails.parameterTable) &&
        Objects.equals(this.reportingFields, maBStepDetails.reportingFields) &&
        Objects.equals(this.seed, maBStepDetails.seed) &&
        Objects.equals(this.staticMabMode, maBStepDetails.staticMabMode) &&
        Objects.equals(this.staticExperimentationFrequency, maBStepDetails.staticExperimentationFrequency) &&
        Objects.equals(this.staticKey, maBStepDetails.staticKey) &&
        Objects.equals(this.staticStatisticalSignificance, maBStepDetails.staticStatisticalSignificance) &&
        Objects.equals(this.staticTable, maBStepDetails.staticTable) &&
        Objects.equals(this.stepName, maBStepDetails.stepName) &&
        Objects.equals(this.variants, maBStepDetails.variants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, fieldKey, parameterKey, parameterExperimentationFrequency, parameterMabMode, parameterStatisticalSignificance, parameterTable, reportingFields, seed, staticMabMode, staticExperimentationFrequency, staticKey, staticStatisticalSignificance, staticTable, stepName, variants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MABStepDetails {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    fieldKey: ").append(toIndentedString(fieldKey)).append("\n");
    sb.append("    parameterKey: ").append(toIndentedString(parameterKey)).append("\n");
    sb.append("    parameterExperimentationFrequency: ").append(toIndentedString(parameterExperimentationFrequency)).append("\n");
    sb.append("    parameterMabMode: ").append(toIndentedString(parameterMabMode)).append("\n");
    sb.append("    parameterStatisticalSignificance: ").append(toIndentedString(parameterStatisticalSignificance)).append("\n");
    sb.append("    parameterTable: ").append(toIndentedString(parameterTable)).append("\n");
    sb.append("    reportingFields: ").append(toIndentedString(reportingFields)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    staticMabMode: ").append(toIndentedString(staticMabMode)).append("\n");
    sb.append("    staticExperimentationFrequency: ").append(toIndentedString(staticExperimentationFrequency)).append("\n");
    sb.append("    staticKey: ").append(toIndentedString(staticKey)).append("\n");
    sb.append("    staticStatisticalSignificance: ").append(toIndentedString(staticStatisticalSignificance)).append("\n");
    sb.append("    staticTable: ").append(toIndentedString(staticTable)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field");
    openapiFields.add("fieldKey");
    openapiFields.add("parameterKey");
    openapiFields.add("parameterExperimentationFrequency");
    openapiFields.add("parameterMabMode");
    openapiFields.add("parameterStatisticalSignificance");
    openapiFields.add("parameterTable");
    openapiFields.add("reportingFields");
    openapiFields.add("seed");
    openapiFields.add("staticMabMode");
    openapiFields.add("staticExperimentationFrequency");
    openapiFields.add("staticKey");
    openapiFields.add("staticStatisticalSignificance");
    openapiFields.add("staticTable");
    openapiFields.add("stepName");
    openapiFields.add("variants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MABStepDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MABStepDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MABStepDetails is not found in the empty JSON string", MABStepDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MABStepDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MABStepDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("fieldKey") != null && !jsonObj.get("fieldKey").isJsonNull()) && !jsonObj.get("fieldKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldKey").toString()));
      }
      if ((jsonObj.get("parameterKey") != null && !jsonObj.get("parameterKey").isJsonNull()) && !jsonObj.get("parameterKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterKey").toString()));
      }
      if ((jsonObj.get("parameterExperimentationFrequency") != null && !jsonObj.get("parameterExperimentationFrequency").isJsonNull()) && !jsonObj.get("parameterExperimentationFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterExperimentationFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterExperimentationFrequency").toString()));
      }
      if ((jsonObj.get("parameterMabMode") != null && !jsonObj.get("parameterMabMode").isJsonNull()) && !jsonObj.get("parameterMabMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterMabMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterMabMode").toString()));
      }
      if ((jsonObj.get("parameterStatisticalSignificance") != null && !jsonObj.get("parameterStatisticalSignificance").isJsonNull()) && !jsonObj.get("parameterStatisticalSignificance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterStatisticalSignificance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterStatisticalSignificance").toString()));
      }
      if ((jsonObj.get("parameterTable") != null && !jsonObj.get("parameterTable").isJsonNull()) && !jsonObj.get("parameterTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterTable").toString()));
      }
      if ((jsonObj.get("staticMabMode") != null && !jsonObj.get("staticMabMode").isJsonNull()) && !jsonObj.get("staticMabMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticMabMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticMabMode").toString()));
      }
      if ((jsonObj.get("staticKey") != null && !jsonObj.get("staticKey").isJsonNull()) && !jsonObj.get("staticKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticKey").toString()));
      }
      if ((jsonObj.get("staticStatisticalSignificance") != null && !jsonObj.get("staticStatisticalSignificance").isJsonNull()) && !jsonObj.get("staticStatisticalSignificance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticStatisticalSignificance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticStatisticalSignificance").toString()));
      }
      if ((jsonObj.get("staticTable") != null && !jsonObj.get("staticTable").isJsonNull()) && !jsonObj.get("staticTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticTable").toString()));
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull() && !jsonObj.get("variants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MABStepDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MABStepDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MABStepDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MABStepDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<MABStepDetails>() {
           @Override
           public void write(JsonWriter out, MABStepDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MABStepDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MABStepDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MABStepDetails
  * @throws IOException if the JSON string is invalid with respect to MABStepDetails
  */
  public static MABStepDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MABStepDetails.class);
  }

 /**
  * Convert an instance of MABStepDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

