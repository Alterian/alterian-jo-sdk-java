/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.KettleFieldType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * JsonDecoderField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class JsonDecoderField {
  public static final String SERIALIZED_NAME_OUTPUT_NAME = "outputName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_NAME)
  private String outputName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private KettleFieldType type;

  /**
   * Gets or Sets required
   */
  @JsonAdapter(RequiredEnum.Adapter.class)
  public enum RequiredEnum {
    ALLOWED("Allowed"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    RequiredEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiredEnum fromValue(String value) {
      for (RequiredEnum b : RequiredEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<RequiredEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiredEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiredEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequiredEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequiredEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private RequiredEnum required;

  public JsonDecoderField() {
  }

  public JsonDecoderField outputName(String outputName) {
    this.outputName = outputName;
    return this;
  }

   /**
   * Get outputName
   * @return outputName
  **/
  @javax.annotation.Nullable
  public String getOutputName() {
    return outputName;
  }

  public void setOutputName(String outputName) {
    this.outputName = outputName;
  }


  public JsonDecoderField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public JsonDecoderField type(KettleFieldType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public KettleFieldType getType() {
    return type;
  }

  public void setType(KettleFieldType type) {
    this.type = type;
  }


  public JsonDecoderField required(RequiredEnum required) {
    this.required = required;
    return this;
  }

   /**
   * Get required
   * @return required
  **/
  @javax.annotation.Nullable
  public RequiredEnum getRequired() {
    return required;
  }

  public void setRequired(RequiredEnum required) {
    this.required = required;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonDecoderField jsonDecoderField = (JsonDecoderField) o;
    return Objects.equals(this.outputName, jsonDecoderField.outputName) &&
        Objects.equals(this.name, jsonDecoderField.name) &&
        Objects.equals(this.type, jsonDecoderField.type) &&
        Objects.equals(this.required, jsonDecoderField.required);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputName, name, type, required);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonDecoderField {\n");
    sb.append("    outputName: ").append(toIndentedString(outputName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("outputName");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to JsonDecoderField
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonDecoderField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonDecoderField is not found in the empty JSON string", JsonDecoderField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonDecoderField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonDecoderField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("outputName") != null && !jsonObj.get("outputName").isJsonNull()) && !jsonObj.get("outputName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        KettleFieldType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("required") != null && !jsonObj.get("required").isJsonNull()) && !jsonObj.get("required").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `required` to be a primitive type in the JSON string but got `%s`", jsonObj.get("required").toString()));
      }
      // validate the optional field `required`
      if (jsonObj.get("required") != null && !jsonObj.get("required").isJsonNull()) {
        RequiredEnum.validateJsonElement(jsonObj.get("required"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonDecoderField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonDecoderField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonDecoderField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonDecoderField.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonDecoderField>() {
           @Override
           public void write(JsonWriter out, JsonDecoderField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonDecoderField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JsonDecoderField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JsonDecoderField
  * @throws IOException if the JSON string is invalid with respect to JsonDecoderField
  */
  public static JsonDecoderField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonDecoderField.class);
  }

 /**
  * Convert an instance of JsonDecoderField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

