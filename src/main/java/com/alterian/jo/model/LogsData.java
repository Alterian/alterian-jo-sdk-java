/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.model;

import java.util.Objects;
import com.alterian.jo.model.LogLevelEnum;
import com.alterian.jo.model.LogsDataAgent;
import com.alterian.jo.model.LogsDataEcs;
import com.alterian.jo.model.LogsDataEvent;
import com.alterian.jo.model.LogsDataFields;
import com.alterian.jo.model.LogsDataHost;
import com.alterian.jo.model.LogsDataInput;
import com.alterian.jo.model.LogsDataLog;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.jo.JSON;

/**
 * LogsData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class LogsData {
  public static final String SERIALIZED_NAME_AT_TIMESTAMP = "@timestamp";
  @SerializedName(SERIALIZED_NAME_AT_TIMESTAMP)
  private String atTimestamp;

  public static final String SERIALIZED_NAME_AT_VERSION = "@version";
  @SerializedName(SERIALIZED_NAME_AT_VERSION)
  private String atVersion;

  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private LogsDataAgent agent;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_ECS = "ecs";
  @SerializedName(SERIALIZED_NAME_ECS)
  private LogsDataEcs ecs;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private LogsDataEvent event;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private LogsDataFields fields;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private LogsDataHost host;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private String info;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private LogsDataInput input;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  public static final String SERIALIZED_NAME_LOG = "log";
  @SerializedName(SERIALIZED_NAME_LOG)
  private LogsDataLog log;

  public static final String SERIALIZED_NAME_LOG_TYPE = "log_type";
  @SerializedName(SERIALIZED_NAME_LOG_TYPE)
  private String logType;

  public static final String SERIALIZED_NAME_LOGLEVEL = "loglevel";
  @SerializedName(SERIALIZED_NAME_LOGLEVEL)
  private LogLevelEnum loglevel;

  public static final String SERIALIZED_NAME_MSG = "msg";
  @SerializedName(SERIALIZED_NAME_MSG)
  private String msg;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private String node;

  public static final String SERIALIZED_NAME_NODE_NAME = "nodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_NODE_DESC = "node_desc";
  @SerializedName(SERIALIZED_NAME_NODE_DESC)
  private String nodeDesc;

  public static final String SERIALIZED_NAME_RESTART_SEQUENCE = "restartSequence";
  @SerializedName(SERIALIZED_NAME_RESTART_SEQUENCE)
  private String restartSequence;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_RULE_LOG_ENTRY = "rule_log_entry";
  @SerializedName(SERIALIZED_NAME_RULE_LOG_ENTRY)
  private String ruleLogEntry;

  public static final String SERIALIZED_NAME_SEQ = "seq";
  @SerializedName(SERIALIZED_NAME_SEQ)
  private String seq;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private String step;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TEMPLATE_URL = "templateUrl";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_URL)
  private String templateUrl;

  public static final String SERIALIZED_NAME_TILE_ID = "tileId";
  @SerializedName(SERIALIZED_NAME_TILE_ID)
  private String tileId;

  public static final String SERIALIZED_NAME_TILE_NAME = "tileName";
  @SerializedName(SERIALIZED_NAME_TILE_NAME)
  private String tileName;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public LogsData() {
  }

  public LogsData atTimestamp(String atTimestamp) {
    this.atTimestamp = atTimestamp;
    return this;
  }

   /**
   * Get atTimestamp
   * @return atTimestamp
  **/
  @javax.annotation.Nullable
  public String getAtTimestamp() {
    return atTimestamp;
  }

  public void setAtTimestamp(String atTimestamp) {
    this.atTimestamp = atTimestamp;
  }


  public LogsData atVersion(String atVersion) {
    this.atVersion = atVersion;
    return this;
  }

   /**
   * Get atVersion
   * @return atVersion
  **/
  @javax.annotation.Nullable
  public String getAtVersion() {
    return atVersion;
  }

  public void setAtVersion(String atVersion) {
    this.atVersion = atVersion;
  }


  public LogsData agent(LogsDataAgent agent) {
    this.agent = agent;
    return this;
  }

   /**
   * Get agent
   * @return agent
  **/
  @javax.annotation.Nullable
  public LogsDataAgent getAgent() {
    return agent;
  }

  public void setAgent(LogsDataAgent agent) {
    this.agent = agent;
  }


  public LogsData client(String client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public LogsData ecs(LogsDataEcs ecs) {
    this.ecs = ecs;
    return this;
  }

   /**
   * Get ecs
   * @return ecs
  **/
  @javax.annotation.Nullable
  public LogsDataEcs getEcs() {
    return ecs;
  }

  public void setEcs(LogsDataEcs ecs) {
    this.ecs = ecs;
  }


  public LogsData event(LogsDataEvent event) {
    this.event = event;
    return this;
  }

   /**
   * Get event
   * @return event
  **/
  @javax.annotation.Nullable
  public LogsDataEvent getEvent() {
    return event;
  }

  public void setEvent(LogsDataEvent event) {
    this.event = event;
  }


  public LogsData fields(LogsDataFields fields) {
    this.fields = fields;
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nullable
  public LogsDataFields getFields() {
    return fields;
  }

  public void setFields(LogsDataFields fields) {
    this.fields = fields;
  }


  public LogsData host(LogsDataHost host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nullable
  public LogsDataHost getHost() {
    return host;
  }

  public void setHost(LogsDataHost host) {
    this.host = host;
  }


  public LogsData info(String info) {
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @javax.annotation.Nullable
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }


  public LogsData input(LogsDataInput input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @javax.annotation.Nullable
  public LogsDataInput getInput() {
    return input;
  }

  public void setInput(LogsDataInput input) {
    this.input = input;
  }


  public LogsData level(String level) {
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }


  public LogsData log(LogsDataLog log) {
    this.log = log;
    return this;
  }

   /**
   * Get log
   * @return log
  **/
  @javax.annotation.Nullable
  public LogsDataLog getLog() {
    return log;
  }

  public void setLog(LogsDataLog log) {
    this.log = log;
  }


  public LogsData logType(String logType) {
    this.logType = logType;
    return this;
  }

   /**
   * Get logType
   * @return logType
  **/
  @javax.annotation.Nullable
  public String getLogType() {
    return logType;
  }

  public void setLogType(String logType) {
    this.logType = logType;
  }


  public LogsData loglevel(LogLevelEnum loglevel) {
    this.loglevel = loglevel;
    return this;
  }

   /**
   * Get loglevel
   * @return loglevel
  **/
  @javax.annotation.Nullable
  public LogLevelEnum getLoglevel() {
    return loglevel;
  }

  public void setLoglevel(LogLevelEnum loglevel) {
    this.loglevel = loglevel;
  }


  public LogsData msg(String msg) {
    this.msg = msg;
    return this;
  }

   /**
   * Get msg
   * @return msg
  **/
  @javax.annotation.Nullable
  public String getMsg() {
    return msg;
  }

  public void setMsg(String msg) {
    this.msg = msg;
  }


  public LogsData node(String node) {
    this.node = node;
    return this;
  }

   /**
   * Get node
   * @return node
  **/
  @javax.annotation.Nullable
  public String getNode() {
    return node;
  }

  public void setNode(String node) {
    this.node = node;
  }


  public LogsData nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Get nodeName
   * @return nodeName
  **/
  @javax.annotation.Nullable
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }


  public LogsData nodeDesc(String nodeDesc) {
    this.nodeDesc = nodeDesc;
    return this;
  }

   /**
   * Get nodeDesc
   * @return nodeDesc
  **/
  @javax.annotation.Nullable
  public String getNodeDesc() {
    return nodeDesc;
  }

  public void setNodeDesc(String nodeDesc) {
    this.nodeDesc = nodeDesc;
  }


  public LogsData restartSequence(String restartSequence) {
    this.restartSequence = restartSequence;
    return this;
  }

   /**
   * Get restartSequence
   * @return restartSequence
  **/
  @javax.annotation.Nullable
  public String getRestartSequence() {
    return restartSequence;
  }

  public void setRestartSequence(String restartSequence) {
    this.restartSequence = restartSequence;
  }


  public LogsData rule(String rule) {
    this.rule = rule;
    return this;
  }

   /**
   * Get rule
   * @return rule
  **/
  @javax.annotation.Nullable
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }


  public LogsData ruleLogEntry(String ruleLogEntry) {
    this.ruleLogEntry = ruleLogEntry;
    return this;
  }

   /**
   * Get ruleLogEntry
   * @return ruleLogEntry
  **/
  @javax.annotation.Nullable
  public String getRuleLogEntry() {
    return ruleLogEntry;
  }

  public void setRuleLogEntry(String ruleLogEntry) {
    this.ruleLogEntry = ruleLogEntry;
  }


  public LogsData seq(String seq) {
    this.seq = seq;
    return this;
  }

   /**
   * Get seq
   * @return seq
  **/
  @javax.annotation.Nullable
  public String getSeq() {
    return seq;
  }

  public void setSeq(String seq) {
    this.seq = seq;
  }


  public LogsData step(String step) {
    this.step = step;
    return this;
  }

   /**
   * Get step
   * @return step
  **/
  @javax.annotation.Nullable
  public String getStep() {
    return step;
  }

  public void setStep(String step) {
    this.step = step;
  }


  public LogsData tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public LogsData addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public LogsData target(String target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public LogsData templateUrl(String templateUrl) {
    this.templateUrl = templateUrl;
    return this;
  }

   /**
   * Get templateUrl
   * @return templateUrl
  **/
  @javax.annotation.Nullable
  public String getTemplateUrl() {
    return templateUrl;
  }

  public void setTemplateUrl(String templateUrl) {
    this.templateUrl = templateUrl;
  }


  public LogsData tileId(String tileId) {
    this.tileId = tileId;
    return this;
  }

   /**
   * Get tileId
   * @return tileId
  **/
  @javax.annotation.Nullable
  public String getTileId() {
    return tileId;
  }

  public void setTileId(String tileId) {
    this.tileId = tileId;
  }


  public LogsData tileName(String tileName) {
    this.tileName = tileName;
    return this;
  }

   /**
   * Get tileName
   * @return tileName
  **/
  @javax.annotation.Nullable
  public String getTileName() {
    return tileName;
  }

  public void setTileName(String tileName) {
    this.tileName = tileName;
  }


  public LogsData timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public LogsData version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LogsData instance itself
   */
  public LogsData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogsData logsData = (LogsData) o;
    return Objects.equals(this.atTimestamp, logsData.atTimestamp) &&
        Objects.equals(this.atVersion, logsData.atVersion) &&
        Objects.equals(this.agent, logsData.agent) &&
        Objects.equals(this.client, logsData.client) &&
        Objects.equals(this.ecs, logsData.ecs) &&
        Objects.equals(this.event, logsData.event) &&
        Objects.equals(this.fields, logsData.fields) &&
        Objects.equals(this.host, logsData.host) &&
        Objects.equals(this.info, logsData.info) &&
        Objects.equals(this.input, logsData.input) &&
        Objects.equals(this.level, logsData.level) &&
        Objects.equals(this.log, logsData.log) &&
        Objects.equals(this.logType, logsData.logType) &&
        Objects.equals(this.loglevel, logsData.loglevel) &&
        Objects.equals(this.msg, logsData.msg) &&
        Objects.equals(this.node, logsData.node) &&
        Objects.equals(this.nodeName, logsData.nodeName) &&
        Objects.equals(this.nodeDesc, logsData.nodeDesc) &&
        Objects.equals(this.restartSequence, logsData.restartSequence) &&
        Objects.equals(this.rule, logsData.rule) &&
        Objects.equals(this.ruleLogEntry, logsData.ruleLogEntry) &&
        Objects.equals(this.seq, logsData.seq) &&
        Objects.equals(this.step, logsData.step) &&
        Objects.equals(this.tags, logsData.tags) &&
        Objects.equals(this.target, logsData.target) &&
        Objects.equals(this.templateUrl, logsData.templateUrl) &&
        Objects.equals(this.tileId, logsData.tileId) &&
        Objects.equals(this.tileName, logsData.tileName) &&
        Objects.equals(this.timestamp, logsData.timestamp) &&
        Objects.equals(this.version, logsData.version)&&
        Objects.equals(this.additionalProperties, logsData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atTimestamp, atVersion, agent, client, ecs, event, fields, host, info, input, level, log, logType, loglevel, msg, node, nodeName, nodeDesc, restartSequence, rule, ruleLogEntry, seq, step, tags, target, templateUrl, tileId, tileName, timestamp, version, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogsData {\n");
    sb.append("    atTimestamp: ").append(toIndentedString(atTimestamp)).append("\n");
    sb.append("    atVersion: ").append(toIndentedString(atVersion)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    ecs: ").append(toIndentedString(ecs)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    loglevel: ").append(toIndentedString(loglevel)).append("\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    nodeDesc: ").append(toIndentedString(nodeDesc)).append("\n");
    sb.append("    restartSequence: ").append(toIndentedString(restartSequence)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    ruleLogEntry: ").append(toIndentedString(ruleLogEntry)).append("\n");
    sb.append("    seq: ").append(toIndentedString(seq)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    templateUrl: ").append(toIndentedString(templateUrl)).append("\n");
    sb.append("    tileId: ").append(toIndentedString(tileId)).append("\n");
    sb.append("    tileName: ").append(toIndentedString(tileName)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@timestamp");
    openapiFields.add("@version");
    openapiFields.add("agent");
    openapiFields.add("client");
    openapiFields.add("ecs");
    openapiFields.add("event");
    openapiFields.add("fields");
    openapiFields.add("host");
    openapiFields.add("info");
    openapiFields.add("input");
    openapiFields.add("level");
    openapiFields.add("log");
    openapiFields.add("log_type");
    openapiFields.add("loglevel");
    openapiFields.add("msg");
    openapiFields.add("node");
    openapiFields.add("nodeName");
    openapiFields.add("node_desc");
    openapiFields.add("restartSequence");
    openapiFields.add("rule");
    openapiFields.add("rule_log_entry");
    openapiFields.add("seq");
    openapiFields.add("step");
    openapiFields.add("tags");
    openapiFields.add("target");
    openapiFields.add("templateUrl");
    openapiFields.add("tileId");
    openapiFields.add("tileName");
    openapiFields.add("timestamp");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LogsData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogsData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogsData is not found in the empty JSON string", LogsData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("@timestamp") != null && !jsonObj.get("@timestamp").isJsonNull()) && !jsonObj.get("@timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@timestamp").toString()));
      }
      if ((jsonObj.get("@version") != null && !jsonObj.get("@version").isJsonNull()) && !jsonObj.get("@version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@version").toString()));
      }
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      if ((jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) && !jsonObj.get("info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if ((jsonObj.get("log_type") != null && !jsonObj.get("log_type").isJsonNull()) && !jsonObj.get("log_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_type").toString()));
      }
      // validate the optional field `loglevel`
      if (jsonObj.get("loglevel") != null && !jsonObj.get("loglevel").isJsonNull()) {
        LogLevelEnum.validateJsonElement(jsonObj.get("loglevel"));
      }
      if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg").toString()));
      }
      if ((jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) && !jsonObj.get("node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node").toString()));
      }
      if ((jsonObj.get("nodeName") != null && !jsonObj.get("nodeName").isJsonNull()) && !jsonObj.get("nodeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeName").toString()));
      }
      if ((jsonObj.get("node_desc") != null && !jsonObj.get("node_desc").isJsonNull()) && !jsonObj.get("node_desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_desc").toString()));
      }
      if ((jsonObj.get("restartSequence") != null && !jsonObj.get("restartSequence").isJsonNull()) && !jsonObj.get("restartSequence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restartSequence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restartSequence").toString()));
      }
      if ((jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      if ((jsonObj.get("rule_log_entry") != null && !jsonObj.get("rule_log_entry").isJsonNull()) && !jsonObj.get("rule_log_entry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_log_entry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_log_entry").toString()));
      }
      if ((jsonObj.get("seq") != null && !jsonObj.get("seq").isJsonNull()) && !jsonObj.get("seq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seq").toString()));
      }
      if ((jsonObj.get("step") != null && !jsonObj.get("step").isJsonNull()) && !jsonObj.get("step").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `step` to be a primitive type in the JSON string but got `%s`", jsonObj.get("step").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("templateUrl") != null && !jsonObj.get("templateUrl").isJsonNull()) && !jsonObj.get("templateUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateUrl").toString()));
      }
      if ((jsonObj.get("tileId") != null && !jsonObj.get("tileId").isJsonNull()) && !jsonObj.get("tileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tileId").toString()));
      }
      if ((jsonObj.get("tileName") != null && !jsonObj.get("tileName").isJsonNull()) && !jsonObj.get("tileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tileName").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogsData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogsData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogsData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogsData.class));

       return (TypeAdapter<T>) new TypeAdapter<LogsData>() {
           @Override
           public void write(JsonWriter out, LogsData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LogsData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             LogsData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LogsData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LogsData
  * @throws IOException if the JSON string is invalid with respect to LogsData
  */
  public static LogsData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogsData.class);
  }

 /**
  * Convert an instance of LogsData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

