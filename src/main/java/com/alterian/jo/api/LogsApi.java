/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.jo.model.LogSource;
import com.alterian.jo.model.LogType;
import com.alterian.jo.model.LogTypeOrTimeseries;
import com.alterian.jo.model.LogsApiResponse;
import java.time.OffsetDateTime;
import com.alterian.jo.model.TargetEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for logsTypeTargetClientGet
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchPhrase The phrase to search for in the logs (required)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsTypeTargetClientGetCall(LogType type, TargetEnum target, String client, String searchPhrase, String sequenceNumber, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{type}/{target}/{client}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchPhrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPhrase", searchPhrase));
        }

        if (sequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequenceNumber", sequenceNumber));
        }

        if (templateUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateUrl", templateUrl));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (csv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("csv", csv));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsTypeTargetClientGetValidateBeforeCall(LogType type, TargetEnum target, String client, String searchPhrase, String sequenceNumber, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling logsTypeTargetClientGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling logsTypeTargetClientGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling logsTypeTargetClientGet(Async)");
        }

        // verify the required parameter 'searchPhrase' is set
        if (searchPhrase == null) {
            throw new ApiException("Missing the required parameter 'searchPhrase' when calling logsTypeTargetClientGet(Async)");
        }

        return logsTypeTargetClientGetCall(type, target, client, searchPhrase, sequenceNumber, templateUrl, limit, source, csv, startdate, enddate, _callback);

    }

    /**
     * Search across logs for this client and target
     * Provide a search string to search for
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchPhrase The phrase to search for in the logs (required)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @return LogsApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LogsApiResponse logsTypeTargetClientGet(LogType type, TargetEnum target, String client, String searchPhrase, String sequenceNumber, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        ApiResponse<LogsApiResponse> localVarResp = logsTypeTargetClientGetWithHttpInfo(type, target, client, searchPhrase, sequenceNumber, templateUrl, limit, source, csv, startdate, enddate);
        return localVarResp.getData();
    }

    /**
     * Search across logs for this client and target
     * Provide a search string to search for
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchPhrase The phrase to search for in the logs (required)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @return ApiResponse&lt;LogsApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogsApiResponse> logsTypeTargetClientGetWithHttpInfo(LogType type, TargetEnum target, String client, String searchPhrase, String sequenceNumber, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = logsTypeTargetClientGetValidateBeforeCall(type, target, client, searchPhrase, sequenceNumber, templateUrl, limit, source, csv, startdate, enddate, null);
        Type localVarReturnType = new TypeToken<LogsApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search across logs for this client and target (asynchronously)
     * Provide a search string to search for
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchPhrase The phrase to search for in the logs (required)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsTypeTargetClientGetAsync(LogType type, TargetEnum target, String client, String searchPhrase, String sequenceNumber, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<LogsApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsTypeTargetClientGetValidateBeforeCall(type, target, client, searchPhrase, sequenceNumber, templateUrl, limit, source, csv, startdate, enddate, _callback);
        Type localVarReturnType = new TypeToken<LogsApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsTypeTargetClientRulenameGet
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param searchPhrase The phrase to search for in the logs (optional)
     * @param searchQuery Lucene query string to apply (optional)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param tileName The name of the tile, if you want to filter your request by tile name (optional)
     * @param tileId The id of the tile, if you want to filter your request by tile id (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsTypeTargetClientRulenameGetCall(LogTypeOrTimeseries type, TargetEnum target, String client, String rulename, String searchPhrase, String searchQuery, String sequenceNumber, String tileName, String tileId, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{type}/{target}/{client}/{rulename}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchPhrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPhrase", searchPhrase));
        }

        if (searchQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchQuery", searchQuery));
        }

        if (sequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequenceNumber", sequenceNumber));
        }

        if (tileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tileName", tileName));
        }

        if (tileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tileId", tileId));
        }

        if (templateUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateUrl", templateUrl));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (csv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("csv", csv));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsTypeTargetClientRulenameGetValidateBeforeCall(LogTypeOrTimeseries type, TargetEnum target, String client, String rulename, String searchPhrase, String searchQuery, String sequenceNumber, String tileName, String tileId, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling logsTypeTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling logsTypeTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling logsTypeTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling logsTypeTargetClientRulenameGet(Async)");
        }

        return logsTypeTargetClientRulenameGetCall(type, target, client, rulename, searchPhrase, searchQuery, sequenceNumber, tileName, tileId, templateUrl, limit, source, csv, startdate, enddate, _callback);

    }

    /**
     * Get logs that have been recorded for this rule
     * If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param searchPhrase The phrase to search for in the logs (optional)
     * @param searchQuery Lucene query string to apply (optional)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param tileName The name of the tile, if you want to filter your request by tile name (optional)
     * @param tileId The id of the tile, if you want to filter your request by tile id (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @return LogsApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LogsApiResponse logsTypeTargetClientRulenameGet(LogTypeOrTimeseries type, TargetEnum target, String client, String rulename, String searchPhrase, String searchQuery, String sequenceNumber, String tileName, String tileId, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        ApiResponse<LogsApiResponse> localVarResp = logsTypeTargetClientRulenameGetWithHttpInfo(type, target, client, rulename, searchPhrase, searchQuery, sequenceNumber, tileName, tileId, templateUrl, limit, source, csv, startdate, enddate);
        return localVarResp.getData();
    }

    /**
     * Get logs that have been recorded for this rule
     * If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param searchPhrase The phrase to search for in the logs (optional)
     * @param searchQuery Lucene query string to apply (optional)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param tileName The name of the tile, if you want to filter your request by tile name (optional)
     * @param tileId The id of the tile, if you want to filter your request by tile id (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @return ApiResponse&lt;LogsApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogsApiResponse> logsTypeTargetClientRulenameGetWithHttpInfo(LogTypeOrTimeseries type, TargetEnum target, String client, String rulename, String searchPhrase, String searchQuery, String sequenceNumber, String tileName, String tileId, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = logsTypeTargetClientRulenameGetValidateBeforeCall(type, target, client, rulename, searchPhrase, searchQuery, sequenceNumber, tileName, tileId, templateUrl, limit, source, csv, startdate, enddate, null);
        Type localVarReturnType = new TypeToken<LogsApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get logs that have been recorded for this rule (asynchronously)
     * If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
     * @param type What kind of logging do you want to see? (required)
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param searchPhrase The phrase to search for in the logs (optional)
     * @param searchQuery Lucene query string to apply (optional)
     * @param sequenceNumber Sequence Number to identify rule invoke logs (optional)
     * @param tileName The name of the tile, if you want to filter your request by tile name (optional)
     * @param tileId The id of the tile, if you want to filter your request by tile id (optional)
     * @param templateUrl Template url, if you want to filter your request by template url (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param source Pick the source of the logs. Currently only elastic search is supported (optional)
     * @param csv if true then returns csv file (optional)
     * @param startdate If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param enddate If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsTypeTargetClientRulenameGetAsync(LogTypeOrTimeseries type, TargetEnum target, String client, String rulename, String searchPhrase, String searchQuery, String sequenceNumber, String tileName, String tileId, String templateUrl, Integer limit, LogSource source, Boolean csv, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<LogsApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsTypeTargetClientRulenameGetValidateBeforeCall(type, target, client, rulename, searchPhrase, searchQuery, sequenceNumber, tileName, tileId, templateUrl, limit, source, csv, startdate, enddate, _callback);
        Type localVarReturnType = new TypeToken<LogsApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
