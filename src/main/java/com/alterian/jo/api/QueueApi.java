/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.jo.model.AckMessage;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.TargetEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueueApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueueApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueueApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queueClientDelete
     * @param client Client name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientDeleteCall(String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientDeleteValidateBeforeCall(String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientDelete(Async)");
        }

        return queueClientDeleteCall(client, _callback);

    }

    /**
     * Delete all queues that this client owns.
     * Delete all queues that this client owns, across all targets.
     * @param client Client name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientDelete(String client) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientDeleteWithHttpInfo(client);
        return localVarResp.getData();
    }

    /**
     * Delete all queues that this client owns.
     * Delete all queues that this client owns, across all targets.
     * @param client Client name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientDeleteWithHttpInfo(String client) throws ApiException {
        okhttp3.Call localVarCall = queueClientDeleteValidateBeforeCall(client, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all queues that this client owns. (asynchronously)
     * Delete all queues that this client owns, across all targets.
     * @param client Client name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientDeleteAsync(String client, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientDeleteValidateBeforeCall(client, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientGet
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientGetCall(String client, Integer from, Integer to, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientGetValidateBeforeCall(String client, Integer from, Integer to, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientGet(Async)");
        }

        return queueClientGetCall(client, from, to, includeStatistics, _callback);

    }

    /**
     * Get all of the queues for a specific client, across all targets.
     * Find the full details of all queues that this client owns, across all targets
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientGet(String client, Integer from, Integer to, Boolean includeStatistics) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientGetWithHttpInfo(client, from, to, includeStatistics);
        return localVarResp.getData();
    }

    /**
     * Get all of the queues for a specific client, across all targets.
     * Find the full details of all queues that this client owns, across all targets
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientGetWithHttpInfo(String client, Integer from, Integer to, Boolean includeStatistics) throws ApiException {
        okhttp3.Call localVarCall = queueClientGetValidateBeforeCall(client, from, to, includeStatistics, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all of the queues for a specific client, across all targets. (asynchronously)
     * Find the full details of all queues that this client owns, across all targets
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientGetAsync(String client, Integer from, Integer to, Boolean includeStatistics, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientGetValidateBeforeCall(client, from, to, includeStatistics, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetDelete
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetDeleteCall(String client, TargetEnum target, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetDeleteValidateBeforeCall(String client, TargetEnum target, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetDelete(Async)");
        }

        return queueClientTargetDeleteCall(client, target, _callback);

    }

    /**
     * Delete all of the queues within a specific target for the given client
     * Delete all of the queues within a specific target for the given client
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetDelete(String client, TargetEnum target) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetDeleteWithHttpInfo(client, target);
        return localVarResp.getData();
    }

    /**
     * Delete all of the queues within a specific target for the given client
     * Delete all of the queues within a specific target for the given client
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetDeleteWithHttpInfo(String client, TargetEnum target) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetDeleteValidateBeforeCall(client, target, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all of the queues within a specific target for the given client (asynchronously)
     * Delete all of the queues within a specific target for the given client
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetDeleteAsync(String client, TargetEnum target, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetDeleteValidateBeforeCall(client, target, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetGetCall(String client, TargetEnum target, Integer from, Integer to, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetGetValidateBeforeCall(String client, TargetEnum target, Integer from, Integer to, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetGet(Async)");
        }

        return queueClientTargetGetCall(client, target, from, to, includeStatistics, _callback);

    }

    /**
     * Get details about all of the queues within a specific target for this client.
     * Get details about all of the queues within a specific target for this client.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetGet(String client, TargetEnum target, Integer from, Integer to, Boolean includeStatistics) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetGetWithHttpInfo(client, target, from, to, includeStatistics);
        return localVarResp.getData();
    }

    /**
     * Get details about all of the queues within a specific target for this client.
     * Get details about all of the queues within a specific target for this client.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetGetWithHttpInfo(String client, TargetEnum target, Integer from, Integer to, Boolean includeStatistics) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetGetValidateBeforeCall(client, target, from, to, includeStatistics, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all of the queues within a specific target for this client. (asynchronously)
     * Get details about all of the queues within a specific target for this client.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetGetAsync(String client, TargetEnum target, Integer from, Integer to, Boolean includeStatistics, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetGetValidateBeforeCall(client, target, from, to, includeStatistics, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNameAckPost
     * @param client The client name for the queue (required)
     * @param target The target in which the queue is located (required)
     * @param queueName The name of queue which contains the message you want to acknowledge (required)
     * @param ackMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameAckPostCall(String client, TargetEnum target, String queueName, List<AckMessage> ackMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ackMessage;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}/ack"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNameAckPostValidateBeforeCall(String client, TargetEnum target, String queueName, List<AckMessage> ackMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNameAckPost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNameAckPost(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNameAckPost(Async)");
        }

        return queueClientTargetQueueNameAckPostCall(client, target, queueName, ackMessage, _callback);

    }

    /**
     * Remove a set of messages from a given queue.
     * If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
     * @param client The client name for the queue (required)
     * @param target The target in which the queue is located (required)
     * @param queueName The name of queue which contains the message you want to acknowledge (required)
     * @param ackMessage  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNameAckPost(String client, TargetEnum target, String queueName, List<AckMessage> ackMessage) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNameAckPostWithHttpInfo(client, target, queueName, ackMessage);
        return localVarResp.getData();
    }

    /**
     * Remove a set of messages from a given queue.
     * If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
     * @param client The client name for the queue (required)
     * @param target The target in which the queue is located (required)
     * @param queueName The name of queue which contains the message you want to acknowledge (required)
     * @param ackMessage  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNameAckPostWithHttpInfo(String client, TargetEnum target, String queueName, List<AckMessage> ackMessage) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNameAckPostValidateBeforeCall(client, target, queueName, ackMessage, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a set of messages from a given queue. (asynchronously)
     * If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
     * @param client The client name for the queue (required)
     * @param target The target in which the queue is located (required)
     * @param queueName The name of queue which contains the message you want to acknowledge (required)
     * @param ackMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameAckPostAsync(String client, TargetEnum target, String queueName, List<AckMessage> ackMessage, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNameAckPostValidateBeforeCall(client, target, queueName, ackMessage, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNameDelete
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of the queue that should be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameDeleteCall(String client, TargetEnum target, String queueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNameDeleteValidateBeforeCall(String client, TargetEnum target, String queueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNameDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNameDelete(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNameDelete(Async)");
        }

        return queueClientTargetQueueNameDeleteCall(client, target, queueName, _callback);

    }

    /**
     * Delete a specific named queue
     * Delete a queue and all the messages within it
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of the queue that should be deleted. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNameDelete(String client, TargetEnum target, String queueName) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNameDeleteWithHttpInfo(client, target, queueName);
        return localVarResp.getData();
    }

    /**
     * Delete a specific named queue
     * Delete a queue and all the messages within it
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of the queue that should be deleted. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNameDeleteWithHttpInfo(String client, TargetEnum target, String queueName) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNameDeleteValidateBeforeCall(client, target, queueName, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a specific named queue (asynchronously)
     * Delete a queue and all the messages within it
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of the queue that should be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameDeleteAsync(String client, TargetEnum target, String queueName, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNameDeleteValidateBeforeCall(client, target, queueName, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNameGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of queue that you want to get the information for. (required)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameGetCall(String client, TargetEnum target, String queueName, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNameGetValidateBeforeCall(String client, TargetEnum target, String queueName, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNameGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNameGet(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNameGet(Async)");
        }

        return queueClientTargetQueueNameGetCall(client, target, queueName, includeStatistics, _callback);

    }

    /**
     * Gets information about a specific named queue.
     * Information returned is filtered by user permissions.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of queue that you want to get the information for. (required)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNameGet(String client, TargetEnum target, String queueName, Boolean includeStatistics) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNameGetWithHttpInfo(client, target, queueName, includeStatistics);
        return localVarResp.getData();
    }

    /**
     * Gets information about a specific named queue.
     * Information returned is filtered by user permissions.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of queue that you want to get the information for. (required)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNameGetWithHttpInfo(String client, TargetEnum target, String queueName, Boolean includeStatistics) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNameGetValidateBeforeCall(client, target, queueName, includeStatistics, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a specific named queue. (asynchronously)
     * Information returned is filtered by user permissions.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param queueName The name of queue that you want to get the information for. (required)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameGetAsync(String client, TargetEnum target, String queueName, Boolean includeStatistics, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNameGetValidateBeforeCall(client, target, queueName, includeStatistics, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNameMessagesGet
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue to read messages from (required)
     * @param numberOfMessages The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)
     * @param maxWaitTimeInSeconds If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)
     * @param deleteAfterRead Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)
     * @param lock If the queue is locked, you must provide the key in this parameter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameMessagesGetCall(String client, TargetEnum target, String queueName, Integer numberOfMessages, Integer maxWaitTimeInSeconds, Boolean deleteAfterRead, String lock, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}/messages"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numberOfMessages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfMessages", numberOfMessages));
        }

        if (maxWaitTimeInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWaitTimeInSeconds", maxWaitTimeInSeconds));
        }

        if (deleteAfterRead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAfterRead", deleteAfterRead));
        }

        if (lock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lock", lock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNameMessagesGetValidateBeforeCall(String client, TargetEnum target, String queueName, Integer numberOfMessages, Integer maxWaitTimeInSeconds, Boolean deleteAfterRead, String lock, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNameMessagesGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNameMessagesGet(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNameMessagesGet(Async)");
        }

        return queueClientTargetQueueNameMessagesGetCall(client, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, lock, _callback);

    }

    /**
     * Gets one or more messages from the queue
     * Return a JSON array containing zero or more messages
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue to read messages from (required)
     * @param numberOfMessages The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)
     * @param maxWaitTimeInSeconds If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)
     * @param deleteAfterRead Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)
     * @param lock If the queue is locked, you must provide the key in this parameter (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNameMessagesGet(String client, TargetEnum target, String queueName, Integer numberOfMessages, Integer maxWaitTimeInSeconds, Boolean deleteAfterRead, String lock) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNameMessagesGetWithHttpInfo(client, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, lock);
        return localVarResp.getData();
    }

    /**
     * Gets one or more messages from the queue
     * Return a JSON array containing zero or more messages
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue to read messages from (required)
     * @param numberOfMessages The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)
     * @param maxWaitTimeInSeconds If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)
     * @param deleteAfterRead Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)
     * @param lock If the queue is locked, you must provide the key in this parameter (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNameMessagesGetWithHttpInfo(String client, TargetEnum target, String queueName, Integer numberOfMessages, Integer maxWaitTimeInSeconds, Boolean deleteAfterRead, String lock) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNameMessagesGetValidateBeforeCall(client, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, lock, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets one or more messages from the queue (asynchronously)
     * Return a JSON array containing zero or more messages
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue to read messages from (required)
     * @param numberOfMessages The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)
     * @param maxWaitTimeInSeconds If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)
     * @param deleteAfterRead Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)
     * @param lock If the queue is locked, you must provide the key in this parameter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameMessagesGetAsync(String client, TargetEnum target, String queueName, Integer numberOfMessages, Integer maxWaitTimeInSeconds, Boolean deleteAfterRead, String lock, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNameMessagesGetValidateBeforeCall(client, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, lock, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNameMessagesPost
     * @param client client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @param body The message that should be posted on to the queue. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameMessagesPostCall(String client, TargetEnum target, String queueName, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}/messages"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNameMessagesPostValidateBeforeCall(String client, TargetEnum target, String queueName, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNameMessagesPost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNameMessagesPost(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNameMessagesPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queueClientTargetQueueNameMessagesPost(Async)");
        }

        return queueClientTargetQueueNameMessagesPostCall(client, target, queueName, body, _callback);

    }

    /**
     * Add a message to the named queue
     * Used for posting messages to a queue. The data passed in the message is not validated in any way
     * @param client client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @param body The message that should be posted on to the queue. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNameMessagesPost(String client, TargetEnum target, String queueName, String body) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNameMessagesPostWithHttpInfo(client, target, queueName, body);
        return localVarResp.getData();
    }

    /**
     * Add a message to the named queue
     * Used for posting messages to a queue. The data passed in the message is not validated in any way
     * @param client client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @param body The message that should be posted on to the queue. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNameMessagesPostWithHttpInfo(String client, TargetEnum target, String queueName, String body) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNameMessagesPostValidateBeforeCall(client, target, queueName, body, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a message to the named queue (asynchronously)
     * Used for posting messages to a queue. The data passed in the message is not validated in any way
     * @param client client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @param body The message that should be posted on to the queue. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNameMessagesPostAsync(String client, TargetEnum target, String queueName, String body, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNameMessagesPostValidateBeforeCall(client, target, queueName, body, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNamePost
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNamePostCall(String client, TargetEnum target, String queueName, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNamePostValidateBeforeCall(String client, TargetEnum target, String queueName, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNamePost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNamePost(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNamePost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queueClientTargetQueueNamePost(Async)");
        }

        return queueClientTargetQueueNamePostCall(client, target, queueName, body, _callback);

    }

    /**
     * Create a new queue, passing a block of JSON that is associated with the queue
     * Used for creating a new queue.
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNamePost(String client, TargetEnum target, String queueName, String body) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNamePostWithHttpInfo(client, target, queueName, body);
        return localVarResp.getData();
    }

    /**
     * Create a new queue, passing a block of JSON that is associated with the queue
     * Used for creating a new queue.
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNamePostWithHttpInfo(String client, TargetEnum target, String queueName, String body) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNamePostValidateBeforeCall(client, target, queueName, body, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new queue, passing a block of JSON that is associated with the queue (asynchronously)
     * Used for creating a new queue.
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNamePostAsync(String client, TargetEnum target, String queueName, String body, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNamePostValidateBeforeCall(client, target, queueName, body, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNamePurgePost
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNamePurgePostCall(String client, TargetEnum target, String queueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}/purge"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNamePurgePostValidateBeforeCall(String client, TargetEnum target, String queueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNamePurgePost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNamePurgePost(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNamePurgePost(Async)");
        }

        return queueClientTargetQueueNamePurgePostCall(client, target, queueName, _callback);

    }

    /**
     * Remove all messages from the named queue
     * Used to clear messages from a queue.
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNamePurgePost(String client, TargetEnum target, String queueName) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNamePurgePostWithHttpInfo(client, target, queueName);
        return localVarResp.getData();
    }

    /**
     * Remove all messages from the named queue
     * Used to clear messages from a queue.
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNamePurgePostWithHttpInfo(String client, TargetEnum target, String queueName) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNamePurgePostValidateBeforeCall(client, target, queueName, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove all messages from the named queue (asynchronously)
     * Used to clear messages from a queue.
     * @param client Client name (required)
     * @param target Target - the target of where the queue is stored. (required)
     * @param queueName The name of the queue that the message will be posted to.. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNamePurgePostAsync(String client, TargetEnum target, String queueName, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNamePurgePostValidateBeforeCall(client, target, queueName, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueClientTargetQueueNamePut
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNamePutCall(String client, TargetEnum target, String queueName, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/queue/{client}/{target}/{queueName}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "queueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueClientTargetQueueNamePutValidateBeforeCall(String client, TargetEnum target, String queueName, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling queueClientTargetQueueNamePut(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling queueClientTargetQueueNamePut(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling queueClientTargetQueueNamePut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queueClientTargetQueueNamePut(Async)");
        }

        return queueClientTargetQueueNamePutCall(client, target, queueName, body, _callback);

    }

    /**
     * Edit an existing queue
     * Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueClientTargetQueueNamePut(String client, TargetEnum target, String queueName, String body) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueClientTargetQueueNamePutWithHttpInfo(client, target, queueName, body);
        return localVarResp.getData();
    }

    /**
     * Edit an existing queue
     * Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueClientTargetQueueNamePutWithHttpInfo(String client, TargetEnum target, String queueName, String body) throws ApiException {
        okhttp3.Call localVarCall = queueClientTargetQueueNamePutValidateBeforeCall(client, target, queueName, body, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing queue (asynchronously)
     * Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
     * @param client The name of the client. (required)
     * @param target Target - is what the queue will be tagged with. (required)
     * @param queueName The name of the queue that should be created. (required)
     * @param body A block of JSON that contains information about the contents of the messages in the queue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueClientTargetQueueNamePutAsync(String client, TargetEnum target, String queueName, String body, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueClientTargetQueueNamePutValidateBeforeCall(client, target, queueName, body, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueGetCall(Integer from, Integer to, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueGetValidateBeforeCall(Integer from, Integer to, Boolean includeStatistics, final ApiCallback _callback) throws ApiException {
        return queueGetCall(from, to, includeStatistics, _callback);

    }

    /**
     * Get information about all queues on the server.
     * Get information about all queues that this user can access.
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse queueGet(Integer from, Integer to, Boolean includeStatistics) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = queueGetWithHttpInfo(from, to, includeStatistics);
        return localVarResp.getData();
    }

    /**
     * Get information about all queues on the server.
     * Get information about all queues that this user can access.
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> queueGetWithHttpInfo(Integer from, Integer to, Boolean includeStatistics) throws ApiException {
        okhttp3.Call localVarCall = queueGetValidateBeforeCall(from, to, includeStatistics, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about all queues on the server. (asynchronously)
     * Get information about all queues that this user can access.
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueGetAsync(Integer from, Integer to, Boolean includeStatistics, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueGetValidateBeforeCall(from, to, includeStatistics, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
