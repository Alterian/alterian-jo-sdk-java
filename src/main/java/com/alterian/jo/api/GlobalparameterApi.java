/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.Parameter;
import com.alterian.jo.model.ParameterApiResponse;
import com.alterian.jo.model.ParameterCopyDetails;
import com.alterian.jo.model.ParameterList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalparameterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalparameterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalparameterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadGlobalparameterClientParamnameGet
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule group JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlobalparameterClientParamnameGetCall(String client, String paramname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/download/globalparameter/{client}/{paramname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "paramname" + "}", localVarApiClient.escapeString(paramname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGlobalparameterClientParamnameGetValidateBeforeCall(String client, String paramname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling downloadGlobalparameterClientParamnameGet(Async)");
        }

        // verify the required parameter 'paramname' is set
        if (paramname == null) {
            throw new ApiException("Missing the required parameter 'paramname' when calling downloadGlobalparameterClientParamnameGet(Async)");
        }

        return downloadGlobalparameterClientParamnameGetCall(client, paramname, _callback);

    }

    /**
     * Download global parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule group JSON file </td><td>  -  </td></tr>
     </table>
     */
    public File downloadGlobalparameterClientParamnameGet(String client, String paramname) throws ApiException {
        ApiResponse<File> localVarResp = downloadGlobalparameterClientParamnameGetWithHttpInfo(client, paramname);
        return localVarResp.getData();
    }

    /**
     * Download global parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule group JSON file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadGlobalparameterClientParamnameGetWithHttpInfo(String client, String paramname) throws ApiException {
        okhttp3.Call localVarCall = downloadGlobalparameterClientParamnameGetValidateBeforeCall(client, paramname, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download global parameter (asynchronously)
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule group JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlobalparameterClientParamnameGetAsync(String client, String paramname, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGlobalparameterClientParamnameGetValidateBeforeCall(client, paramname, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterClientGet
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientGetCall(String client, Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/globalparameter/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (sortProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortProperty", sortProperty));
        }

        if (sortDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDescending", sortDescending));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterClientGetValidateBeforeCall(String client, Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling globalparameterClientGet(Async)");
        }

        return globalparameterClientGetCall(client, from, to, sortProperty, sortDescending, searchText, iClients, _callback);

    }

    /**
     * Get target parameter for for specific client
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ParameterList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ParameterList globalparameterClientGet(String client, Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients) throws ApiException {
        ApiResponse<ParameterList> localVarResp = globalparameterClientGetWithHttpInfo(client, from, to, sortProperty, sortDescending, searchText, iClients);
        return localVarResp.getData();
    }

    /**
     * Get target parameter for for specific client
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;ParameterList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParameterList> globalparameterClientGetWithHttpInfo(String client, Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = globalparameterClientGetValidateBeforeCall(client, from, to, sortProperty, sortDescending, searchText, iClients, null);
        Type localVarReturnType = new TypeToken<ParameterList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get target parameter for for specific client (asynchronously)
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientGetAsync(String client, Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients, final ApiCallback<ParameterList> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterClientGetValidateBeforeCall(client, from, to, sortProperty, sortDescending, searchText, iClients, _callback);
        Type localVarReturnType = new TypeToken<ParameterList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterClientParamnameCopyPost
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameCopyPostCall(String client, String paramname, ParameterCopyDetails parameterCopyDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameterCopyDetails;

        // create path and map variables
        String localVarPath = "/globalparameter/{client}/{paramname}/copy"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "paramname" + "}", localVarApiClient.escapeString(paramname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterClientParamnameCopyPostValidateBeforeCall(String client, String paramname, ParameterCopyDetails parameterCopyDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling globalparameterClientParamnameCopyPost(Async)");
        }

        // verify the required parameter 'paramname' is set
        if (paramname == null) {
            throw new ApiException("Missing the required parameter 'paramname' when calling globalparameterClientParamnameCopyPost(Async)");
        }

        // verify the required parameter 'parameterCopyDetails' is set
        if (parameterCopyDetails == null) {
            throw new ApiException("Missing the required parameter 'parameterCopyDetails' when calling globalparameterClientParamnameCopyPost(Async)");
        }

        return globalparameterClientParamnameCopyPostCall(client, paramname, parameterCopyDetails, _callback);

    }

    /**
     * Create a copy of a Global Parameter and, optionally, delete the original
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @return ParameterApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ParameterApiResponse globalparameterClientParamnameCopyPost(String client, String paramname, ParameterCopyDetails parameterCopyDetails) throws ApiException {
        ApiResponse<ParameterApiResponse> localVarResp = globalparameterClientParamnameCopyPostWithHttpInfo(client, paramname, parameterCopyDetails);
        return localVarResp.getData();
    }

    /**
     * Create a copy of a Global Parameter and, optionally, delete the original
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @return ApiResponse&lt;ParameterApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParameterApiResponse> globalparameterClientParamnameCopyPostWithHttpInfo(String client, String paramname, ParameterCopyDetails parameterCopyDetails) throws ApiException {
        okhttp3.Call localVarCall = globalparameterClientParamnameCopyPostValidateBeforeCall(client, paramname, parameterCopyDetails, null);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a copy of a Global Parameter and, optionally, delete the original (asynchronously)
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameCopyPostAsync(String client, String paramname, ParameterCopyDetails parameterCopyDetails, final ApiCallback<ParameterApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterClientParamnameCopyPostValidateBeforeCall(client, paramname, parameterCopyDetails, _callback);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterClientParamnameCopyPut
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameCopyPutCall(String client, String paramname, ParameterCopyDetails parameterCopyDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameterCopyDetails;

        // create path and map variables
        String localVarPath = "/globalparameter/{client}/{paramname}/copy"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "paramname" + "}", localVarApiClient.escapeString(paramname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterClientParamnameCopyPutValidateBeforeCall(String client, String paramname, ParameterCopyDetails parameterCopyDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling globalparameterClientParamnameCopyPut(Async)");
        }

        // verify the required parameter 'paramname' is set
        if (paramname == null) {
            throw new ApiException("Missing the required parameter 'paramname' when calling globalparameterClientParamnameCopyPut(Async)");
        }

        // verify the required parameter 'parameterCopyDetails' is set
        if (parameterCopyDetails == null) {
            throw new ApiException("Missing the required parameter 'parameterCopyDetails' when calling globalparameterClientParamnameCopyPut(Async)");
        }

        return globalparameterClientParamnameCopyPutCall(client, paramname, parameterCopyDetails, _callback);

    }

    /**
     * Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @return ParameterApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ParameterApiResponse globalparameterClientParamnameCopyPut(String client, String paramname, ParameterCopyDetails parameterCopyDetails) throws ApiException {
        ApiResponse<ParameterApiResponse> localVarResp = globalparameterClientParamnameCopyPutWithHttpInfo(client, paramname, parameterCopyDetails);
        return localVarResp.getData();
    }

    /**
     * Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @return ApiResponse&lt;ParameterApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParameterApiResponse> globalparameterClientParamnameCopyPutWithHttpInfo(String client, String paramname, ParameterCopyDetails parameterCopyDetails) throws ApiException {
        okhttp3.Call localVarCall = globalparameterClientParamnameCopyPutValidateBeforeCall(client, paramname, parameterCopyDetails, null);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original (asynchronously)
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameterCopyDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameCopyPutAsync(String client, String paramname, ParameterCopyDetails parameterCopyDetails, final ApiCallback<ParameterApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterClientParamnameCopyPutValidateBeforeCall(client, paramname, parameterCopyDetails, _callback);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterClientParamnameDelete
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameDeleteCall(String client, String paramname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/globalparameter/{client}/{paramname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "paramname" + "}", localVarApiClient.escapeString(paramname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterClientParamnameDeleteValidateBeforeCall(String client, String paramname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling globalparameterClientParamnameDelete(Async)");
        }

        // verify the required parameter 'paramname' is set
        if (paramname == null) {
            throw new ApiException("Missing the required parameter 'paramname' when calling globalparameterClientParamnameDelete(Async)");
        }

        return globalparameterClientParamnameDeleteCall(client, paramname, _callback);

    }

    /**
     * Delete a global parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse globalparameterClientParamnameDelete(String client, String paramname) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = globalparameterClientParamnameDeleteWithHttpInfo(client, paramname);
        return localVarResp.getData();
    }

    /**
     * Delete a global parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> globalparameterClientParamnameDeleteWithHttpInfo(String client, String paramname) throws ApiException {
        okhttp3.Call localVarCall = globalparameterClientParamnameDeleteValidateBeforeCall(client, paramname, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a global parameter (asynchronously)
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameDeleteAsync(String client, String paramname, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterClientParamnameDeleteValidateBeforeCall(client, paramname, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterClientParamnameGet
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameGetCall(String client, String paramname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/globalparameter/{client}/{paramname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "paramname" + "}", localVarApiClient.escapeString(paramname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterClientParamnameGetValidateBeforeCall(String client, String paramname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling globalparameterClientParamnameGet(Async)");
        }

        // verify the required parameter 'paramname' is set
        if (paramname == null) {
            throw new ApiException("Missing the required parameter 'paramname' when calling globalparameterClientParamnameGet(Async)");
        }

        return globalparameterClientParamnameGetCall(client, paramname, _callback);

    }

    /**
     * Get individual Global Parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @return ParameterList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ParameterList globalparameterClientParamnameGet(String client, String paramname) throws ApiException {
        ApiResponse<ParameterList> localVarResp = globalparameterClientParamnameGetWithHttpInfo(client, paramname);
        return localVarResp.getData();
    }

    /**
     * Get individual Global Parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @return ApiResponse&lt;ParameterList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParameterList> globalparameterClientParamnameGetWithHttpInfo(String client, String paramname) throws ApiException {
        okhttp3.Call localVarCall = globalparameterClientParamnameGetValidateBeforeCall(client, paramname, null);
        Type localVarReturnType = new TypeToken<ParameterList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual Global Parameter (asynchronously)
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnameGetAsync(String client, String paramname, final ApiCallback<ParameterList> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterClientParamnameGetValidateBeforeCall(client, paramname, _callback);
        Type localVarReturnType = new TypeToken<ParameterList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterClientParamnamePut
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnamePutCall(String client, String paramname, Parameter parameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameter;

        // create path and map variables
        String localVarPath = "/globalparameter/{client}/{paramname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "paramname" + "}", localVarApiClient.escapeString(paramname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterClientParamnamePutValidateBeforeCall(String client, String paramname, Parameter parameter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling globalparameterClientParamnamePut(Async)");
        }

        // verify the required parameter 'paramname' is set
        if (paramname == null) {
            throw new ApiException("Missing the required parameter 'paramname' when calling globalparameterClientParamnamePut(Async)");
        }

        // verify the required parameter 'parameter' is set
        if (parameter == null) {
            throw new ApiException("Missing the required parameter 'parameter' when calling globalparameterClientParamnamePut(Async)");
        }

        return globalparameterClientParamnamePutCall(client, paramname, parameter, _callback);

    }

    /**
     * Update Global Parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameter  (required)
     * @return ParameterApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ParameterApiResponse globalparameterClientParamnamePut(String client, String paramname, Parameter parameter) throws ApiException {
        ApiResponse<ParameterApiResponse> localVarResp = globalparameterClientParamnamePutWithHttpInfo(client, paramname, parameter);
        return localVarResp.getData();
    }

    /**
     * Update Global Parameter
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameter  (required)
     * @return ApiResponse&lt;ParameterApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParameterApiResponse> globalparameterClientParamnamePutWithHttpInfo(String client, String paramname, Parameter parameter) throws ApiException {
        okhttp3.Call localVarCall = globalparameterClientParamnamePutValidateBeforeCall(client, paramname, parameter, null);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Global Parameter (asynchronously)
     * 
     * @param client Client name (required)
     * @param paramname parameter name (required)
     * @param parameter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterClientParamnamePutAsync(String client, String paramname, Parameter parameter, final ApiCallback<ParameterApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterClientParamnamePutValidateBeforeCall(client, paramname, parameter, _callback);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterGetCall(Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/globalparameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (sortProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortProperty", sortProperty));
        }

        if (sortDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDescending", sortDescending));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterGetValidateBeforeCall(Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients, final ApiCallback _callback) throws ApiException {
        return globalparameterGetCall(from, to, sortProperty, sortDescending, searchText, iClients, _callback);

    }

    /**
     * Get global parameters for all clients
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ParameterList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ParameterList globalparameterGet(Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients) throws ApiException {
        ApiResponse<ParameterList> localVarResp = globalparameterGetWithHttpInfo(from, to, sortProperty, sortDescending, searchText, iClients);
        return localVarResp.getData();
    }

    /**
     * Get global parameters for all clients
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;ParameterList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParameterList> globalparameterGetWithHttpInfo(Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = globalparameterGetValidateBeforeCall(from, to, sortProperty, sortDescending, searchText, iClients, null);
        Type localVarReturnType = new TypeToken<ParameterList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global parameters for all clients (asynchronously)
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Roles that the system knows about </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterGetAsync(Integer from, Integer to, String sortProperty, String sortDescending, String searchText, List<String> iClients, final ApiCallback<ParameterList> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterGetValidateBeforeCall(from, to, sortProperty, sortDescending, searchText, iClients, _callback);
        Type localVarReturnType = new TypeToken<ParameterList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalparameterPost
     * @param parameter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterPostCall(Parameter parameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameter;

        // create path and map variables
        String localVarPath = "/globalparameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalparameterPostValidateBeforeCall(Parameter parameter, final ApiCallback _callback) throws ApiException {
        return globalparameterPostCall(parameter, _callback);

    }

    /**
     * Create Global Parameter (will fail if already exists)
     * 
     * @param parameter  (optional)
     * @return ParameterApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ParameterApiResponse globalparameterPost(Parameter parameter) throws ApiException {
        ApiResponse<ParameterApiResponse> localVarResp = globalparameterPostWithHttpInfo(parameter);
        return localVarResp.getData();
    }

    /**
     * Create Global Parameter (will fail if already exists)
     * 
     * @param parameter  (optional)
     * @return ApiResponse&lt;ParameterApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParameterApiResponse> globalparameterPostWithHttpInfo(Parameter parameter) throws ApiException {
        okhttp3.Call localVarCall = globalparameterPostValidateBeforeCall(parameter, null);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Global Parameter (will fail if already exists) (asynchronously)
     * 
     * @param parameter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalparameterPostAsync(Parameter parameter, final ApiCallback<ParameterApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalparameterPostValidateBeforeCall(parameter, _callback);
        Type localVarReturnType = new TypeToken<ParameterApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
