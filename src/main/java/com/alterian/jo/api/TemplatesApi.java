/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.jo.model.Client;
import java.io.File;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.ResourceAndStatusResponse;
import com.alterian.jo.model.TargetEnum;
import com.alterian.jo.model.TemplateList;
import com.alterian.jo.model.TemplatePublishSettings;
import com.alterian.jo.model.TemplateUpgradeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadTemplateClientTemplatenameGet
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplateClientTemplatenameGetCall(String client, String templatename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/download/template/{client}/{templatename}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadTemplateClientTemplatenameGetValidateBeforeCall(String client, String templatename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling downloadTemplateClientTemplatenameGet(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling downloadTemplateClientTemplatenameGet(Async)");
        }

        return downloadTemplateClientTemplatenameGetCall(client, templatename, _callback);

    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void downloadTemplateClientTemplatenameGet(String client, String templatename) throws ApiException {
        downloadTemplateClientTemplatenameGetWithHttpInfo(client, templatename);
    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadTemplateClientTemplatenameGetWithHttpInfo(String client, String templatename) throws ApiException {
        okhttp3.Call localVarCall = downloadTemplateClientTemplatenameGetValidateBeforeCall(client, templatename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplateClientTemplatenameGetAsync(String client, String templatename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadTemplateClientTemplatenameGetValidateBeforeCall(client, templatename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadTemplateClientTemplatenameVersionGet
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the file you want to download. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplateClientTemplatenameVersionGetCall(String client, String templatename, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/download/template/{client}/{templatename}/{version}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadTemplateClientTemplatenameVersionGetValidateBeforeCall(String client, String templatename, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling downloadTemplateClientTemplatenameVersionGet(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling downloadTemplateClientTemplatenameVersionGet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling downloadTemplateClientTemplatenameVersionGet(Async)");
        }

        return downloadTemplateClientTemplatenameVersionGetCall(client, templatename, version, _callback);

    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the file you want to download. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void downloadTemplateClientTemplatenameVersionGet(String client, String templatename, Integer version) throws ApiException {
        downloadTemplateClientTemplatenameVersionGetWithHttpInfo(client, templatename, version);
    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the file you want to download. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadTemplateClientTemplatenameVersionGetWithHttpInfo(String client, String templatename, Integer version) throws ApiException {
        okhttp3.Call localVarCall = downloadTemplateClientTemplatenameVersionGetValidateBeforeCall(client, templatename, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the file you want to download. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplateClientTemplatenameVersionGetAsync(String client, String templatename, Integer version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadTemplateClientTemplatenameVersionGetValidateBeforeCall(client, templatename, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientDelete
     * @param client Client name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientDeleteCall(String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientDeleteValidateBeforeCall(String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientDelete(Async)");
        }

        return templateClientDeleteCall(client, _callback);

    }

    /**
     * Delete all templates uploaded by this client.
     * 
     * @param client Client name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse templateClientDelete(String client) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = templateClientDeleteWithHttpInfo(client);
        return localVarResp.getData();
    }

    /**
     * Delete all templates uploaded by this client.
     * 
     * @param client Client name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> templateClientDeleteWithHttpInfo(String client) throws ApiException {
        okhttp3.Call localVarCall = templateClientDeleteValidateBeforeCall(client, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all templates uploaded by this client. (asynchronously)
     * 
     * @param client Client name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientDeleteAsync(String client, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientDeleteValidateBeforeCall(client, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientGet
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientGetCall(String client, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        if (getAllDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getAllDetails", getAllDetails));
        }

        if (basicInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basicInfo", basicInfo));
        }

        if (targetClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetClient", targetClient));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (includePublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePublic", includePublic));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientGetValidateBeforeCall(String client, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientGet(Async)");
        }

        return templateClientGetCall(client, from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, _callback);

    }

    /**
     * Get details about all templates uploaded by a specific client
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @return TemplateList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateList templateClientGet(String client, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients) throws ApiException {
        ApiResponse<TemplateList> localVarResp = templateClientGetWithHttpInfo(client, from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients);
        return localVarResp.getData();
    }

    /**
     * Get details about all templates uploaded by a specific client
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;TemplateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateList> templateClientGetWithHttpInfo(String client, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = templateClientGetValidateBeforeCall(client, from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, null);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all templates uploaded by a specific client (asynchronously)
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientGetAsync(String client, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients, final ApiCallback<TemplateList> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientGetValidateBeforeCall(client, from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, _callback);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientTemplatenameDelete
     * @param client Client name (required)
     * @param templatename The name of the template you want to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameDeleteCall(String client, String templatename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{client}/{templatename}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientTemplatenameDeleteValidateBeforeCall(String client, String templatename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientTemplatenameDelete(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateClientTemplatenameDelete(Async)");
        }

        return templateClientTemplatenameDeleteCall(client, templatename, _callback);

    }

    /**
     * Delete all versions of a specific template.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template you want to delete (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse templateClientTemplatenameDelete(String client, String templatename) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = templateClientTemplatenameDeleteWithHttpInfo(client, templatename);
        return localVarResp.getData();
    }

    /**
     * Delete all versions of a specific template.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template you want to delete (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> templateClientTemplatenameDeleteWithHttpInfo(String client, String templatename) throws ApiException {
        okhttp3.Call localVarCall = templateClientTemplatenameDeleteValidateBeforeCall(client, templatename, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all versions of a specific template. (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template you want to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameDeleteAsync(String client, String templatename, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientTemplatenameDeleteValidateBeforeCall(client, templatename, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientTemplatenameGet
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameGetCall(String client, String templatename, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, String targetClient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{client}/{templatename}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        if (getAllDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getAllDetails", getAllDetails));
        }

        if (targetClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetClient", targetClient));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientTemplatenameGetValidateBeforeCall(String client, String templatename, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, String targetClient, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientTemplatenameGet(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateClientTemplatenameGet(Async)");
        }

        return templateClientTemplatenameGetCall(client, templatename, from, to, allversions, getAllDetails, targetClient, _callback);

    }

    /**
     * Get details about all versions of a specified template
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @return TemplateList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateList templateClientTemplatenameGet(String client, String templatename, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, String targetClient) throws ApiException {
        ApiResponse<TemplateList> localVarResp = templateClientTemplatenameGetWithHttpInfo(client, templatename, from, to, allversions, getAllDetails, targetClient);
        return localVarResp.getData();
    }

    /**
     * Get details about all versions of a specified template
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @return ApiResponse&lt;TemplateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateList> templateClientTemplatenameGetWithHttpInfo(String client, String templatename, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, String targetClient) throws ApiException {
        okhttp3.Call localVarCall = templateClientTemplatenameGetValidateBeforeCall(client, templatename, from, to, allversions, getAllDetails, targetClient, null);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all versions of a specified template (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameGetAsync(String client, String templatename, Integer from, Integer to, Boolean allversions, Boolean getAllDetails, String targetClient, final ApiCallback<TemplateList> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientTemplatenameGetValidateBeforeCall(client, templatename, from, to, allversions, getAllDetails, targetClient, _callback);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientTemplatenamePost
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param _file  (optional)
     * @param settings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenamePostCall(String client, String templatename, Boolean validate, File _file, String settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{client}/{templatename}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (settings != null) {
            localVarFormParams.put("settings", settings);
        }

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientTemplatenamePostValidateBeforeCall(String client, String templatename, Boolean validate, File _file, String settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientTemplatenamePost(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateClientTemplatenamePost(Async)");
        }

        return templateClientTemplatenamePostCall(client, templatename, validate, _file, settings, _callback);

    }

    /**
     * Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param _file  (optional)
     * @param settings  (optional)
     * @return ResourceAndStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAndStatusResponse templateClientTemplatenamePost(String client, String templatename, Boolean validate, File _file, String settings) throws ApiException {
        ApiResponse<ResourceAndStatusResponse> localVarResp = templateClientTemplatenamePostWithHttpInfo(client, templatename, validate, _file, settings);
        return localVarResp.getData();
    }

    /**
     * Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param _file  (optional)
     * @param settings  (optional)
     * @return ApiResponse&lt;ResourceAndStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAndStatusResponse> templateClientTemplatenamePostWithHttpInfo(String client, String templatename, Boolean validate, File _file, String settings) throws ApiException {
        okhttp3.Call localVarCall = templateClientTemplatenamePostValidateBeforeCall(client, templatename, validate, _file, settings, null);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a KTR file which defines the functionality of the template. This will generate and return a version   number. (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param _file  (optional)
     * @param settings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenamePostAsync(String client, String templatename, Boolean validate, File _file, String settings, final ApiCallback<ResourceAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientTemplatenamePostValidateBeforeCall(client, templatename, validate, _file, settings, _callback);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientTemplatenamePut
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param body The JSON containing additional settings for this template. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenamePutCall(String client, String templatename, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/template/{client}/{templatename}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientTemplatenamePutValidateBeforeCall(String client, String templatename, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientTemplatenamePut(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateClientTemplatenamePut(Async)");
        }

        return templateClientTemplatenamePutCall(client, templatename, body, _callback);

    }

    /**
     * Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param body The JSON containing additional settings for this template. (optional)
     * @return ResourceAndStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAndStatusResponse templateClientTemplatenamePut(String client, String templatename, Object body) throws ApiException {
        ApiResponse<ResourceAndStatusResponse> localVarResp = templateClientTemplatenamePutWithHttpInfo(client, templatename, body);
        return localVarResp.getData();
    }

    /**
     * Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param body The JSON containing additional settings for this template. (optional)
     * @return ApiResponse&lt;ResourceAndStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAndStatusResponse> templateClientTemplatenamePutWithHttpInfo(String client, String templatename, Object body) throws ApiException {
        okhttp3.Call localVarCall = templateClientTemplatenamePutValidateBeforeCall(client, templatename, body, null);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alter the settings of the most recent version of an existing template. This will generate and return a new   version number. (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param body The JSON containing additional settings for this template. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenamePutAsync(String client, String templatename, Object body, final ApiCallback<ResourceAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientTemplatenamePutValidateBeforeCall(client, templatename, body, _callback);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientTemplatenameVersionDelete
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameVersionDeleteCall(String client, String templatename, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{client}/{templatename}/{version}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientTemplatenameVersionDeleteValidateBeforeCall(String client, String templatename, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientTemplatenameVersionDelete(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateClientTemplatenameVersionDelete(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling templateClientTemplatenameVersionDelete(Async)");
        }

        return templateClientTemplatenameVersionDeleteCall(client, templatename, version, _callback);

    }

    /**
     * Delete a specific version of a specific template on the server.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse templateClientTemplatenameVersionDelete(String client, String templatename, Integer version) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = templateClientTemplatenameVersionDeleteWithHttpInfo(client, templatename, version);
        return localVarResp.getData();
    }

    /**
     * Delete a specific version of a specific template on the server.
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> templateClientTemplatenameVersionDeleteWithHttpInfo(String client, String templatename, Integer version) throws ApiException {
        okhttp3.Call localVarCall = templateClientTemplatenameVersionDeleteValidateBeforeCall(client, templatename, version, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a specific version of a specific template on the server. (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameVersionDeleteAsync(String client, String templatename, Integer version, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientTemplatenameVersionDeleteValidateBeforeCall(client, templatename, version, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientTemplatenameVersionGet
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameVersionGetCall(String client, String templatename, Integer version, Boolean getAllDetails, String targetClient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{client}/{templatename}/{version}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (getAllDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getAllDetails", getAllDetails));
        }

        if (targetClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetClient", targetClient));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientTemplatenameVersionGetValidateBeforeCall(String client, String templatename, Integer version, Boolean getAllDetails, String targetClient, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientTemplatenameVersionGet(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateClientTemplatenameVersionGet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling templateClientTemplatenameVersionGet(Async)");
        }

        return templateClientTemplatenameVersionGetCall(client, templatename, version, getAllDetails, targetClient, _callback);

    }

    /**
     * Get details about a specific version of a specific template for a specific client
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @return TemplateList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateList templateClientTemplatenameVersionGet(String client, String templatename, Integer version, Boolean getAllDetails, String targetClient) throws ApiException {
        ApiResponse<TemplateList> localVarResp = templateClientTemplatenameVersionGetWithHttpInfo(client, templatename, version, getAllDetails, targetClient);
        return localVarResp.getData();
    }

    /**
     * Get details about a specific version of a specific template for a specific client
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @return ApiResponse&lt;TemplateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateList> templateClientTemplatenameVersionGetWithHttpInfo(String client, String templatename, Integer version, Boolean getAllDetails, String targetClient) throws ApiException {
        okhttp3.Call localVarCall = templateClientTemplatenameVersionGetValidateBeforeCall(client, templatename, version, getAllDetails, targetClient, null);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about a specific version of a specific template for a specific client (asynchronously)
     * 
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameVersionGetAsync(String client, String templatename, Integer version, Boolean getAllDetails, String targetClient, final ApiCallback<TemplateList> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientTemplatenameVersionGetValidateBeforeCall(client, templatename, version, getAllDetails, targetClient, _callback);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateClientTemplatenameVersionPost
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param body JSON representing the current template to upgrade (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameVersionPostCall(String client, String templatename, Integer version, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/template/{client}/{templatename}/{version}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateClientTemplatenameVersionPostValidateBeforeCall(String client, String templatename, Integer version, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateClientTemplatenameVersionPost(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateClientTemplatenameVersionPost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling templateClientTemplatenameVersionPost(Async)");
        }

        return templateClientTemplatenameVersionPostCall(client, templatename, version, body, _callback);

    }

    /**
     * Get an upgraded version of template
     * Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param body JSON representing the current template to upgrade (optional)
     * @return TemplateUpgradeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateUpgradeResponse templateClientTemplatenameVersionPost(String client, String templatename, Integer version, Object body) throws ApiException {
        ApiResponse<TemplateUpgradeResponse> localVarResp = templateClientTemplatenameVersionPostWithHttpInfo(client, templatename, version, body);
        return localVarResp.getData();
    }

    /**
     * Get an upgraded version of template
     * Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param body JSON representing the current template to upgrade (optional)
     * @return ApiResponse&lt;TemplateUpgradeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateUpgradeResponse> templateClientTemplatenameVersionPostWithHttpInfo(String client, String templatename, Integer version, Object body) throws ApiException {
        okhttp3.Call localVarCall = templateClientTemplatenameVersionPostValidateBeforeCall(client, templatename, version, body, null);
        Type localVarReturnType = new TypeToken<TemplateUpgradeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an upgraded version of template (asynchronously)
     * Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param body JSON representing the current template to upgrade (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateClientTemplatenameVersionPostAsync(String client, String templatename, Integer version, Object body, final ApiCallback<TemplateUpgradeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateClientTemplatenameVersionPostValidateBeforeCall(client, templatename, version, body, _callback);
        Type localVarReturnType = new TypeToken<TemplateUpgradeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGetCall(Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        if (getAllDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getAllDetails", getAllDetails));
        }

        if (basicInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basicInfo", basicInfo));
        }

        if (targetClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetClient", targetClient));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (includePublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePublic", includePublic));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateGetValidateBeforeCall(Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients, final ApiCallback _callback) throws ApiException {
        return templateGetCall(from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, _callback);

    }

    /**
     * Get details about all templates on the server
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @return TemplateList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateList templateGet(Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients) throws ApiException {
        ApiResponse<TemplateList> localVarResp = templateGetWithHttpInfo(from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients);
        return localVarResp.getData();
    }

    /**
     * Get details about all templates on the server
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;TemplateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateList> templateGetWithHttpInfo(Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = templateGetValidateBeforeCall(from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, null);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all templates on the server (asynchronously)
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param getAllDetails Do we want to retrieve details of Data Grids present in this template. (optional)
     * @param basicInfo Only retrieve the basic information about this template, like name, client and url template. (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGetAsync(Integer from, Integer to, Boolean allversions, Boolean getAllDetails, Boolean basicInfo, String targetClient, String searchText, Boolean includePublic, List<String> iClients, final ApiCallback<TemplateList> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateGetValidateBeforeCall(from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, _callback);
        Type localVarReturnType = new TypeToken<TemplateList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateTargetClientTemplatenameVersionPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param paramSource When overwriting an existing rule, this determines which value to use (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param templatePublishSettings The JSON containing additional settings for this template. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTargetClientTemplatenameVersionPostCall(TargetEnum target, String client, String templatename, Integer version, String paramSource, String targetClient, TemplatePublishSettings templatePublishSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatePublishSettings;

        // create path and map variables
        String localVarPath = "/template/{target}/{client}/{templatename}/{version}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paramSource", paramSource));
        }

        if (targetClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetClient", targetClient));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateTargetClientTemplatenameVersionPostValidateBeforeCall(TargetEnum target, String client, String templatename, Integer version, String paramSource, String targetClient, TemplatePublishSettings templatePublishSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling templateTargetClientTemplatenameVersionPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateTargetClientTemplatenameVersionPost(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateTargetClientTemplatenameVersionPost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling templateTargetClientTemplatenameVersionPost(Async)");
        }

        return templateTargetClientTemplatenameVersionPostCall(target, client, templatename, version, paramSource, targetClient, templatePublishSettings, _callback);

    }

    /**
     * Take a specific version of a template and publish it as a rule.
     * If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param paramSource When overwriting an existing rule, this determines which value to use (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param templatePublishSettings The JSON containing additional settings for this template. (optional)
     * @return ResourceAndStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAndStatusResponse templateTargetClientTemplatenameVersionPost(TargetEnum target, String client, String templatename, Integer version, String paramSource, String targetClient, TemplatePublishSettings templatePublishSettings) throws ApiException {
        ApiResponse<ResourceAndStatusResponse> localVarResp = templateTargetClientTemplatenameVersionPostWithHttpInfo(target, client, templatename, version, paramSource, targetClient, templatePublishSettings);
        return localVarResp.getData();
    }

    /**
     * Take a specific version of a template and publish it as a rule.
     * If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param paramSource When overwriting an existing rule, this determines which value to use (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param templatePublishSettings The JSON containing additional settings for this template. (optional)
     * @return ApiResponse&lt;ResourceAndStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAndStatusResponse> templateTargetClientTemplatenameVersionPostWithHttpInfo(TargetEnum target, String client, String templatename, Integer version, String paramSource, String targetClient, TemplatePublishSettings templatePublishSettings) throws ApiException {
        okhttp3.Call localVarCall = templateTargetClientTemplatenameVersionPostValidateBeforeCall(target, client, templatename, version, paramSource, targetClient, templatePublishSettings, null);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Take a specific version of a template and publish it as a rule. (asynchronously)
     * If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param paramSource When overwriting an existing rule, this determines which value to use (optional)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param templatePublishSettings The JSON containing additional settings for this template. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTargetClientTemplatenameVersionPostAsync(TargetEnum target, String client, String templatename, Integer version, String paramSource, String targetClient, TemplatePublishSettings templatePublishSettings, final ApiCallback<ResourceAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateTargetClientTemplatenameVersionPostValidateBeforeCall(target, client, templatename, version, paramSource, targetClient, templatePublishSettings, _callback);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateTargetClientTemplatenameVersionPut
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param client2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTargetClientTemplatenameVersionPutCall(TargetEnum target, String client, String templatename, Integer version, String targetClient, Client client2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = client2;

        // create path and map variables
        String localVarPath = "/template/{target}/{client}/{templatename}/{version}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetClient", targetClient));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateTargetClientTemplatenameVersionPutValidateBeforeCall(TargetEnum target, String client, String templatename, Integer version, String targetClient, Client client2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling templateTargetClientTemplatenameVersionPut(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling templateTargetClientTemplatenameVersionPut(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling templateTargetClientTemplatenameVersionPut(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling templateTargetClientTemplatenameVersionPut(Async)");
        }

        return templateTargetClientTemplatenameVersionPutCall(target, client, templatename, version, targetClient, client2, _callback);

    }

    /**
     * Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
     * If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param client2  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse templateTargetClientTemplatenameVersionPut(TargetEnum target, String client, String templatename, Integer version, String targetClient, Client client2) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = templateTargetClientTemplatenameVersionPutWithHttpInfo(target, client, templatename, version, targetClient, client2);
        return localVarResp.getData();
    }

    /**
     * Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
     * If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param client2  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> templateTargetClientTemplatenameVersionPutWithHttpInfo(TargetEnum target, String client, String templatename, Integer version, String targetClient, Client client2) throws ApiException {
        okhttp3.Call localVarCall = templateTargetClientTemplatenameVersionPutValidateBeforeCall(target, client, templatename, version, targetClient, client2, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template (asynchronously)
     * If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param templatename The name of the template (required)
     * @param version The version of the template (required)
     * @param targetClient Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)
     * @param client2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTargetClientTemplatenameVersionPutAsync(TargetEnum target, String client, String templatename, Integer version, String targetClient, Client client2, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateTargetClientTemplatenameVersionPutValidateBeforeCall(target, client, templatename, version, targetClient, client2, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
