/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.jo.model.CacheApiDeleteResponse;
import com.alterian.jo.model.CacheApiResponse;
import com.alterian.jo.model.CacheCQL;
import com.alterian.jo.model.CacheChangesResponse;
import com.alterian.jo.model.CacheDetailsResponse;
import com.alterian.jo.model.CacheExecuteResponse;
import com.alterian.jo.model.CacheTableDefinition;
import com.alterian.jo.model.TableTypeEnum;
import com.alterian.jo.model.TargetEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CacheApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CacheApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CacheApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cacheClientGet
     * @param client Client name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientGetCall(String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientGetValidateBeforeCall(String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientGet(Async)");
        }

        return cacheClientGetCall(client, _callback);

    }

    /**
     * Get information about cache tables, filtered by client.
     * Get information about cache tables, filtered by client.
     * @param client Client name (required)
     * @return CacheDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheDetailsResponse cacheClientGet(String client) throws ApiException {
        ApiResponse<CacheDetailsResponse> localVarResp = cacheClientGetWithHttpInfo(client);
        return localVarResp.getData();
    }

    /**
     * Get information about cache tables, filtered by client.
     * Get information about cache tables, filtered by client.
     * @param client Client name (required)
     * @return ApiResponse&lt;CacheDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheDetailsResponse> cacheClientGetWithHttpInfo(String client) throws ApiException {
        okhttp3.Call localVarCall = cacheClientGetValidateBeforeCall(client, null);
        Type localVarReturnType = new TypeToken<CacheDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about cache tables, filtered by client. (asynchronously)
     * Get information about cache tables, filtered by client.
     * @param client Client name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientGetAsync(String client, final ApiCallback<CacheDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientGetValidateBeforeCall(client, _callback);
        Type localVarReturnType = new TypeToken<CacheDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheClientTargetExecutePost
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheCQL  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetExecutePostCall(String client, TargetEnum target, CacheCQL cacheCQL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cacheCQL;

        // create path and map variables
        String localVarPath = "/cache/{client}/{target}/execute"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientTargetExecutePostValidateBeforeCall(String client, TargetEnum target, CacheCQL cacheCQL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientTargetExecutePost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling cacheClientTargetExecutePost(Async)");
        }

        return cacheClientTargetExecutePostCall(client, target, cacheCQL, _callback);

    }

    /**
     * Execute a limited set of cql commands against the cache
     * insert, select, update or delete a single row of data from a single table
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheCQL  (optional)
     * @return CacheExecuteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheExecuteResponse cacheClientTargetExecutePost(String client, TargetEnum target, CacheCQL cacheCQL) throws ApiException {
        ApiResponse<CacheExecuteResponse> localVarResp = cacheClientTargetExecutePostWithHttpInfo(client, target, cacheCQL);
        return localVarResp.getData();
    }

    /**
     * Execute a limited set of cql commands against the cache
     * insert, select, update or delete a single row of data from a single table
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheCQL  (optional)
     * @return ApiResponse&lt;CacheExecuteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheExecuteResponse> cacheClientTargetExecutePostWithHttpInfo(String client, TargetEnum target, CacheCQL cacheCQL) throws ApiException {
        okhttp3.Call localVarCall = cacheClientTargetExecutePostValidateBeforeCall(client, target, cacheCQL, null);
        Type localVarReturnType = new TypeToken<CacheExecuteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a limited set of cql commands against the cache (asynchronously)
     * insert, select, update or delete a single row of data from a single table
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheCQL  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetExecutePostAsync(String client, TargetEnum target, CacheCQL cacheCQL, final ApiCallback<CacheExecuteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientTargetExecutePostValidateBeforeCall(client, target, cacheCQL, _callback);
        Type localVarReturnType = new TypeToken<CacheExecuteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheClientTargetGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param tabletype If you only want a certain type of table, provide it here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetGetCall(String client, TargetEnum target, TableTypeEnum tabletype, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{client}/{target}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tabletype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tabletype", tabletype));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientTargetGetValidateBeforeCall(String client, TargetEnum target, TableTypeEnum tabletype, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientTargetGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling cacheClientTargetGet(Async)");
        }

        return cacheClientTargetGetCall(client, target, tabletype, _callback);

    }

    /**
     * Get information about cache tables, filtered by client and target.
     * Get information about cache tables, filtered by client and target.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param tabletype If you only want a certain type of table, provide it here (optional)
     * @return CacheDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheDetailsResponse cacheClientTargetGet(String client, TargetEnum target, TableTypeEnum tabletype) throws ApiException {
        ApiResponse<CacheDetailsResponse> localVarResp = cacheClientTargetGetWithHttpInfo(client, target, tabletype);
        return localVarResp.getData();
    }

    /**
     * Get information about cache tables, filtered by client and target.
     * Get information about cache tables, filtered by client and target.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param tabletype If you only want a certain type of table, provide it here (optional)
     * @return ApiResponse&lt;CacheDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheDetailsResponse> cacheClientTargetGetWithHttpInfo(String client, TargetEnum target, TableTypeEnum tabletype) throws ApiException {
        okhttp3.Call localVarCall = cacheClientTargetGetValidateBeforeCall(client, target, tabletype, null);
        Type localVarReturnType = new TypeToken<CacheDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about cache tables, filtered by client and target. (asynchronously)
     * Get information about cache tables, filtered by client and target.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param tabletype If you only want a certain type of table, provide it here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetGetAsync(String client, TargetEnum target, TableTypeEnum tabletype, final ApiCallback<CacheDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientTargetGetValidateBeforeCall(client, target, tabletype, _callback);
        Type localVarReturnType = new TypeToken<CacheDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheClientTargetTableColumnDelete
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param column Column name (required)
     * @param key Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableColumnDeleteCall(String client, TargetEnum target, String table, String column, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{client}/{target}/{table}/{column}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()))
            .replace("{" + "column" + "}", localVarApiClient.escapeString(column.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientTargetTableColumnDeleteValidateBeforeCall(String client, TargetEnum target, String table, String column, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientTargetTableColumnDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling cacheClientTargetTableColumnDelete(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling cacheClientTargetTableColumnDelete(Async)");
        }

        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling cacheClientTargetTableColumnDelete(Async)");
        }

        return cacheClientTargetTableColumnDeleteCall(client, target, table, column, key, keys, _callback);

    }

    /**
     * Delete column from a cache table.
     * Removes a column from a cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param column Column name (required)
     * @param key Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @return CacheApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheApiResponse cacheClientTargetTableColumnDelete(String client, TargetEnum target, String table, String column, String key, List<String> keys) throws ApiException {
        ApiResponse<CacheApiResponse> localVarResp = cacheClientTargetTableColumnDeleteWithHttpInfo(client, target, table, column, key, keys);
        return localVarResp.getData();
    }

    /**
     * Delete column from a cache table.
     * Removes a column from a cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param column Column name (required)
     * @param key Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @return ApiResponse&lt;CacheApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheApiResponse> cacheClientTargetTableColumnDeleteWithHttpInfo(String client, TargetEnum target, String table, String column, String key, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = cacheClientTargetTableColumnDeleteValidateBeforeCall(client, target, table, column, key, keys, null);
        Type localVarReturnType = new TypeToken<CacheApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete column from a cache table. (asynchronously)
     * Removes a column from a cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param column Column name (required)
     * @param key Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableColumnDeleteAsync(String client, TargetEnum target, String table, String column, String key, List<String> keys, final ApiCallback<CacheApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientTargetTableColumnDeleteValidateBeforeCall(client, target, table, column, key, keys, _callback);
        Type localVarReturnType = new TypeToken<CacheApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheClientTargetTableColumnsDelete
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param preview By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableColumnsDeleteCall(String client, TargetEnum target, String table, Boolean preview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{client}/{target}/{table}/columns"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (preview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preview", preview));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientTargetTableColumnsDeleteValidateBeforeCall(String client, TargetEnum target, String table, Boolean preview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientTargetTableColumnsDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling cacheClientTargetTableColumnsDelete(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling cacheClientTargetTableColumnsDelete(Async)");
        }

        // verify the required parameter 'preview' is set
        if (preview == null) {
            throw new ApiException("Missing the required parameter 'preview' when calling cacheClientTargetTableColumnsDelete(Async)");
        }

        return cacheClientTargetTableColumnsDeleteCall(client, target, table, preview, _callback);

    }

    /**
     * Delete unused cache table and columns
     * Removes the columns and tables that are no longer used by any of the rules
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param preview By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped (required)
     * @return CacheApiDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheApiDeleteResponse cacheClientTargetTableColumnsDelete(String client, TargetEnum target, String table, Boolean preview) throws ApiException {
        ApiResponse<CacheApiDeleteResponse> localVarResp = cacheClientTargetTableColumnsDeleteWithHttpInfo(client, target, table, preview);
        return localVarResp.getData();
    }

    /**
     * Delete unused cache table and columns
     * Removes the columns and tables that are no longer used by any of the rules
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param preview By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped (required)
     * @return ApiResponse&lt;CacheApiDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheApiDeleteResponse> cacheClientTargetTableColumnsDeleteWithHttpInfo(String client, TargetEnum target, String table, Boolean preview) throws ApiException {
        okhttp3.Call localVarCall = cacheClientTargetTableColumnsDeleteValidateBeforeCall(client, target, table, preview, null);
        Type localVarReturnType = new TypeToken<CacheApiDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete unused cache table and columns (asynchronously)
     * Removes the columns and tables that are no longer used by any of the rules
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param preview By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableColumnsDeleteAsync(String client, TargetEnum target, String table, Boolean preview, final ApiCallback<CacheApiDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientTargetTableColumnsDeleteValidateBeforeCall(client, target, table, preview, _callback);
        Type localVarReturnType = new TypeToken<CacheApiDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheClientTargetTableDelete
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableDeleteCall(String client, TargetEnum target, String table, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{client}/{target}/{table}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientTargetTableDeleteValidateBeforeCall(String client, TargetEnum target, String table, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientTargetTableDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling cacheClientTargetTableDelete(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling cacheClientTargetTableDelete(Async)");
        }

        return cacheClientTargetTableDeleteCall(client, target, table, key, keys, _callback);

    }

    /**
     * Delete data from a cache table.
     * Removes data from a cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @return CacheApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheApiResponse cacheClientTargetTableDelete(String client, TargetEnum target, String table, String key, List<String> keys) throws ApiException {
        ApiResponse<CacheApiResponse> localVarResp = cacheClientTargetTableDeleteWithHttpInfo(client, target, table, key, keys);
        return localVarResp.getData();
    }

    /**
     * Delete data from a cache table.
     * Removes data from a cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @return ApiResponse&lt;CacheApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheApiResponse> cacheClientTargetTableDeleteWithHttpInfo(String client, TargetEnum target, String table, String key, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = cacheClientTargetTableDeleteValidateBeforeCall(client, target, table, key, keys, null);
        Type localVarReturnType = new TypeToken<CacheApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete data from a cache table. (asynchronously)
     * Removes data from a cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableDeleteAsync(String client, TargetEnum target, String table, String key, List<String> keys, final ApiCallback<CacheApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientTargetTableDeleteValidateBeforeCall(client, target, table, key, keys, _callback);
        Type localVarReturnType = new TypeToken<CacheApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheClientTargetTableGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key If you want a row of data to be returned, provide the partition key (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param sample return a sample of n rows from the table (optional)
     * @param pivot Would you like the data pivoted? (Only for CSV report) (optional)
     * @param fieldvalue If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)
     * @param limit If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableGetCall(String client, TargetEnum target, String table, String key, List<String> keys, Integer sample, Boolean pivot, String fieldvalue, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{client}/{target}/{table}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "table" + "}", localVarApiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (sample != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sample", sample));
        }

        if (pivot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot", pivot));
        }

        if (fieldvalue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldvalue", fieldvalue));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientTargetTableGetValidateBeforeCall(String client, TargetEnum target, String table, String key, List<String> keys, Integer sample, Boolean pivot, String fieldvalue, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientTargetTableGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling cacheClientTargetTableGet(Async)");
        }

        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling cacheClientTargetTableGet(Async)");
        }

        return cacheClientTargetTableGetCall(client, target, table, key, keys, sample, pivot, fieldvalue, limit, _callback);

    }

    /**
     * Get information about a specific cache table.
     * Get information about a specific cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key If you want a row of data to be returned, provide the partition key (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param sample return a sample of n rows from the table (optional)
     * @param pivot Would you like the data pivoted? (Only for CSV report) (optional)
     * @param fieldvalue If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)
     * @param limit If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)
     * @return CacheDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheDetailsResponse cacheClientTargetTableGet(String client, TargetEnum target, String table, String key, List<String> keys, Integer sample, Boolean pivot, String fieldvalue, Integer limit) throws ApiException {
        ApiResponse<CacheDetailsResponse> localVarResp = cacheClientTargetTableGetWithHttpInfo(client, target, table, key, keys, sample, pivot, fieldvalue, limit);
        return localVarResp.getData();
    }

    /**
     * Get information about a specific cache table.
     * Get information about a specific cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key If you want a row of data to be returned, provide the partition key (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param sample return a sample of n rows from the table (optional)
     * @param pivot Would you like the data pivoted? (Only for CSV report) (optional)
     * @param fieldvalue If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)
     * @param limit If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)
     * @return ApiResponse&lt;CacheDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheDetailsResponse> cacheClientTargetTableGetWithHttpInfo(String client, TargetEnum target, String table, String key, List<String> keys, Integer sample, Boolean pivot, String fieldvalue, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = cacheClientTargetTableGetValidateBeforeCall(client, target, table, key, keys, sample, pivot, fieldvalue, limit, null);
        Type localVarReturnType = new TypeToken<CacheDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a specific cache table. (asynchronously)
     * Get information about a specific cache table.
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param table Table name (required)
     * @param key If you want a row of data to be returned, provide the partition key (optional)
     * @param keys Values for clustering keys. If the table has a composite key, provide the values in order. (optional)
     * @param sample return a sample of n rows from the table (optional)
     * @param pivot Would you like the data pivoted? (Only for CSV report) (optional)
     * @param fieldvalue If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)
     * @param limit If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTableGetAsync(String client, TargetEnum target, String table, String key, List<String> keys, Integer sample, Boolean pivot, String fieldvalue, Integer limit, final ApiCallback<CacheDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientTargetTableGetValidateBeforeCall(client, target, table, key, keys, sample, pivot, fieldvalue, limit, _callback);
        Type localVarReturnType = new TypeToken<CacheDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheClientTargetTablePost
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheTableDefinition  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTablePostCall(String client, TargetEnum target, CacheTableDefinition cacheTableDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cacheTableDefinition;

        // create path and map variables
        String localVarPath = "/cache/{client}/{target}/table"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheClientTargetTablePostValidateBeforeCall(String client, TargetEnum target, CacheTableDefinition cacheTableDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling cacheClientTargetTablePost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling cacheClientTargetTablePost(Async)");
        }

        return cacheClientTargetTablePostCall(client, target, cacheTableDefinition, _callback);

    }

    /**
     * Alter a cache table
     * Ensure that the cache table includes at least the set of columns requested
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheTableDefinition  (optional)
     * @return CacheChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheChangesResponse cacheClientTargetTablePost(String client, TargetEnum target, CacheTableDefinition cacheTableDefinition) throws ApiException {
        ApiResponse<CacheChangesResponse> localVarResp = cacheClientTargetTablePostWithHttpInfo(client, target, cacheTableDefinition);
        return localVarResp.getData();
    }

    /**
     * Alter a cache table
     * Ensure that the cache table includes at least the set of columns requested
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheTableDefinition  (optional)
     * @return ApiResponse&lt;CacheChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheChangesResponse> cacheClientTargetTablePostWithHttpInfo(String client, TargetEnum target, CacheTableDefinition cacheTableDefinition) throws ApiException {
        okhttp3.Call localVarCall = cacheClientTargetTablePostValidateBeforeCall(client, target, cacheTableDefinition, null);
        Type localVarReturnType = new TypeToken<CacheChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alter a cache table (asynchronously)
     * Ensure that the cache table includes at least the set of columns requested
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param cacheTableDefinition  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheClientTargetTablePostAsync(String client, TargetEnum target, CacheTableDefinition cacheTableDefinition, final ApiCallback<CacheChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheClientTargetTablePostValidateBeforeCall(client, target, cacheTableDefinition, _callback);
        Type localVarReturnType = new TypeToken<CacheChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
