/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.ResourceAndStatusResponse;
import com.alterian.jo.model.RuleGroup;
import com.alterian.jo.model.RuleGroupDestinationTarget;
import com.alterian.jo.model.RuleGroupListingResponse;
import com.alterian.jo.model.TargetEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RulegroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RulegroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RulegroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadRulegroupClientTargetRulegroupnameGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadRulegroupClientTargetRulegroupnameGetCall(String client, TargetEnum target, String rulegroupname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/download/rulegroup/{client}/{target}/{rulegroupname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadRulegroupClientTargetRulegroupnameGetValidateBeforeCall(String client, TargetEnum target, String rulegroupname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling downloadRulegroupClientTargetRulegroupnameGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling downloadRulegroupClientTargetRulegroupnameGet(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling downloadRulegroupClientTargetRulegroupnameGet(Async)");
        }

        return downloadRulegroupClientTargetRulegroupnameGetCall(client, target, rulegroupname, _callback);

    }

    /**
     * Download the rulegroup file (JSON)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the JSON file </td><td>  -  </td></tr>
     </table>
     */
    public File downloadRulegroupClientTargetRulegroupnameGet(String client, TargetEnum target, String rulegroupname) throws ApiException {
        ApiResponse<File> localVarResp = downloadRulegroupClientTargetRulegroupnameGetWithHttpInfo(client, target, rulegroupname);
        return localVarResp.getData();
    }

    /**
     * Download the rulegroup file (JSON)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the JSON file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadRulegroupClientTargetRulegroupnameGetWithHttpInfo(String client, TargetEnum target, String rulegroupname) throws ApiException {
        okhttp3.Call localVarCall = downloadRulegroupClientTargetRulegroupnameGetValidateBeforeCall(client, target, rulegroupname, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the rulegroup file (JSON) (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadRulegroupClientTargetRulegroupnameGetAsync(String client, TargetEnum target, String rulegroupname, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadRulegroupClientTargetRulegroupnameGetValidateBeforeCall(client, target, rulegroupname, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientDelete
     * @param client Client name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientDeleteCall(String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientDeleteValidateBeforeCall(String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientDelete(Async)");
        }

        return rulegroupClientDeleteCall(client, _callback);

    }

    /**
     * Delete all rule groups uploaded by this client.
     * 
     * @param client Client name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse rulegroupClientDelete(String client) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = rulegroupClientDeleteWithHttpInfo(client);
        return localVarResp.getData();
    }

    /**
     * Delete all rule groups uploaded by this client.
     * 
     * @param client Client name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> rulegroupClientDeleteWithHttpInfo(String client) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientDeleteValidateBeforeCall(client, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all rule groups uploaded by this client. (asynchronously)
     * 
     * @param client Client name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientDeleteAsync(String client, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientDeleteValidateBeforeCall(client, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientGet
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientGetCall(String client, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeproperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeproperties", includeproperties));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientGetValidateBeforeCall(String client, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientGet(Async)");
        }

        return rulegroupClientGetCall(client, from, to, includeproperties, allversions, _callback);

    }

    /**
     * Get details about all rule groups uploaded by a specific client
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @return RuleGroupListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleGroupListingResponse rulegroupClientGet(String client, Integer from, Integer to, Boolean includeproperties, Boolean allversions) throws ApiException {
        ApiResponse<RuleGroupListingResponse> localVarResp = rulegroupClientGetWithHttpInfo(client, from, to, includeproperties, allversions);
        return localVarResp.getData();
    }

    /**
     * Get details about all rule groups uploaded by a specific client
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @return ApiResponse&lt;RuleGroupListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleGroupListingResponse> rulegroupClientGetWithHttpInfo(String client, Integer from, Integer to, Boolean includeproperties, Boolean allversions) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientGetValidateBeforeCall(client, from, to, includeproperties, allversions, null);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all rule groups uploaded by a specific client (asynchronously)
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientGetAsync(String client, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback<RuleGroupListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientGetValidateBeforeCall(client, from, to, includeproperties, allversions, _callback);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetDelete
     * @param client Client name (required)
     * @param target Where rulegroup should be published. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetDeleteCall(String client, TargetEnum target, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetDeleteValidateBeforeCall(String client, TargetEnum target, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetDelete(Async)");
        }

        return rulegroupClientTargetDeleteCall(client, target, _callback);

    }

    /**
     * Delete all rule groups uploaded by this client in this target.
     * 
     * @param client Client name (required)
     * @param target Where rulegroup should be published. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse rulegroupClientTargetDelete(String client, TargetEnum target) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = rulegroupClientTargetDeleteWithHttpInfo(client, target);
        return localVarResp.getData();
    }

    /**
     * Delete all rule groups uploaded by this client in this target.
     * 
     * @param client Client name (required)
     * @param target Where rulegroup should be published. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> rulegroupClientTargetDeleteWithHttpInfo(String client, TargetEnum target) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetDeleteValidateBeforeCall(client, target, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all rule groups uploaded by this client in this target. (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Where rulegroup should be published. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetDeleteAsync(String client, TargetEnum target, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetDeleteValidateBeforeCall(client, target, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetGet
     * @param client Client name (required)
     * @param target Where rule group should be published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetGetCall(String client, TargetEnum target, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeproperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeproperties", includeproperties));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetGetValidateBeforeCall(String client, TargetEnum target, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetGet(Async)");
        }

        return rulegroupClientTargetGetCall(client, target, from, to, includeproperties, allversions, _callback);

    }

    /**
     * Get details about all rule groups uploaded by a specific client in a specific target
     * 
     * @param client Client name (required)
     * @param target Where rule group should be published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @return RuleGroupListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleGroupListingResponse rulegroupClientTargetGet(String client, TargetEnum target, Integer from, Integer to, Boolean includeproperties, Boolean allversions) throws ApiException {
        ApiResponse<RuleGroupListingResponse> localVarResp = rulegroupClientTargetGetWithHttpInfo(client, target, from, to, includeproperties, allversions);
        return localVarResp.getData();
    }

    /**
     * Get details about all rule groups uploaded by a specific client in a specific target
     * 
     * @param client Client name (required)
     * @param target Where rule group should be published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @return ApiResponse&lt;RuleGroupListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleGroupListingResponse> rulegroupClientTargetGetWithHttpInfo(String client, TargetEnum target, Integer from, Integer to, Boolean includeproperties, Boolean allversions) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetGetValidateBeforeCall(client, target, from, to, includeproperties, allversions, null);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all rule groups uploaded by a specific client in a specific target (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Where rule group should be published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetGetAsync(String client, TargetEnum target, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback<RuleGroupListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetGetValidateBeforeCall(client, target, from, to, includeproperties, allversions, _callback);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetRulegroupnameCopytoPost
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroupDestinationTarget  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameCopytoPostCall(String client, TargetEnum target, String rulegroupname, RuleGroupDestinationTarget ruleGroupDestinationTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleGroupDestinationTarget;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}/{rulegroupname}/copyto"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetRulegroupnameCopytoPostValidateBeforeCall(String client, TargetEnum target, String rulegroupname, RuleGroupDestinationTarget ruleGroupDestinationTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameCopytoPost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameCopytoPost(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameCopytoPost(Async)");
        }

        return rulegroupClientTargetRulegroupnameCopytoPostCall(client, target, rulegroupname, ruleGroupDestinationTarget, _callback);

    }

    /**
     * Copy this rule group to the given target.  Also replicates any missing rules
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroupDestinationTarget  (optional)
     * @return ResourceAndStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAndStatusResponse rulegroupClientTargetRulegroupnameCopytoPost(String client, TargetEnum target, String rulegroupname, RuleGroupDestinationTarget ruleGroupDestinationTarget) throws ApiException {
        ApiResponse<ResourceAndStatusResponse> localVarResp = rulegroupClientTargetRulegroupnameCopytoPostWithHttpInfo(client, target, rulegroupname, ruleGroupDestinationTarget);
        return localVarResp.getData();
    }

    /**
     * Copy this rule group to the given target.  Also replicates any missing rules
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroupDestinationTarget  (optional)
     * @return ApiResponse&lt;ResourceAndStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAndStatusResponse> rulegroupClientTargetRulegroupnameCopytoPostWithHttpInfo(String client, TargetEnum target, String rulegroupname, RuleGroupDestinationTarget ruleGroupDestinationTarget) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameCopytoPostValidateBeforeCall(client, target, rulegroupname, ruleGroupDestinationTarget, null);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy this rule group to the given target.  Also replicates any missing rules (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroupDestinationTarget  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameCopytoPostAsync(String client, TargetEnum target, String rulegroupname, RuleGroupDestinationTarget ruleGroupDestinationTarget, final ApiCallback<ResourceAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameCopytoPostValidateBeforeCall(client, target, rulegroupname, ruleGroupDestinationTarget, _callback);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetRulegroupnameDelete
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameDeleteCall(String client, TargetEnum target, String rulegroupname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}/{rulegroupname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetRulegroupnameDeleteValidateBeforeCall(String client, TargetEnum target, String rulegroupname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameDelete(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameDelete(Async)");
        }

        return rulegroupClientTargetRulegroupnameDeleteCall(client, target, rulegroupname, _callback);

    }

    /**
     * Delete all versions of a specific rulegroup.
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse rulegroupClientTargetRulegroupnameDelete(String client, TargetEnum target, String rulegroupname) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = rulegroupClientTargetRulegroupnameDeleteWithHttpInfo(client, target, rulegroupname);
        return localVarResp.getData();
    }

    /**
     * Delete all versions of a specific rulegroup.
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> rulegroupClientTargetRulegroupnameDeleteWithHttpInfo(String client, TargetEnum target, String rulegroupname) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameDeleteValidateBeforeCall(client, target, rulegroupname, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all versions of a specific rulegroup. (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameDeleteAsync(String client, TargetEnum target, String rulegroupname, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameDeleteValidateBeforeCall(client, target, rulegroupname, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetRulegroupnameGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameGetCall(String client, TargetEnum target, String rulegroupname, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}/{rulegroupname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeproperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeproperties", includeproperties));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetRulegroupnameGetValidateBeforeCall(String client, TargetEnum target, String rulegroupname, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameGet(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameGet(Async)");
        }

        return rulegroupClientTargetRulegroupnameGetCall(client, target, rulegroupname, from, to, includeproperties, allversions, _callback);

    }

    /**
     * Get details about all versions of a specified rulegroup
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @return RuleGroupListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleGroupListingResponse rulegroupClientTargetRulegroupnameGet(String client, TargetEnum target, String rulegroupname, Integer from, Integer to, Boolean includeproperties, Boolean allversions) throws ApiException {
        ApiResponse<RuleGroupListingResponse> localVarResp = rulegroupClientTargetRulegroupnameGetWithHttpInfo(client, target, rulegroupname, from, to, includeproperties, allversions);
        return localVarResp.getData();
    }

    /**
     * Get details about all versions of a specified rulegroup
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @return ApiResponse&lt;RuleGroupListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleGroupListingResponse> rulegroupClientTargetRulegroupnameGetWithHttpInfo(String client, TargetEnum target, String rulegroupname, Integer from, Integer to, Boolean includeproperties, Boolean allversions) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameGetValidateBeforeCall(client, target, rulegroupname, from, to, includeproperties, allversions, null);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all versions of a specified rulegroup (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameGetAsync(String client, TargetEnum target, String rulegroupname, Integer from, Integer to, Boolean includeproperties, Boolean allversions, final ApiCallback<RuleGroupListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameGetValidateBeforeCall(client, target, rulegroupname, from, to, includeproperties, allversions, _callback);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetRulegroupnamePost
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnamePostCall(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleGroup;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}/{rulegroupname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetRulegroupnamePostValidateBeforeCall(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnamePost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnamePost(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnamePost(Async)");
        }

        // verify the required parameter 'ruleGroup' is set
        if (ruleGroup == null) {
            throw new ApiException("Missing the required parameter 'ruleGroup' when calling rulegroupClientTargetRulegroupnamePost(Async)");
        }

        return rulegroupClientTargetRulegroupnamePostCall(client, target, rulegroupname, ruleGroup, _callback);

    }

    /**
     * Upload a file which defines the rulegroup. This will generate and return a version number number.
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @return ResourceAndStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAndStatusResponse rulegroupClientTargetRulegroupnamePost(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup) throws ApiException {
        ApiResponse<ResourceAndStatusResponse> localVarResp = rulegroupClientTargetRulegroupnamePostWithHttpInfo(client, target, rulegroupname, ruleGroup);
        return localVarResp.getData();
    }

    /**
     * Upload a file which defines the rulegroup. This will generate and return a version number number.
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @return ApiResponse&lt;ResourceAndStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAndStatusResponse> rulegroupClientTargetRulegroupnamePostWithHttpInfo(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnamePostValidateBeforeCall(client, target, rulegroupname, ruleGroup, null);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a file which defines the rulegroup. This will generate and return a version number number. (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnamePostAsync(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup, final ApiCallback<ResourceAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnamePostValidateBeforeCall(client, target, rulegroupname, ruleGroup, _callback);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetRulegroupnamePut
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnamePutCall(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleGroup;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}/{rulegroupname}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetRulegroupnamePutValidateBeforeCall(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnamePut(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnamePut(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnamePut(Async)");
        }

        // verify the required parameter 'ruleGroup' is set
        if (ruleGroup == null) {
            throw new ApiException("Missing the required parameter 'ruleGroup' when calling rulegroupClientTargetRulegroupnamePut(Async)");
        }

        return rulegroupClientTargetRulegroupnamePutCall(client, target, rulegroupname, ruleGroup, _callback);

    }

    /**
     * Update an existing rulegroup. This will generate and return a version number.
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @return ResourceAndStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAndStatusResponse rulegroupClientTargetRulegroupnamePut(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup) throws ApiException {
        ApiResponse<ResourceAndStatusResponse> localVarResp = rulegroupClientTargetRulegroupnamePutWithHttpInfo(client, target, rulegroupname, ruleGroup);
        return localVarResp.getData();
    }

    /**
     * Update an existing rulegroup. This will generate and return a version number.
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @return ApiResponse&lt;ResourceAndStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAndStatusResponse> rulegroupClientTargetRulegroupnamePutWithHttpInfo(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnamePutValidateBeforeCall(client, target, rulegroupname, ruleGroup, null);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing rulegroup. This will generate and return a version number. (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Possible values: dev | test | prod. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnamePutAsync(String client, TargetEnum target, String rulegroupname, RuleGroup ruleGroup, final ApiCallback<ResourceAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnamePutValidateBeforeCall(client, target, rulegroupname, ruleGroup, _callback);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetRulegroupnameVersionDelete
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameVersionDeleteCall(String client, TargetEnum target, String rulegroupname, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}/{rulegroupname}/{version}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetRulegroupnameVersionDeleteValidateBeforeCall(String client, TargetEnum target, String rulegroupname, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameVersionDelete(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameVersionDelete(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameVersionDelete(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling rulegroupClientTargetRulegroupnameVersionDelete(Async)");
        }

        return rulegroupClientTargetRulegroupnameVersionDeleteCall(client, target, rulegroupname, version, _callback);

    }

    /**
     * Delete a specific version of a specific rulegroup on the server.
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse rulegroupClientTargetRulegroupnameVersionDelete(String client, TargetEnum target, String rulegroupname, Integer version) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = rulegroupClientTargetRulegroupnameVersionDeleteWithHttpInfo(client, target, rulegroupname, version);
        return localVarResp.getData();
    }

    /**
     * Delete a specific version of a specific rulegroup on the server.
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> rulegroupClientTargetRulegroupnameVersionDeleteWithHttpInfo(String client, TargetEnum target, String rulegroupname, Integer version) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameVersionDeleteValidateBeforeCall(client, target, rulegroupname, version, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a specific version of a specific rulegroup on the server. (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameVersionDeleteAsync(String client, TargetEnum target, String rulegroupname, Integer version, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameVersionDeleteValidateBeforeCall(client, target, rulegroupname, version, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupClientTargetRulegroupnameVersionGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameVersionGetCall(String client, TargetEnum target, String rulegroupname, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup/{client}/{target}/{rulegroupname}/{version}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulegroupname" + "}", localVarApiClient.escapeString(rulegroupname.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupClientTargetRulegroupnameVersionGetValidateBeforeCall(String client, TargetEnum target, String rulegroupname, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameVersionGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameVersionGet(Async)");
        }

        // verify the required parameter 'rulegroupname' is set
        if (rulegroupname == null) {
            throw new ApiException("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameVersionGet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling rulegroupClientTargetRulegroupnameVersionGet(Async)");
        }

        return rulegroupClientTargetRulegroupnameVersionGetCall(client, target, rulegroupname, version, _callback);

    }

    /**
     * Get details about a specific version of a specific rulegroup for a specific client
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @return RuleGroupListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleGroupListingResponse rulegroupClientTargetRulegroupnameVersionGet(String client, TargetEnum target, String rulegroupname, Integer version) throws ApiException {
        ApiResponse<RuleGroupListingResponse> localVarResp = rulegroupClientTargetRulegroupnameVersionGetWithHttpInfo(client, target, rulegroupname, version);
        return localVarResp.getData();
    }

    /**
     * Get details about a specific version of a specific rulegroup for a specific client
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @return ApiResponse&lt;RuleGroupListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleGroupListingResponse> rulegroupClientTargetRulegroupnameVersionGetWithHttpInfo(String client, TargetEnum target, String rulegroupname, Integer version) throws ApiException {
        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameVersionGetValidateBeforeCall(client, target, rulegroupname, version, null);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about a specific version of a specific rulegroup for a specific client (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulegroupname The name of the rule group (required)
     * @param version The version of the rule group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupClientTargetRulegroupnameVersionGetAsync(String client, TargetEnum target, String rulegroupname, Integer version, final ApiCallback<RuleGroupListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupClientTargetRulegroupnameVersionGetValidateBeforeCall(client, target, rulegroupname, version, _callback);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupGetCall(Integer from, Integer to, Boolean includeproperties, Boolean allversions, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeproperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeproperties", includeproperties));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupGetValidateBeforeCall(Integer from, Integer to, Boolean includeproperties, Boolean allversions, List<String> iClients, final ApiCallback _callback) throws ApiException {
        return rulegroupGetCall(from, to, includeproperties, allversions, iClients, _callback);

    }

    /**
     * Get details about all rule groups on the server
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return RuleGroupListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleGroupListingResponse rulegroupGet(Integer from, Integer to, Boolean includeproperties, Boolean allversions, List<String> iClients) throws ApiException {
        ApiResponse<RuleGroupListingResponse> localVarResp = rulegroupGetWithHttpInfo(from, to, includeproperties, allversions, iClients);
        return localVarResp.getData();
    }

    /**
     * Get details about all rule groups on the server
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;RuleGroupListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleGroupListingResponse> rulegroupGetWithHttpInfo(Integer from, Integer to, Boolean includeproperties, Boolean allversions, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = rulegroupGetValidateBeforeCall(from, to, includeproperties, allversions, iClients, null);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about all rule groups on the server (asynchronously)
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param includeproperties Do we want all details of each rule group? (default is true). (optional)
     * @param allversions Do we want all versions of the file listed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegroupGetAsync(Integer from, Integer to, Boolean includeproperties, Boolean allversions, List<String> iClients, final ApiCallback<RuleGroupListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupGetValidateBeforeCall(from, to, includeproperties, allversions, iClients, _callback);
        Type localVarReturnType = new TypeToken<RuleGroupListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegroupPost
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rulegroupPostCall(RuleGroup ruleGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleGroup;

        // create path and map variables
        String localVarPath = "/rulegroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegroupPostValidateBeforeCall(RuleGroup ruleGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleGroup' is set
        if (ruleGroup == null) {
            throw new ApiException("Missing the required parameter 'ruleGroup' when calling rulegroupPost(Async)");
        }

        return rulegroupPostCall(ruleGroup, _callback);

    }

    /**
     * upload a file which defines the rulegroup. This will generate and return a version number.  Please use the   /rulegroup/client/target/name post version now.
     * 
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ModelApiResponse rulegroupPost(RuleGroup ruleGroup) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = rulegroupPostWithHttpInfo(ruleGroup);
        return localVarResp.getData();
    }

    /**
     * upload a file which defines the rulegroup. This will generate and return a version number.  Please use the   /rulegroup/client/target/name post version now.
     * 
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ModelApiResponse> rulegroupPostWithHttpInfo(RuleGroup ruleGroup) throws ApiException {
        okhttp3.Call localVarCall = rulegroupPostValidateBeforeCall(ruleGroup, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * upload a file which defines the rulegroup. This will generate and return a version number.  Please use the   /rulegroup/client/target/name post version now. (asynchronously)
     * 
     * @param ruleGroup A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rulegroupPostAsync(RuleGroup ruleGroup, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegroupPostValidateBeforeCall(ruleGroup, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
