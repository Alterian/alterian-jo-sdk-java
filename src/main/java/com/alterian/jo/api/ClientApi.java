/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.jo.model.Client;
import com.alterian.jo.model.ClientResponse;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.ResourceAndStatusResponse;
import com.alterian.jo.model.TargetEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clientClientAliasAliasNameDelete
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameDeleteCall(String client, String aliasName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}/alias/{aliasName}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "aliasName" + "}", localVarApiClient.escapeString(aliasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientAliasAliasNameDeleteValidateBeforeCall(String client, String aliasName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientAliasAliasNameDelete(Async)");
        }

        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling clientClientAliasAliasNameDelete(Async)");
        }

        return clientClientAliasAliasNameDeleteCall(client, aliasName, _callback);

    }

    /**
     * Deletes a specific alias from the client
     * 
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse clientClientAliasAliasNameDelete(String client, String aliasName) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientClientAliasAliasNameDeleteWithHttpInfo(client, aliasName);
        return localVarResp.getData();
    }

    /**
     * Deletes a specific alias from the client
     * 
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> clientClientAliasAliasNameDeleteWithHttpInfo(String client, String aliasName) throws ApiException {
        okhttp3.Call localVarCall = clientClientAliasAliasNameDeleteValidateBeforeCall(client, aliasName, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a specific alias from the client (asynchronously)
     * 
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameDeleteAsync(String client, String aliasName, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientAliasAliasNameDeleteValidateBeforeCall(client, aliasName, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientAliasAliasNameGet
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameGetCall(String client, String aliasName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}/alias/{aliasName}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "aliasName" + "}", localVarApiClient.escapeString(aliasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientAliasAliasNameGetValidateBeforeCall(String client, String aliasName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientAliasAliasNameGet(Async)");
        }

        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling clientClientAliasAliasNameGet(Async)");
        }

        return clientClientAliasAliasNameGetCall(client, aliasName, _callback);

    }

    /**
     * Returns back information about a specific alias
     * 
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse clientClientAliasAliasNameGet(String client, String aliasName) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientClientAliasAliasNameGetWithHttpInfo(client, aliasName);
        return localVarResp.getData();
    }

    /**
     * Returns back information about a specific alias
     * 
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> clientClientAliasAliasNameGetWithHttpInfo(String client, String aliasName) throws ApiException {
        okhttp3.Call localVarCall = clientClientAliasAliasNameGetValidateBeforeCall(client, aliasName, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back information about a specific alias (asynchronously)
     * 
     * @param client Client name (required)
     * @param aliasName The name of the alias (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameGetAsync(String client, String aliasName, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientAliasAliasNameGetValidateBeforeCall(client, aliasName, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientAliasAliasNameTargetRuleorgroupPost
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameTargetRuleorgroupPostCall(String client, String aliasName, TargetEnum target, String ruleorgroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}/alias/{aliasName}/{target}/{ruleorgroup}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "aliasName" + "}", localVarApiClient.escapeString(aliasName.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "ruleorgroup" + "}", localVarApiClient.escapeString(ruleorgroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientAliasAliasNameTargetRuleorgroupPostValidateBeforeCall(String client, String aliasName, TargetEnum target, String ruleorgroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientAliasAliasNameTargetRuleorgroupPost(Async)");
        }

        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling clientClientAliasAliasNameTargetRuleorgroupPost(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling clientClientAliasAliasNameTargetRuleorgroupPost(Async)");
        }

        // verify the required parameter 'ruleorgroup' is set
        if (ruleorgroup == null) {
            throw new ApiException("Missing the required parameter 'ruleorgroup' when calling clientClientAliasAliasNameTargetRuleorgroupPost(Async)");
        }

        return clientClientAliasAliasNameTargetRuleorgroupPostCall(client, aliasName, target, ruleorgroup, _callback);

    }

    /**
     * Creates or updates an alias
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse clientClientAliasAliasNameTargetRuleorgroupPost(String client, String aliasName, TargetEnum target, String ruleorgroup) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfo(client, aliasName, target, ruleorgroup);
        return localVarResp.getData();
    }

    /**
     * Creates or updates an alias
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> clientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfo(String client, String aliasName, TargetEnum target, String ruleorgroup) throws ApiException {
        okhttp3.Call localVarCall = clientClientAliasAliasNameTargetRuleorgroupPostValidateBeforeCall(client, aliasName, target, ruleorgroup, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates an alias (asynchronously)
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameTargetRuleorgroupPostAsync(String client, String aliasName, TargetEnum target, String ruleorgroup, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientAliasAliasNameTargetRuleorgroupPostValidateBeforeCall(client, aliasName, target, ruleorgroup, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientAliasAliasNameTargetRuleorgroupPut
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameTargetRuleorgroupPutCall(String client, String aliasName, TargetEnum target, String ruleorgroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}/alias/{aliasName}/{target}/{ruleorgroup}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "aliasName" + "}", localVarApiClient.escapeString(aliasName.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "ruleorgroup" + "}", localVarApiClient.escapeString(ruleorgroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientAliasAliasNameTargetRuleorgroupPutValidateBeforeCall(String client, String aliasName, TargetEnum target, String ruleorgroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientAliasAliasNameTargetRuleorgroupPut(Async)");
        }

        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling clientClientAliasAliasNameTargetRuleorgroupPut(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling clientClientAliasAliasNameTargetRuleorgroupPut(Async)");
        }

        // verify the required parameter 'ruleorgroup' is set
        if (ruleorgroup == null) {
            throw new ApiException("Missing the required parameter 'ruleorgroup' when calling clientClientAliasAliasNameTargetRuleorgroupPut(Async)");
        }

        return clientClientAliasAliasNameTargetRuleorgroupPutCall(client, aliasName, target, ruleorgroup, _callback);

    }

    /**
     * Create a new alias, must not exist.
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @return ResourceAndStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAndStatusResponse clientClientAliasAliasNameTargetRuleorgroupPut(String client, String aliasName, TargetEnum target, String ruleorgroup) throws ApiException {
        ApiResponse<ResourceAndStatusResponse> localVarResp = clientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfo(client, aliasName, target, ruleorgroup);
        return localVarResp.getData();
    }

    /**
     * Create a new alias, must not exist.
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @return ApiResponse&lt;ResourceAndStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAndStatusResponse> clientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfo(String client, String aliasName, TargetEnum target, String ruleorgroup) throws ApiException {
        okhttp3.Call localVarCall = clientClientAliasAliasNameTargetRuleorgroupPutValidateBeforeCall(client, aliasName, target, ruleorgroup, null);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new alias, must not exist. (asynchronously)
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param aliasName The name of the alias (required)
     * @param target Target - is where rule is published. (required)
     * @param ruleorgroup The name of the rule or rule group to which this alias should point (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasAliasNameTargetRuleorgroupPutAsync(String client, String aliasName, TargetEnum target, String ruleorgroup, final ApiCallback<ResourceAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientAliasAliasNameTargetRuleorgroupPutValidateBeforeCall(client, aliasName, target, ruleorgroup, _callback);
        Type localVarReturnType = new TypeToken<ResourceAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientAliasGet
     * @param client Client name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasGetCall(String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}/alias"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientAliasGetValidateBeforeCall(String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientAliasGet(Async)");
        }

        return clientClientAliasGetCall(client, _callback);

    }

    /**
     * Returns back all aliases which have been defined for a client
     * 
     * @param client Client name (required)
     * @return ClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClientResponse clientClientAliasGet(String client) throws ApiException {
        ApiResponse<ClientResponse> localVarResp = clientClientAliasGetWithHttpInfo(client);
        return localVarResp.getData();
    }

    /**
     * Returns back all aliases which have been defined for a client
     * 
     * @param client Client name (required)
     * @return ApiResponse&lt;ClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientResponse> clientClientAliasGetWithHttpInfo(String client) throws ApiException {
        okhttp3.Call localVarCall = clientClientAliasGetValidateBeforeCall(client, null);
        Type localVarReturnType = new TypeToken<ClientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back all aliases which have been defined for a client (asynchronously)
     * 
     * @param client Client name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientAliasGetAsync(String client, final ApiCallback<ClientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientAliasGetValidateBeforeCall(client, _callback);
        Type localVarReturnType = new TypeToken<ClientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientCopyDestinationPut
     * @param client The source client (required)
     * @param destination The new client name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientCopyDestinationPutCall(String client, String destination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}/copy/{destination}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "destination" + "}", localVarApiClient.escapeString(destination.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientCopyDestinationPutValidateBeforeCall(String client, String destination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientCopyDestinationPut(Async)");
        }

        return clientClientCopyDestinationPutCall(client, destination, _callback);

    }

    /**
     * Copy an existing client to a client with a new name
     * 
     * @param client The source client (required)
     * @param destination The new client name (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse clientClientCopyDestinationPut(String client, String destination) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientClientCopyDestinationPutWithHttpInfo(client, destination);
        return localVarResp.getData();
    }

    /**
     * Copy an existing client to a client with a new name
     * 
     * @param client The source client (required)
     * @param destination The new client name (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> clientClientCopyDestinationPutWithHttpInfo(String client, String destination) throws ApiException {
        okhttp3.Call localVarCall = clientClientCopyDestinationPutValidateBeforeCall(client, destination, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy an existing client to a client with a new name (asynchronously)
     * 
     * @param client The source client (required)
     * @param destination The new client name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientCopyDestinationPutAsync(String client, String destination, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientCopyDestinationPutValidateBeforeCall(client, destination, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientDelete
     * @param client Client name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientDeleteCall(String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientDeleteValidateBeforeCall(String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientDelete(Async)");
        }

        return clientClientDeleteCall(client, _callback);

    }

    /**
     * Delete all client files that have been uploaded to the server.
     * 
     * @param client Client name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse clientClientDelete(String client) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientClientDeleteWithHttpInfo(client);
        return localVarResp.getData();
    }

    /**
     * Delete all client files that have been uploaded to the server.
     * 
     * @param client Client name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> clientClientDeleteWithHttpInfo(String client) throws ApiException {
        okhttp3.Call localVarCall = clientClientDeleteValidateBeforeCall(client, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all client files that have been uploaded to the server. (asynchronously)
     * 
     * @param client Client name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientDeleteAsync(String client, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientDeleteValidateBeforeCall(client, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientGet
     * @param client client name, you can use * to return all clients to which your account has access (required)
     * @param aszip Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)
     * @param asdata If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientGetCall(String client, Boolean aszip, Boolean asdata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aszip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aszip", aszip));
        }

        if (asdata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asdata", asdata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientGetValidateBeforeCall(String client, Boolean aszip, Boolean asdata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientGet(Async)");
        }

        return clientClientGetCall(client, aszip, asdata, _callback);

    }

    /**
     * Returns extended details about a client.
     * 
     * @param client client name, you can use * to return all clients to which your account has access (required)
     * @param aszip Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)
     * @param asdata If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)
     * @return ClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClientResponse clientClientGet(String client, Boolean aszip, Boolean asdata) throws ApiException {
        ApiResponse<ClientResponse> localVarResp = clientClientGetWithHttpInfo(client, aszip, asdata);
        return localVarResp.getData();
    }

    /**
     * Returns extended details about a client.
     * 
     * @param client client name, you can use * to return all clients to which your account has access (required)
     * @param aszip Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)
     * @param asdata If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)
     * @return ApiResponse&lt;ClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientResponse> clientClientGetWithHttpInfo(String client, Boolean aszip, Boolean asdata) throws ApiException {
        okhttp3.Call localVarCall = clientClientGetValidateBeforeCall(client, aszip, asdata, null);
        Type localVarReturnType = new TypeToken<ClientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns extended details about a client. (asynchronously)
     * 
     * @param client client name, you can use * to return all clients to which your account has access (required)
     * @param aszip Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)
     * @param asdata If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientGetAsync(String client, Boolean aszip, Boolean asdata, final ApiCallback<ClientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientGetValidateBeforeCall(client, aszip, asdata, _callback);
        Type localVarReturnType = new TypeToken<ClientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientPost
     * @param client Client name (required)
     * @param client2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientPostCall(String client, Client client2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = client2;

        // create path and map variables
        String localVarPath = "/client/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientPostValidateBeforeCall(String client, Client client2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientPost(Async)");
        }

        return clientClientPostCall(client, client2, _callback);

    }

    /**
     * Updates a client&#39;s parameters
     * 
     * @param client Client name (required)
     * @param client2  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse clientClientPost(String client, Client client2) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientClientPostWithHttpInfo(client, client2);
        return localVarResp.getData();
    }

    /**
     * Updates a client&#39;s parameters
     * 
     * @param client Client name (required)
     * @param client2  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> clientClientPostWithHttpInfo(String client, Client client2) throws ApiException {
        okhttp3.Call localVarCall = clientClientPostValidateBeforeCall(client, client2, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a client&#39;s parameters (asynchronously)
     * 
     * @param client Client name (required)
     * @param client2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientPostAsync(String client, Client client2, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientPostValidateBeforeCall(client, client2, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientPut
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param client2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientPutCall(String client, Client client2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = client2;

        // create path and map variables
        String localVarPath = "/client/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientPutValidateBeforeCall(String client, Client client2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientClientPut(Async)");
        }

        return clientClientPutCall(client, client2, _callback);

    }

    /**
     * Create a new client.
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param client2  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse clientClientPut(String client, Client client2) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientClientPutWithHttpInfo(client, client2);
        return localVarResp.getData();
    }

    /**
     * Create a new client.
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param client2  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> clientClientPutWithHttpInfo(String client, Client client2) throws ApiException {
        okhttp3.Call localVarCall = clientClientPutValidateBeforeCall(client, client2, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new client. (asynchronously)
     * 
     * @param client Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long (required)
     * @param client2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientPutAsync(String client, Client client2, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientPutValidateBeforeCall(client, client2, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCopySourcePut
     * @param source Source client name (required)
     * @param destination The new client name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call clientCopySourcePutCall(String source, String destination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/copy/{source}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCopySourcePutValidateBeforeCall(String source, String destination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling clientCopySourcePut(Async)");
        }

        return clientCopySourcePutCall(source, destination, _callback);

    }

    /**
     * Copy an existing client to a client with a new name
     * 
     * @param source Source client name (required)
     * @param destination The new client name (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ModelApiResponse clientCopySourcePut(String source, String destination) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = clientCopySourcePutWithHttpInfo(source, destination);
        return localVarResp.getData();
    }

    /**
     * Copy an existing client to a client with a new name
     * 
     * @param source Source client name (required)
     * @param destination The new client name (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ModelApiResponse> clientCopySourcePutWithHttpInfo(String source, String destination) throws ApiException {
        okhttp3.Call localVarCall = clientCopySourcePutValidateBeforeCall(source, destination, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy an existing client to a client with a new name (asynchronously)
     * 
     * @param source Source client name (required)
     * @param destination The new client name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call clientCopySourcePutAsync(String source, String destination, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCopySourcePutValidateBeforeCall(source, destination, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return clientGetCall(_callback);

    }

    /**
     * Get a list of all clients that your login can access, and all permissions that you have
     * 
     * @return ClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClientResponse clientGet() throws ApiException {
        ApiResponse<ClientResponse> localVarResp = clientGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of all clients that your login can access, and all permissions that you have
     * 
     * @return ApiResponse&lt;ClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientResponse> clientGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = clientGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all clients that your login can access, and all permissions that you have (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientGetAsync(final ApiCallback<ClientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
