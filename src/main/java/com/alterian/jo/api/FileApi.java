/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.TargetEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fileClientGet
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientGetCall(String client, String searchText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileClientGetValidateBeforeCall(String client, String searchText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling fileClientGet(Async)");
        }

        return fileClientGetCall(client, searchText, _callback);

    }

    /**
     * Lists files
     * 
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse fileClientGet(String client, String searchText) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = fileClientGetWithHttpInfo(client, searchText);
        return localVarResp.getData();
    }

    /**
     * Lists files
     * 
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> fileClientGetWithHttpInfo(String client, String searchText) throws ApiException {
        okhttp3.Call localVarCall = fileClientGetValidateBeforeCall(client, searchText, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files (asynchronously)
     * 
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientGetAsync(String client, String searchText, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileClientGetValidateBeforeCall(client, searchText, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileClientTargetFilenameDelete
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetFilenameDeleteCall(TargetEnum target, String client, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{client}/{target}/{filename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileClientTargetFilenameDeleteValidateBeforeCall(TargetEnum target, String client, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling fileClientTargetFilenameDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling fileClientTargetFilenameDelete(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling fileClientTargetFilenameDelete(Async)");
        }

        return fileClientTargetFilenameDeleteCall(target, client, filename, _callback);

    }

    /**
     * Remove a file from the server
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public void fileClientTargetFilenameDelete(TargetEnum target, String client, String filename) throws ApiException {
        fileClientTargetFilenameDeleteWithHttpInfo(target, client, filename);
    }

    /**
     * Remove a file from the server
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileClientTargetFilenameDeleteWithHttpInfo(TargetEnum target, String client, String filename) throws ApiException {
        okhttp3.Call localVarCall = fileClientTargetFilenameDeleteValidateBeforeCall(target, client, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a file from the server (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetFilenameDeleteAsync(TargetEnum target, String client, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileClientTargetFilenameDeleteValidateBeforeCall(target, client, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileClientTargetFilenameGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetFilenameGetCall(TargetEnum target, String client, String filename, String searchText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{client}/{target}/{filename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileClientTargetFilenameGetValidateBeforeCall(TargetEnum target, String client, String filename, String searchText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling fileClientTargetFilenameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling fileClientTargetFilenameGet(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling fileClientTargetFilenameGet(Async)");
        }

        return fileClientTargetFilenameGetCall(target, client, filename, searchText, _callback);

    }

    /**
     * Download a file from the server
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public void fileClientTargetFilenameGet(TargetEnum target, String client, String filename, String searchText) throws ApiException {
        fileClientTargetFilenameGetWithHttpInfo(target, client, filename, searchText);
    }

    /**
     * Download a file from the server
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileClientTargetFilenameGetWithHttpInfo(TargetEnum target, String client, String filename, String searchText) throws ApiException {
        okhttp3.Call localVarCall = fileClientTargetFilenameGetValidateBeforeCall(target, client, filename, searchText, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download a file from the server (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param filename file name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetFilenameGetAsync(TargetEnum target, String client, String filename, String searchText, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileClientTargetFilenameGetValidateBeforeCall(target, client, filename, searchText, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileClientTargetFilenamePost
     * @param target Target for the file (required)
     * @param client client name (required)
     * @param filename file name (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetFilenamePostCall(TargetEnum target, String client, String filename, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{client}/{target}/{filename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileClientTargetFilenamePostValidateBeforeCall(TargetEnum target, String client, String filename, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling fileClientTargetFilenamePost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling fileClientTargetFilenamePost(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling fileClientTargetFilenamePost(Async)");
        }

        return fileClientTargetFilenamePostCall(target, client, filename, _file, _callback);

    }

    /**
     * Upload a file to the server
     * 
     * @param target Target for the file (required)
     * @param client client name (required)
     * @param filename file name (required)
     * @param _file  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public void fileClientTargetFilenamePost(TargetEnum target, String client, String filename, File _file) throws ApiException {
        fileClientTargetFilenamePostWithHttpInfo(target, client, filename, _file);
    }

    /**
     * Upload a file to the server
     * 
     * @param target Target for the file (required)
     * @param client client name (required)
     * @param filename file name (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileClientTargetFilenamePostWithHttpInfo(TargetEnum target, String client, String filename, File _file) throws ApiException {
        okhttp3.Call localVarCall = fileClientTargetFilenamePostValidateBeforeCall(target, client, filename, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a file to the server (asynchronously)
     * 
     * @param target Target for the file (required)
     * @param client client name (required)
     * @param filename file name (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary stream containing the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetFilenamePostAsync(TargetEnum target, String client, String filename, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileClientTargetFilenamePostValidateBeforeCall(target, client, filename, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileClientTargetGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetGetCall(TargetEnum target, String client, String searchText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{client}/{target}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileClientTargetGetValidateBeforeCall(TargetEnum target, String client, String searchText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling fileClientTargetGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling fileClientTargetGet(Async)");
        }

        return fileClientTargetGetCall(target, client, searchText, _callback);

    }

    /**
     * Lists files
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse fileClientTargetGet(TargetEnum target, String client, String searchText) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = fileClientTargetGetWithHttpInfo(target, client, searchText);
        return localVarResp.getData();
    }

    /**
     * Lists files
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> fileClientTargetGetWithHttpInfo(TargetEnum target, String client, String searchText) throws ApiException {
        okhttp3.Call localVarCall = fileClientTargetGetValidateBeforeCall(target, client, searchText, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param searchText Filter results to those which contain this text (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileClientTargetGetAsync(TargetEnum target, String client, String searchText, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileClientTargetGetValidateBeforeCall(target, client, searchText, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
