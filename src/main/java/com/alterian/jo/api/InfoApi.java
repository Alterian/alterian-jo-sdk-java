/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.jo.model.AuditLogReportResponse;
import com.alterian.jo.model.CacheDataReportResponse;
import com.alterian.jo.model.CacheDirectionEnum;
import com.alterian.jo.model.CacheUnusedColumnsReportResponse;
import com.alterian.jo.model.ClientAccessReportResponse;
import com.alterian.jo.model.ConsistencyReportResponse;
import com.alterian.jo.model.ConversationUsageReportResponse;
import com.alterian.jo.model.CsvEnum;
import com.alterian.jo.model.FieldUsageReportResponse;
import com.alterian.jo.model.FlowReportResponse;
import com.alterian.jo.model.GlobalParameterReportResponse;
import com.alterian.jo.model.InternalRuleCallReportResponse;
import com.alterian.jo.model.Logged404sReportResponse;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.ResourceExistsReportResponse;
import com.alterian.jo.model.RuleComplexityReportResponse;
import com.alterian.jo.model.SnoozeReportResponse;
import com.alterian.jo.model.StepTypeStatisticsReportResponse;
import com.alterian.jo.model.StepTypeUsageReportResponse;
import com.alterian.jo.model.StepUsageReportResponse;
import com.alterian.jo.model.TargetEnum;
import com.alterian.jo.model.TemplateColumnReportResponse;
import com.alterian.jo.model.TemplateInputReportResponse;
import com.alterian.jo.model.TemplateUsageReportResponse;
import com.alterian.jo.model.TemplateValidityReportResponse;
import com.alterian.jo.model.Timeseries;
import com.alterian.jo.model.TokenUseReportResponse;
import com.alterian.jo.model.WorkerThreadUsageReportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InfoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for infoAuditlogClientGet
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoAuditlogClientGetCall(String client, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/auditlog/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoAuditlogClientGetValidateBeforeCall(String client, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoAuditlogClientGet(Async)");
        }

        return infoAuditlogClientGetCall(client, from, to, target, format, _callback);

    }

    /**
     * Get audit log report
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return AuditLogReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuditLogReportResponse infoAuditlogClientGet(String client, Integer from, Integer to, TargetEnum target, CsvEnum format) throws ApiException {
        ApiResponse<AuditLogReportResponse> localVarResp = infoAuditlogClientGetWithHttpInfo(client, from, to, target, format);
        return localVarResp.getData();
    }

    /**
     * Get audit log report
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;AuditLogReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditLogReportResponse> infoAuditlogClientGetWithHttpInfo(String client, Integer from, Integer to, TargetEnum target, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoAuditlogClientGetValidateBeforeCall(client, from, to, target, format, null);
        Type localVarReturnType = new TypeToken<AuditLogReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get audit log report (asynchronously)
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoAuditlogClientGetAsync(String client, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback<AuditLogReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoAuditlogClientGetValidateBeforeCall(client, from, to, target, format, _callback);
        Type localVarReturnType = new TypeToken<AuditLogReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoCachedataClientGet
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param rulename Filter for specific rule name (optional)
     * @param cachedirection Get only cache read or writes (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoCachedataClientGetCall(String client, Integer from, Integer to, TargetEnum target, String rulename, CacheDirectionEnum cachedirection, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/cachedata/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (rulename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rulename", rulename));
        }

        if (cachedirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cachedirection", cachedirection));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoCachedataClientGetValidateBeforeCall(String client, Integer from, Integer to, TargetEnum target, String rulename, CacheDirectionEnum cachedirection, CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoCachedataClientGetCall(client, from, to, target, rulename, cachedirection, format, _callback);

    }

    /**
     * Get cache data report
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param rulename Filter for specific rule name (optional)
     * @param cachedirection Get only cache read or writes (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return CacheDataReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheDataReportResponse infoCachedataClientGet(String client, Integer from, Integer to, TargetEnum target, String rulename, CacheDirectionEnum cachedirection, CsvEnum format) throws ApiException {
        ApiResponse<CacheDataReportResponse> localVarResp = infoCachedataClientGetWithHttpInfo(client, from, to, target, rulename, cachedirection, format);
        return localVarResp.getData();
    }

    /**
     * Get cache data report
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param rulename Filter for specific rule name (optional)
     * @param cachedirection Get only cache read or writes (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;CacheDataReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheDataReportResponse> infoCachedataClientGetWithHttpInfo(String client, Integer from, Integer to, TargetEnum target, String rulename, CacheDirectionEnum cachedirection, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoCachedataClientGetValidateBeforeCall(client, from, to, target, rulename, cachedirection, format, null);
        Type localVarReturnType = new TypeToken<CacheDataReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cache data report (asynchronously)
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param rulename Filter for specific rule name (optional)
     * @param cachedirection Get only cache read or writes (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoCachedataClientGetAsync(String client, Integer from, Integer to, TargetEnum target, String rulename, CacheDirectionEnum cachedirection, CsvEnum format, final ApiCallback<CacheDataReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoCachedataClientGetValidateBeforeCall(client, from, to, target, rulename, cachedirection, format, _callback);
        Type localVarReturnType = new TypeToken<CacheDataReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoCacheunusedcolumnsClientGet
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoCacheunusedcolumnsClientGetCall(String client, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/cacheunusedcolumns/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoCacheunusedcolumnsClientGetValidateBeforeCall(String client, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoCacheunusedcolumnsClientGet(Async)");
        }

        return infoCacheunusedcolumnsClientGetCall(client, from, to, target, format, _callback);

    }

    /**
     * Get a report on all the cache columns that are no longer used by any rules
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return CacheUnusedColumnsReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CacheUnusedColumnsReportResponse infoCacheunusedcolumnsClientGet(String client, Integer from, Integer to, TargetEnum target, CsvEnum format) throws ApiException {
        ApiResponse<CacheUnusedColumnsReportResponse> localVarResp = infoCacheunusedcolumnsClientGetWithHttpInfo(client, from, to, target, format);
        return localVarResp.getData();
    }

    /**
     * Get a report on all the cache columns that are no longer used by any rules
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;CacheUnusedColumnsReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheUnusedColumnsReportResponse> infoCacheunusedcolumnsClientGetWithHttpInfo(String client, Integer from, Integer to, TargetEnum target, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoCacheunusedcolumnsClientGetValidateBeforeCall(client, from, to, target, format, null);
        Type localVarReturnType = new TypeToken<CacheUnusedColumnsReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a report on all the cache columns that are no longer used by any rules (asynchronously)
     * 
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoCacheunusedcolumnsClientGetAsync(String client, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback<CacheUnusedColumnsReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoCacheunusedcolumnsClientGetValidateBeforeCall(client, from, to, target, format, _callback);
        Type localVarReturnType = new TypeToken<CacheUnusedColumnsReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoClientaccessreportClientGet
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param includeClientAll Should users with access to all clients be included (optional, default to true)
     * @param includePermissionAll Should users with permission ALL be included (optional, default to true)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoClientaccessreportClientGetCall(String client, Boolean includeClientAll, Boolean includePermissionAll, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/clientaccessreport/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeClientAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeClientAll", includeClientAll));
        }

        if (includePermissionAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionAll", includePermissionAll));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoClientaccessreportClientGetValidateBeforeCall(String client, Boolean includeClientAll, Boolean includePermissionAll, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoClientaccessreportClientGet(Async)");
        }

        return infoClientaccessreportClientGetCall(client, includeClientAll, includePermissionAll, format, _callback);

    }

    /**
     * Report on the users able to access given client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param includeClientAll Should users with access to all clients be included (optional, default to true)
     * @param includePermissionAll Should users with permission ALL be included (optional, default to true)
     * @param format If you want CSV, enter csv here (optional)
     * @return ClientAccessReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClientAccessReportResponse infoClientaccessreportClientGet(String client, Boolean includeClientAll, Boolean includePermissionAll, CsvEnum format) throws ApiException {
        ApiResponse<ClientAccessReportResponse> localVarResp = infoClientaccessreportClientGetWithHttpInfo(client, includeClientAll, includePermissionAll, format);
        return localVarResp.getData();
    }

    /**
     * Report on the users able to access given client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param includeClientAll Should users with access to all clients be included (optional, default to true)
     * @param includePermissionAll Should users with permission ALL be included (optional, default to true)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;ClientAccessReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientAccessReportResponse> infoClientaccessreportClientGetWithHttpInfo(String client, Boolean includeClientAll, Boolean includePermissionAll, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoClientaccessreportClientGetValidateBeforeCall(client, includeClientAll, includePermissionAll, format, null);
        Type localVarReturnType = new TypeToken<ClientAccessReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report on the users able to access given client (asynchronously)
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param includeClientAll Should users with access to all clients be included (optional, default to true)
     * @param includePermissionAll Should users with permission ALL be included (optional, default to true)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoClientaccessreportClientGetAsync(String client, Boolean includeClientAll, Boolean includePermissionAll, CsvEnum format, final ApiCallback<ClientAccessReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoClientaccessreportClientGetValidateBeforeCall(client, includeClientAll, includePermissionAll, format, _callback);
        Type localVarReturnType = new TypeToken<ClientAccessReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoConsistencyreportGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoConsistencyreportGetCall(Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/consistencyreport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoConsistencyreportGetValidateBeforeCall(Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoConsistencyreportGetCall(from, to, format, _callback);

    }

    /**
     * Get the consistency report
     * Compares this nodes resources with other nodes to see if node has latest information
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ConsistencyReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConsistencyReportResponse infoConsistencyreportGet(Integer from, Integer to, CsvEnum format) throws ApiException {
        ApiResponse<ConsistencyReportResponse> localVarResp = infoConsistencyreportGetWithHttpInfo(from, to, format);
        return localVarResp.getData();
    }

    /**
     * Get the consistency report
     * Compares this nodes resources with other nodes to see if node has latest information
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;ConsistencyReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsistencyReportResponse> infoConsistencyreportGetWithHttpInfo(Integer from, Integer to, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoConsistencyreportGetValidateBeforeCall(from, to, format, null);
        Type localVarReturnType = new TypeToken<ConsistencyReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the consistency report (asynchronously)
     * Compares this nodes resources with other nodes to see if node has latest information
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoConsistencyreportGetAsync(Integer from, Integer to, CsvEnum format, final ApiCallback<ConsistencyReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoConsistencyreportGetValidateBeforeCall(from, to, format, _callback);
        Type localVarReturnType = new TypeToken<ConsistencyReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoConversationusagereportClientTimeseriesGet
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param timeseries Report on either the last 60 minutes, the last 48 hours or the last 60 days (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoConversationusagereportClientTimeseriesGetCall(String client, Timeseries timeseries, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/conversationusagereport/{client}/{timeseries}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "timeseries" + "}", localVarApiClient.escapeString(timeseries.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoConversationusagereportClientTimeseriesGetValidateBeforeCall(String client, Timeseries timeseries, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoConversationusagereportClientTimeseriesGet(Async)");
        }

        // verify the required parameter 'timeseries' is set
        if (timeseries == null) {
            throw new ApiException("Missing the required parameter 'timeseries' when calling infoConversationusagereportClientTimeseriesGet(Async)");
        }

        return infoConversationusagereportClientTimeseriesGetCall(client, timeseries, format, _callback);

    }

    /**
     * Report on the conversation usage by a specific client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param timeseries Report on either the last 60 minutes, the last 48 hours or the last 60 days (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return ConversationUsageReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationUsageReportResponse infoConversationusagereportClientTimeseriesGet(String client, Timeseries timeseries, CsvEnum format) throws ApiException {
        ApiResponse<ConversationUsageReportResponse> localVarResp = infoConversationusagereportClientTimeseriesGetWithHttpInfo(client, timeseries, format);
        return localVarResp.getData();
    }

    /**
     * Report on the conversation usage by a specific client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param timeseries Report on either the last 60 minutes, the last 48 hours or the last 60 days (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;ConversationUsageReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationUsageReportResponse> infoConversationusagereportClientTimeseriesGetWithHttpInfo(String client, Timeseries timeseries, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoConversationusagereportClientTimeseriesGetValidateBeforeCall(client, timeseries, format, null);
        Type localVarReturnType = new TypeToken<ConversationUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report on the conversation usage by a specific client (asynchronously)
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param timeseries Report on either the last 60 minutes, the last 48 hours or the last 60 days (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoConversationusagereportClientTimeseriesGetAsync(String client, Timeseries timeseries, CsvEnum format, final ApiCallback<ConversationUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoConversationusagereportClientTimeseriesGetValidateBeforeCall(client, timeseries, format, _callback);
        Type localVarReturnType = new TypeToken<ConversationUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoFieldusageTargetClientRulenameGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param mergefields Should fields that have been renamed be merged together? (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoFieldusageTargetClientRulenameGetCall(TargetEnum target, String client, String rulename, Integer from, Integer to, CsvEnum format, Boolean mergefields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/fieldusage/{target}/{client}/{rulename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (mergefields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mergefields", mergefields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoFieldusageTargetClientRulenameGetValidateBeforeCall(TargetEnum target, String client, String rulename, Integer from, Integer to, CsvEnum format, Boolean mergefields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling infoFieldusageTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoFieldusageTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling infoFieldusageTargetClientRulenameGet(Async)");
        }

        return infoFieldusageTargetClientRulenameGetCall(target, client, rulename, from, to, format, mergefields, _callback);

    }

    /**
     * Report on how fields are created, read and written within a rule
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param mergefields Should fields that have been renamed be merged together? (optional, default to false)
     * @return FieldUsageReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FieldUsageReportResponse infoFieldusageTargetClientRulenameGet(TargetEnum target, String client, String rulename, Integer from, Integer to, CsvEnum format, Boolean mergefields) throws ApiException {
        ApiResponse<FieldUsageReportResponse> localVarResp = infoFieldusageTargetClientRulenameGetWithHttpInfo(target, client, rulename, from, to, format, mergefields);
        return localVarResp.getData();
    }

    /**
     * Report on how fields are created, read and written within a rule
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param mergefields Should fields that have been renamed be merged together? (optional, default to false)
     * @return ApiResponse&lt;FieldUsageReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FieldUsageReportResponse> infoFieldusageTargetClientRulenameGetWithHttpInfo(TargetEnum target, String client, String rulename, Integer from, Integer to, CsvEnum format, Boolean mergefields) throws ApiException {
        okhttp3.Call localVarCall = infoFieldusageTargetClientRulenameGetValidateBeforeCall(target, client, rulename, from, to, format, mergefields, null);
        Type localVarReturnType = new TypeToken<FieldUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report on how fields are created, read and written within a rule (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param mergefields Should fields that have been renamed be merged together? (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoFieldusageTargetClientRulenameGetAsync(TargetEnum target, String client, String rulename, Integer from, Integer to, CsvEnum format, Boolean mergefields, final ApiCallback<FieldUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoFieldusageTargetClientRulenameGetValidateBeforeCall(target, client, rulename, from, to, format, mergefields, _callback);
        Type localVarReturnType = new TypeToken<FieldUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoFlowTargetClientRulenameGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoFlowTargetClientRulenameGetCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/flow/{target}/{client}/{rulename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoFlowTargetClientRulenameGetValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling infoFlowTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoFlowTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling infoFlowTargetClientRulenameGet(Async)");
        }

        return infoFlowTargetClientRulenameGetCall(target, client, rulename, _callback);

    }

    /**
     * Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return FlowReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FlowReportResponse infoFlowTargetClientRulenameGet(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<FlowReportResponse> localVarResp = infoFlowTargetClientRulenameGetWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;FlowReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowReportResponse> infoFlowTargetClientRulenameGetWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = infoFlowTargetClientRulenameGetValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<FlowReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoFlowTargetClientRulenameGetAsync(TargetEnum target, String client, String rulename, final ApiCallback<FlowReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoFlowTargetClientRulenameGetValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<FlowReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoGlobalparamreportClientGet
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get the report for a specific parameter&#39;s value (optional)
     * @param onlyGlobalParameters Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)
     * @param includeParameterDetails When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoGlobalparamreportClientGetCall(String client, Integer from, Integer to, String parameterName, String parameterValue, Boolean onlyGlobalParameters, Boolean includeParameterDetails, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/globalparamreport/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (parameterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterName", parameterName));
        }

        if (parameterValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterValue", parameterValue));
        }

        if (onlyGlobalParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyGlobalParameters", onlyGlobalParameters));
        }

        if (includeParameterDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParameterDetails", includeParameterDetails));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoGlobalparamreportClientGetValidateBeforeCall(String client, Integer from, Integer to, String parameterName, String parameterValue, Boolean onlyGlobalParameters, Boolean includeParameterDetails, CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoGlobalparamreportClientGetCall(client, from, to, parameterName, parameterValue, onlyGlobalParameters, includeParameterDetails, format, _callback);

    }

    /**
     * Get report on global parameters
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get the report for a specific parameter&#39;s value (optional)
     * @param onlyGlobalParameters Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)
     * @param includeParameterDetails When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return GlobalParameterReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GlobalParameterReportResponse infoGlobalparamreportClientGet(String client, Integer from, Integer to, String parameterName, String parameterValue, Boolean onlyGlobalParameters, Boolean includeParameterDetails, CsvEnum format) throws ApiException {
        ApiResponse<GlobalParameterReportResponse> localVarResp = infoGlobalparamreportClientGetWithHttpInfo(client, from, to, parameterName, parameterValue, onlyGlobalParameters, includeParameterDetails, format);
        return localVarResp.getData();
    }

    /**
     * Get report on global parameters
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get the report for a specific parameter&#39;s value (optional)
     * @param onlyGlobalParameters Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)
     * @param includeParameterDetails When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;GlobalParameterReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalParameterReportResponse> infoGlobalparamreportClientGetWithHttpInfo(String client, Integer from, Integer to, String parameterName, String parameterValue, Boolean onlyGlobalParameters, Boolean includeParameterDetails, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoGlobalparamreportClientGetValidateBeforeCall(client, from, to, parameterName, parameterValue, onlyGlobalParameters, includeParameterDetails, format, null);
        Type localVarReturnType = new TypeToken<GlobalParameterReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get report on global parameters (asynchronously)
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get the report for a specific parameter&#39;s value (optional)
     * @param onlyGlobalParameters Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)
     * @param includeParameterDetails When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoGlobalparamreportClientGetAsync(String client, Integer from, Integer to, String parameterName, String parameterValue, Boolean onlyGlobalParameters, Boolean includeParameterDetails, CsvEnum format, final ApiCallback<GlobalParameterReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoGlobalparamreportClientGetValidateBeforeCall(client, from, to, parameterName, parameterValue, onlyGlobalParameters, includeParameterDetails, format, _callback);
        Type localVarReturnType = new TypeToken<GlobalParameterReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoInternalrulecallreportClientTargetRulenameGet
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulename Rule name (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoInternalrulecallreportClientTargetRulenameGetCall(String client, TargetEnum target, String rulename, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/internalrulecallreport/{client}/{target}/{rulename}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoInternalrulecallreportClientTargetRulenameGetValidateBeforeCall(String client, TargetEnum target, String rulename, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoInternalrulecallreportClientTargetRulenameGet(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling infoInternalrulecallreportClientTargetRulenameGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling infoInternalrulecallreportClientTargetRulenameGet(Async)");
        }

        return infoInternalrulecallreportClientTargetRulenameGetCall(client, target, rulename, format, _callback);

    }

    /**
     * For a given rule, find all the rules that call this rule internally
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulename Rule name (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return InternalRuleCallReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InternalRuleCallReportResponse infoInternalrulecallreportClientTargetRulenameGet(String client, TargetEnum target, String rulename, CsvEnum format) throws ApiException {
        ApiResponse<InternalRuleCallReportResponse> localVarResp = infoInternalrulecallreportClientTargetRulenameGetWithHttpInfo(client, target, rulename, format);
        return localVarResp.getData();
    }

    /**
     * For a given rule, find all the rules that call this rule internally
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulename Rule name (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;InternalRuleCallReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InternalRuleCallReportResponse> infoInternalrulecallreportClientTargetRulenameGetWithHttpInfo(String client, TargetEnum target, String rulename, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoInternalrulecallreportClientTargetRulenameGetValidateBeforeCall(client, target, rulename, format, null);
        Type localVarReturnType = new TypeToken<InternalRuleCallReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * For a given rule, find all the rules that call this rule internally (asynchronously)
     * 
     * @param client Client name (required)
     * @param target Target - is where rule is published. (required)
     * @param rulename Rule name (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoInternalrulecallreportClientTargetRulenameGetAsync(String client, TargetEnum target, String rulename, CsvEnum format, final ApiCallback<InternalRuleCallReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoInternalrulecallreportClientTargetRulenameGetValidateBeforeCall(client, target, rulename, format, _callback);
        Type localVarReturnType = new TypeToken<InternalRuleCallReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoLogged404sClientGet
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param limit Limit the number of results returned. By default set to 100 when not provided. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoLogged404sClientGetCall(String client, Integer from, Integer to, Integer limit, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/logged404s/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoLogged404sClientGetValidateBeforeCall(String client, Integer from, Integer to, Integer limit, CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoLogged404sClientGetCall(client, from, to, limit, format, _callback);

    }

    /**
     * Get report on logged 404 errors
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param limit Limit the number of results returned. By default set to 100 when not provided. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return Logged404sReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Logged404sReportResponse infoLogged404sClientGet(String client, Integer from, Integer to, Integer limit, CsvEnum format) throws ApiException {
        ApiResponse<Logged404sReportResponse> localVarResp = infoLogged404sClientGetWithHttpInfo(client, from, to, limit, format);
        return localVarResp.getData();
    }

    /**
     * Get report on logged 404 errors
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param limit Limit the number of results returned. By default set to 100 when not provided. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;Logged404sReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Logged404sReportResponse> infoLogged404sClientGetWithHttpInfo(String client, Integer from, Integer to, Integer limit, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoLogged404sClientGetValidateBeforeCall(client, from, to, limit, format, null);
        Type localVarReturnType = new TypeToken<Logged404sReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get report on logged 404 errors (asynchronously)
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param limit Limit the number of results returned. By default set to 100 when not provided. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoLogged404sClientGetAsync(String client, Integer from, Integer to, Integer limit, CsvEnum format, final ApiCallback<Logged404sReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoLogged404sClientGetValidateBeforeCall(client, from, to, limit, format, _callback);
        Type localVarReturnType = new TypeToken<Logged404sReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoResourceexistsreportPost
     * @param requestBody A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoResourceexistsreportPostCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/info/resourceexistsreport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoResourceexistsreportPostValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling infoResourceexistsreportPost(Async)");
        }

        return infoResourceexistsreportPostCall(requestBody, _callback);

    }

    /**
     * Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user.
     * 
     * @param requestBody A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup. (required)
     * @return ResourceExistsReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceExistsReportResponse infoResourceexistsreportPost(List<String> requestBody) throws ApiException {
        ApiResponse<ResourceExistsReportResponse> localVarResp = infoResourceexistsreportPostWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user.
     * 
     * @param requestBody A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup. (required)
     * @return ApiResponse&lt;ResourceExistsReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceExistsReportResponse> infoResourceexistsreportPostWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = infoResourceexistsreportPostValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResourceExistsReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user. (asynchronously)
     * 
     * @param requestBody A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoResourceexistsreportPostAsync(List<String> requestBody, final ApiCallback<ResourceExistsReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoResourceexistsreportPostValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceExistsReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoRulecomplexityreportClientGet
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoRulecomplexityreportClientGetCall(String client, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/rulecomplexityreport/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoRulecomplexityreportClientGetValidateBeforeCall(String client, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoRulecomplexityreportClientGet(Async)");
        }

        return infoRulecomplexityreportClientGetCall(client, target, format, _callback);

    }

    /**
     * Report on the complexity of the various rules for a client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return RuleComplexityReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleComplexityReportResponse infoRulecomplexityreportClientGet(String client, TargetEnum target, CsvEnum format) throws ApiException {
        ApiResponse<RuleComplexityReportResponse> localVarResp = infoRulecomplexityreportClientGetWithHttpInfo(client, target, format);
        return localVarResp.getData();
    }

    /**
     * Report on the complexity of the various rules for a client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;RuleComplexityReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleComplexityReportResponse> infoRulecomplexityreportClientGetWithHttpInfo(String client, TargetEnum target, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoRulecomplexityreportClientGetValidateBeforeCall(client, target, format, null);
        Type localVarReturnType = new TypeToken<RuleComplexityReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report on the complexity of the various rules for a client (asynchronously)
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoRulecomplexityreportClientGetAsync(String client, TargetEnum target, CsvEnum format, final ApiCallback<RuleComplexityReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoRulecomplexityreportClientGetValidateBeforeCall(client, target, format, _callback);
        Type localVarReturnType = new TypeToken<RuleComplexityReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoSnoozeGet
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSnoozeGetCall(TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/snooze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoSnoozeGetValidateBeforeCall(TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoSnoozeGetCall(target, format, _callback);

    }

    /**
     * Report on whether rules can be snoozed
     * 
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return SnoozeReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SnoozeReportResponse infoSnoozeGet(TargetEnum target, CsvEnum format) throws ApiException {
        ApiResponse<SnoozeReportResponse> localVarResp = infoSnoozeGetWithHttpInfo(target, format);
        return localVarResp.getData();
    }

    /**
     * Report on whether rules can be snoozed
     * 
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;SnoozeReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnoozeReportResponse> infoSnoozeGetWithHttpInfo(TargetEnum target, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoSnoozeGetValidateBeforeCall(target, format, null);
        Type localVarReturnType = new TypeToken<SnoozeReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report on whether rules can be snoozed (asynchronously)
     * 
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSnoozeGetAsync(TargetEnum target, CsvEnum format, final ApiCallback<SnoozeReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoSnoozeGetValidateBeforeCall(target, format, _callback);
        Type localVarReturnType = new TypeToken<SnoozeReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoSteptypestatisticsDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSteptypestatisticsDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/steptypestatistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoSteptypestatisticsDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return infoSteptypestatisticsDeleteCall(_callback);

    }

    /**
     * Clear the execution statistics histogram for all step types
     * 
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse infoSteptypestatisticsDelete() throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = infoSteptypestatisticsDeleteWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Clear the execution statistics histogram for all step types
     * 
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> infoSteptypestatisticsDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = infoSteptypestatisticsDeleteValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear the execution statistics histogram for all step types (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSteptypestatisticsDeleteAsync(final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoSteptypestatisticsDeleteValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoSteptypestatisticsGet
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSteptypestatisticsGetCall(CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/steptypestatistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoSteptypestatisticsGetValidateBeforeCall(CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoSteptypestatisticsGetCall(format, _callback);

    }

    /**
     * Find out the execution statistics histogram for each step type
     * 
     * @param format If you want CSV, enter csv here (optional)
     * @return StepTypeStatisticsReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StepTypeStatisticsReportResponse infoSteptypestatisticsGet(CsvEnum format) throws ApiException {
        ApiResponse<StepTypeStatisticsReportResponse> localVarResp = infoSteptypestatisticsGetWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * Find out the execution statistics histogram for each step type
     * 
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;StepTypeStatisticsReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StepTypeStatisticsReportResponse> infoSteptypestatisticsGetWithHttpInfo(CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoSteptypestatisticsGetValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<StepTypeStatisticsReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find out the execution statistics histogram for each step type (asynchronously)
     * 
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSteptypestatisticsGetAsync(CsvEnum format, final ApiCallback<StepTypeStatisticsReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoSteptypestatisticsGetValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<StepTypeStatisticsReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoSteptypeusagereportClientGet
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSteptypeusagereportClientGetCall(String client, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/steptypeusagereport/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoSteptypeusagereportClientGetValidateBeforeCall(String client, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoSteptypeusagereportClientGet(Async)");
        }

        return infoSteptypeusagereportClientGetCall(client, target, format, _callback);

    }

    /**
     * Report on the steps being used by this client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return StepTypeUsageReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StepTypeUsageReportResponse infoSteptypeusagereportClientGet(String client, TargetEnum target, CsvEnum format) throws ApiException {
        ApiResponse<StepTypeUsageReportResponse> localVarResp = infoSteptypeusagereportClientGetWithHttpInfo(client, target, format);
        return localVarResp.getData();
    }

    /**
     * Report on the steps being used by this client
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;StepTypeUsageReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StepTypeUsageReportResponse> infoSteptypeusagereportClientGetWithHttpInfo(String client, TargetEnum target, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoSteptypeusagereportClientGetValidateBeforeCall(client, target, format, null);
        Type localVarReturnType = new TypeToken<StepTypeUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report on the steps being used by this client (asynchronously)
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoSteptypeusagereportClientGetAsync(String client, TargetEnum target, CsvEnum format, final ApiCallback<StepTypeUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoSteptypeusagereportClientGetValidateBeforeCall(client, target, format, _callback);
        Type localVarReturnType = new TypeToken<StepTypeUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoStepusagereportClientStepnameGet
     * @param stepname type of step that must exist in the rules returned (required)
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoStepusagereportClientStepnameGetCall(String stepname, String client, TargetEnum target, Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/stepusagereport/{client}/{stepname}"
            .replace("{" + "stepname" + "}", localVarApiClient.escapeString(stepname.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoStepusagereportClientStepnameGetValidateBeforeCall(String stepname, String client, TargetEnum target, Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stepname' is set
        if (stepname == null) {
            throw new ApiException("Missing the required parameter 'stepname' when calling infoStepusagereportClientStepnameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoStepusagereportClientStepnameGet(Async)");
        }

        return infoStepusagereportClientStepnameGetCall(stepname, client, target, from, to, format, _callback);

    }

    /**
     * Find out which rules are using a specific step type
     * 
     * @param stepname type of step that must exist in the rules returned (required)
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return StepUsageReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StepUsageReportResponse infoStepusagereportClientStepnameGet(String stepname, String client, TargetEnum target, Integer from, Integer to, CsvEnum format) throws ApiException {
        ApiResponse<StepUsageReportResponse> localVarResp = infoStepusagereportClientStepnameGetWithHttpInfo(stepname, client, target, from, to, format);
        return localVarResp.getData();
    }

    /**
     * Find out which rules are using a specific step type
     * 
     * @param stepname type of step that must exist in the rules returned (required)
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;StepUsageReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StepUsageReportResponse> infoStepusagereportClientStepnameGetWithHttpInfo(String stepname, String client, TargetEnum target, Integer from, Integer to, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoStepusagereportClientStepnameGetValidateBeforeCall(stepname, client, target, from, to, format, null);
        Type localVarReturnType = new TypeToken<StepUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find out which rules are using a specific step type (asynchronously)
     * 
     * @param stepname type of step that must exist in the rules returned (required)
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param target Filters on target (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoStepusagereportClientStepnameGetAsync(String stepname, String client, TargetEnum target, Integer from, Integer to, CsvEnum format, final ApiCallback<StepUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoStepusagereportClientStepnameGetValidateBeforeCall(stepname, client, target, from, to, format, _callback);
        Type localVarReturnType = new TypeToken<StepUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoTemplatecolumnreportClientGet
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplatecolumnreportClientGetCall(String client, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/templatecolumnreport/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoTemplatecolumnreportClientGetValidateBeforeCall(String client, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoTemplatecolumnreportClientGet(Async)");
        }

        return infoTemplatecolumnreportClientGetCall(client, format, _callback);

    }

    /**
     * Report on the names of the columns in the cache used by templates
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return TemplateColumnReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateColumnReportResponse infoTemplatecolumnreportClientGet(String client, CsvEnum format) throws ApiException {
        ApiResponse<TemplateColumnReportResponse> localVarResp = infoTemplatecolumnreportClientGetWithHttpInfo(client, format);
        return localVarResp.getData();
    }

    /**
     * Report on the names of the columns in the cache used by templates
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;TemplateColumnReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateColumnReportResponse> infoTemplatecolumnreportClientGetWithHttpInfo(String client, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoTemplatecolumnreportClientGetValidateBeforeCall(client, format, null);
        Type localVarReturnType = new TypeToken<TemplateColumnReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report on the names of the columns in the cache used by templates (asynchronously)
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplatecolumnreportClientGetAsync(String client, CsvEnum format, final ApiCallback<TemplateColumnReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoTemplatecolumnreportClientGetValidateBeforeCall(client, format, _callback);
        Type localVarReturnType = new TypeToken<TemplateColumnReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoTemplateinputreportClientGet
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param inputFields Name of input fields to search for (optional)
     * @param allversions Do we want to check all template versions or only latest? (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplateinputreportClientGetCall(String client, Integer from, Integer to, List<String> inputFields, Boolean allversions, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/templateinputreport/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (inputFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "inputFields", inputFields));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoTemplateinputreportClientGetValidateBeforeCall(String client, Integer from, Integer to, List<String> inputFields, Boolean allversions, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoTemplateinputreportClientGet(Async)");
        }

        return infoTemplateinputreportClientGetCall(client, from, to, inputFields, allversions, format, _callback);

    }

    /**
     * List all templates that expect given input fields
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param inputFields Name of input fields to search for (optional)
     * @param allversions Do we want to check all template versions or only latest? (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return TemplateInputReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateInputReportResponse infoTemplateinputreportClientGet(String client, Integer from, Integer to, List<String> inputFields, Boolean allversions, CsvEnum format) throws ApiException {
        ApiResponse<TemplateInputReportResponse> localVarResp = infoTemplateinputreportClientGetWithHttpInfo(client, from, to, inputFields, allversions, format);
        return localVarResp.getData();
    }

    /**
     * List all templates that expect given input fields
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param inputFields Name of input fields to search for (optional)
     * @param allversions Do we want to check all template versions or only latest? (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;TemplateInputReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateInputReportResponse> infoTemplateinputreportClientGetWithHttpInfo(String client, Integer from, Integer to, List<String> inputFields, Boolean allversions, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoTemplateinputreportClientGetValidateBeforeCall(client, from, to, inputFields, allversions, format, null);
        Type localVarReturnType = new TypeToken<TemplateInputReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all templates that expect given input fields (asynchronously)
     * 
     * @param client Which client would you like the report for? You must be able to access this client   to report on it. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param inputFields Name of input fields to search for (optional)
     * @param allversions Do we want to check all template versions or only latest? (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplateinputreportClientGetAsync(String client, Integer from, Integer to, List<String> inputFields, Boolean allversions, CsvEnum format, final ApiCallback<TemplateInputReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoTemplateinputreportClientGetValidateBeforeCall(client, from, to, inputFields, allversions, format, _callback);
        Type localVarReturnType = new TypeToken<TemplateInputReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoTemplateusagereportClientTemplatenameGet
     * @param client Filter the rules returned to only this client. Use * to match all clients (required)
     * @param templatename The name of the template that is used by the rule (required)
     * @param templateClient Filter to only templates with this client (optional)
     * @param templateVersion Filter to only templates with this version (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplateusagereportClientTemplatenameGetCall(String client, String templatename, String templateClient, String templateVersion, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/templateusagereport/{client}/{templatename}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "templatename" + "}", localVarApiClient.escapeString(templatename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateClient", templateClient));
        }

        if (templateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateVersion", templateVersion));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoTemplateusagereportClientTemplatenameGetValidateBeforeCall(String client, String templatename, String templateClient, String templateVersion, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling infoTemplateusagereportClientTemplatenameGet(Async)");
        }

        // verify the required parameter 'templatename' is set
        if (templatename == null) {
            throw new ApiException("Missing the required parameter 'templatename' when calling infoTemplateusagereportClientTemplatenameGet(Async)");
        }

        return infoTemplateusagereportClientTemplatenameGetCall(client, templatename, templateClient, templateVersion, from, to, target, format, _callback);

    }

    /**
     * Find a list of rules which use a specific template
     * 
     * @param client Filter the rules returned to only this client. Use * to match all clients (required)
     * @param templatename The name of the template that is used by the rule (required)
     * @param templateClient Filter to only templates with this client (optional)
     * @param templateVersion Filter to only templates with this version (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return TemplateUsageReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateUsageReportResponse infoTemplateusagereportClientTemplatenameGet(String client, String templatename, String templateClient, String templateVersion, Integer from, Integer to, TargetEnum target, CsvEnum format) throws ApiException {
        ApiResponse<TemplateUsageReportResponse> localVarResp = infoTemplateusagereportClientTemplatenameGetWithHttpInfo(client, templatename, templateClient, templateVersion, from, to, target, format);
        return localVarResp.getData();
    }

    /**
     * Find a list of rules which use a specific template
     * 
     * @param client Filter the rules returned to only this client. Use * to match all clients (required)
     * @param templatename The name of the template that is used by the rule (required)
     * @param templateClient Filter to only templates with this client (optional)
     * @param templateVersion Filter to only templates with this version (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;TemplateUsageReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateUsageReportResponse> infoTemplateusagereportClientTemplatenameGetWithHttpInfo(String client, String templatename, String templateClient, String templateVersion, Integer from, Integer to, TargetEnum target, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoTemplateusagereportClientTemplatenameGetValidateBeforeCall(client, templatename, templateClient, templateVersion, from, to, target, format, null);
        Type localVarReturnType = new TypeToken<TemplateUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a list of rules which use a specific template (asynchronously)
     * 
     * @param client Filter the rules returned to only this client. Use * to match all clients (required)
     * @param templatename The name of the template that is used by the rule (required)
     * @param templateClient Filter to only templates with this client (optional)
     * @param templateVersion Filter to only templates with this version (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param target Filters on target (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplateusagereportClientTemplatenameGetAsync(String client, String templatename, String templateClient, String templateVersion, Integer from, Integer to, TargetEnum target, CsvEnum format, final ApiCallback<TemplateUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoTemplateusagereportClientTemplatenameGetValidateBeforeCall(client, templatename, templateClient, templateVersion, from, to, target, format, _callback);
        Type localVarReturnType = new TypeToken<TemplateUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoTemplatevalidityreportClientGet
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplatevalidityreportClientGetCall(String client, Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/templatevalidityreport/{client}"
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoTemplatevalidityreportClientGetValidateBeforeCall(String client, Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoTemplatevalidityreportClientGetCall(client, from, to, format, _callback);

    }

    /**
     * Reports on validity of uploaded templates
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return TemplateValidityReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateValidityReportResponse infoTemplatevalidityreportClientGet(String client, Integer from, Integer to, CsvEnum format) throws ApiException {
        ApiResponse<TemplateValidityReportResponse> localVarResp = infoTemplatevalidityreportClientGetWithHttpInfo(client, from, to, format);
        return localVarResp.getData();
    }

    /**
     * Reports on validity of uploaded templates
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;TemplateValidityReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateValidityReportResponse> infoTemplatevalidityreportClientGetWithHttpInfo(String client, Integer from, Integer to, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoTemplatevalidityreportClientGetValidateBeforeCall(client, from, to, format, null);
        Type localVarReturnType = new TypeToken<TemplateValidityReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reports on validity of uploaded templates (asynchronously)
     * 
     * @param client Client name (optional)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTemplatevalidityreportClientGetAsync(String client, Integer from, Integer to, CsvEnum format, final ApiCallback<TemplateValidityReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoTemplatevalidityreportClientGetValidateBeforeCall(client, from, to, format, _callback);
        Type localVarReturnType = new TypeToken<TemplateValidityReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoTokenusereportGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param user Optional query parameter to specify the user (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param token Optional token for which to obtain the last used report (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTokenusereportGetCall(Integer from, Integer to, String user, CsvEnum format, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/tokenusereport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoTokenusereportGetValidateBeforeCall(Integer from, Integer to, String user, CsvEnum format, String token, final ApiCallback _callback) throws ApiException {
        return infoTokenusereportGetCall(from, to, user, format, token, _callback);

    }

    /**
     * Reports on token access and last used date.
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param user Optional query parameter to specify the user (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param token Optional token for which to obtain the last used report (optional)
     * @return TokenUseReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TokenUseReportResponse infoTokenusereportGet(Integer from, Integer to, String user, CsvEnum format, String token) throws ApiException {
        ApiResponse<TokenUseReportResponse> localVarResp = infoTokenusereportGetWithHttpInfo(from, to, user, format, token);
        return localVarResp.getData();
    }

    /**
     * Reports on token access and last used date.
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param user Optional query parameter to specify the user (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param token Optional token for which to obtain the last used report (optional)
     * @return ApiResponse&lt;TokenUseReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenUseReportResponse> infoTokenusereportGetWithHttpInfo(Integer from, Integer to, String user, CsvEnum format, String token) throws ApiException {
        okhttp3.Call localVarCall = infoTokenusereportGetValidateBeforeCall(from, to, user, format, token, null);
        Type localVarReturnType = new TypeToken<TokenUseReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reports on token access and last used date. (asynchronously)
     * 
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param user Optional query parameter to specify the user (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param token Optional token for which to obtain the last used report (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoTokenusereportGetAsync(Integer from, Integer to, String user, CsvEnum format, String token, final ApiCallback<TokenUseReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoTokenusereportGetValidateBeforeCall(from, to, user, format, token, _callback);
        Type localVarReturnType = new TypeToken<TokenUseReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infoWorkerthreadusageGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoWorkerthreadusageGetCall(Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/workerthreadusage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoWorkerthreadusageGetValidateBeforeCall(Integer from, Integer to, CsvEnum format, final ApiCallback _callback) throws ApiException {
        return infoWorkerthreadusageGetCall(from, to, format, _callback);

    }

    /**
     * Worker thread usage
     * Worker threads execute steps within rules. This report shows what they are doing
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return WorkerThreadUsageReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkerThreadUsageReportResponse infoWorkerthreadusageGet(Integer from, Integer to, CsvEnum format) throws ApiException {
        ApiResponse<WorkerThreadUsageReportResponse> localVarResp = infoWorkerthreadusageGetWithHttpInfo(from, to, format);
        return localVarResp.getData();
    }

    /**
     * Worker thread usage
     * Worker threads execute steps within rules. This report shows what they are doing
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;WorkerThreadUsageReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerThreadUsageReportResponse> infoWorkerthreadusageGetWithHttpInfo(Integer from, Integer to, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = infoWorkerthreadusageGetValidateBeforeCall(from, to, format, null);
        Type localVarReturnType = new TypeToken<WorkerThreadUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Worker thread usage (asynchronously)
     * Worker threads execute steps within rules. This report shows what they are doing
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infoWorkerthreadusageGetAsync(Integer from, Integer to, CsvEnum format, final ApiCallback<WorkerThreadUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoWorkerthreadusageGetValidateBeforeCall(from, to, format, _callback);
        Type localVarReturnType = new TypeToken<WorkerThreadUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
