/*
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.jo.api;

import com.alterian.jo.ApiCallback;
import com.alterian.jo.ApiClient;
import com.alterian.jo.ApiException;
import com.alterian.jo.ApiResponse;
import com.alterian.jo.Configuration;
import com.alterian.jo.Pair;
import com.alterian.jo.ProgressRequestBody;
import com.alterian.jo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.jo.model.ApiJSONArrayResponse;
import com.alterian.jo.model.CsvEnum;
import com.alterian.jo.model.DataGridApiResponse;
import com.alterian.jo.model.DataGridDetails;
import com.alterian.jo.model.DataGridRow;
import com.alterian.jo.model.DestinationTarget;
import java.io.File;
import com.alterian.jo.model.HealthScoreTimeFrame;
import com.alterian.jo.model.ModelApiResponse;
import com.alterian.jo.model.RuleAndStateResponse;
import com.alterian.jo.model.RuleData;
import com.alterian.jo.model.RuleDesignerResponse;
import com.alterian.jo.model.RuleList;
import com.alterian.jo.model.TargetEnum;
import com.alterian.jo.model.TestData;
import com.alterian.jo.model.TestDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadRuleTargetClientRulenameGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule ktr file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadRuleTargetClientRulenameGetCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/download/rule/{target}/{client}/{rulename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadRuleTargetClientRulenameGetValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling downloadRuleTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling downloadRuleTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling downloadRuleTargetClientRulenameGet(Async)");
        }

        return downloadRuleTargetClientRulenameGetCall(target, client, rulename, _callback);

    }

    /**
     * Download the rule file (KTR) for a running rule
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule ktr file </td><td>  -  </td></tr>
     </table>
     */
    public File downloadRuleTargetClientRulenameGet(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<File> localVarResp = downloadRuleTargetClientRulenameGetWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Download the rule file (KTR) for a running rule
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule ktr file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadRuleTargetClientRulenameGetWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = downloadRuleTargetClientRulenameGetValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the rule file (KTR) for a running rule (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A uuencoded octet stream containing the rule ktr file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadRuleTargetClientRulenameGetAsync(TargetEnum target, String client, String rulename, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadRuleTargetClientRulenameGetValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleGet
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleGetCall(Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (sortProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortProperty", sortProperty));
        }

        if (sortDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDescending", sortDescending));
        }

        if (createdRuleUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdRuleUrl", createdRuleUrl));
        }

        if (healthScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("healthScore", healthScore));
        }

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (parameterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterName", parameterName));
        }

        if (parameterValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterValue", parameterValue));
        }

        if (templateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateFilter", templateFilter));
        }

        if (includePublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePublic", includePublic));
        }

        if (checkTemplateLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkTemplateLatestVersion", checkTemplateLatestVersion));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleGetValidateBeforeCall(Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback _callback) throws ApiException {
        return ruleGetCall(from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, _callback);

    }

    /**
     * Get information about all published rules on the server
     * Information returned is filtered by user permissions.
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleGet(Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleGetWithHttpInfo(from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
        return localVarResp.getData();
    }

    /**
     * Get information about all published rules on the server
     * Information returned is filtered by user permissions.
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleGetWithHttpInfo(Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = ruleGetValidateBeforeCall(from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about all published rules on the server (asynchronously)
     * Information returned is filtered by user permissions.
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleGetAsync(Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleGetValidateBeforeCall(from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientDelete
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientDeleteCall(TargetEnum target, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientDeleteValidateBeforeCall(TargetEnum target, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientDelete(Async)");
        }

        return ruleTargetClientDeleteCall(target, client, _callback);

    }

    /**
     * Unpublish all rules that this client has published to the given target.
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleTargetClientDelete(TargetEnum target, String client) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleTargetClientDeleteWithHttpInfo(target, client);
        return localVarResp.getData();
    }

    /**
     * Unpublish all rules that this client has published to the given target.
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleTargetClientDeleteWithHttpInfo(TargetEnum target, String client) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientDeleteValidateBeforeCall(target, client, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpublish all rules that this client has published to the given target. (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientDeleteAsync(TargetEnum target, String client, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientDeleteValidateBeforeCall(target, client, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientDesignerPut
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientDesignerPutCall(TargetEnum target, String client, RuleData ruleData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleData;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/designer"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientDesignerPutValidateBeforeCall(TargetEnum target, String client, RuleData ruleData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientDesignerPut(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientDesignerPut(Async)");
        }

        return ruleTargetClientDesignerPutCall(target, client, ruleData, _callback);

    }

    /**
     * Validate a new Rule Designer JSON
     * This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return RuleDesignerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleDesignerResponse ruleTargetClientDesignerPut(TargetEnum target, String client, RuleData ruleData) throws ApiException {
        ApiResponse<RuleDesignerResponse> localVarResp = ruleTargetClientDesignerPutWithHttpInfo(target, client, ruleData);
        return localVarResp.getData();
    }

    /**
     * Validate a new Rule Designer JSON
     * This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return ApiResponse&lt;RuleDesignerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleDesignerResponse> ruleTargetClientDesignerPutWithHttpInfo(TargetEnum target, String client, RuleData ruleData) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientDesignerPutValidateBeforeCall(target, client, ruleData, null);
        Type localVarReturnType = new TypeToken<RuleDesignerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate a new Rule Designer JSON (asynchronously)
     * This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientDesignerPutAsync(TargetEnum target, String client, RuleData ruleData, final ApiCallback<RuleDesignerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientDesignerPutValidateBeforeCall(target, client, ruleData, _callback);
        Type localVarReturnType = new TypeToken<RuleDesignerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientGetCall(TargetEnum target, String client, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (sortProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortProperty", sortProperty));
        }

        if (sortDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDescending", sortDescending));
        }

        if (createdRuleUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdRuleUrl", createdRuleUrl));
        }

        if (healthScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("healthScore", healthScore));
        }

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (parameterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterName", parameterName));
        }

        if (parameterValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterValue", parameterValue));
        }

        if (templateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateFilter", templateFilter));
        }

        if (includePublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePublic", includePublic));
        }

        if (checkTemplateLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkTemplateLatestVersion", checkTemplateLatestVersion));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientGetValidateBeforeCall(TargetEnum target, String client, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientGet(Async)");
        }

        return ruleTargetClientGetCall(target, client, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, _callback);

    }

    /**
     * Get information about all rules published by this client to the given target.
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleTargetClientGet(TargetEnum target, String client, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleTargetClientGetWithHttpInfo(target, client, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
        return localVarResp.getData();
    }

    /**
     * Get information about all rules published by this client to the given target.
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleTargetClientGetWithHttpInfo(TargetEnum target, String client, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientGetValidateBeforeCall(target, client, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about all rules published by this client to the given target. (asynchronously)
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientGetAsync(TargetEnum target, String client, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientGetValidateBeforeCall(target, client, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameAutoloaderGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameAutoloaderGetCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/autoloader"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameAutoloaderGetValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameAutoloaderGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameAutoloaderGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameAutoloaderGet(Async)");
        }

        return ruleTargetClientRulenameAutoloaderGetCall(target, client, rulename, _callback);

    }

    /**
     * Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
     * This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleTargetClientRulenameAutoloaderGet(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleTargetClientRulenameAutoloaderGetWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
     * This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleTargetClientRulenameAutoloaderGetWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameAutoloaderGetValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon (asynchronously)
     * This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameAutoloaderGetAsync(TargetEnum target, String client, String rulename, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameAutoloaderGetValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameAutoloaderPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameAutoloaderPostCall(TargetEnum target, String client, String rulename, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/autoloader"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameAutoloaderPostValidateBeforeCall(TargetEnum target, String client, String rulename, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameAutoloaderPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameAutoloaderPost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameAutoloaderPost(Async)");
        }

        return ruleTargetClientRulenameAutoloaderPostCall(target, client, rulename, body, _callback);

    }

    /**
     * Save the JSON for an autoloader rule
     * This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return RuleAndStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleAndStateResponse ruleTargetClientRulenameAutoloaderPost(TargetEnum target, String client, String rulename, Object body) throws ApiException {
        ApiResponse<RuleAndStateResponse> localVarResp = ruleTargetClientRulenameAutoloaderPostWithHttpInfo(target, client, rulename, body);
        return localVarResp.getData();
    }

    /**
     * Save the JSON for an autoloader rule
     * This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return ApiResponse&lt;RuleAndStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleAndStateResponse> ruleTargetClientRulenameAutoloaderPostWithHttpInfo(TargetEnum target, String client, String rulename, Object body) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameAutoloaderPostValidateBeforeCall(target, client, rulename, body, null);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save the JSON for an autoloader rule (asynchronously)
     * This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameAutoloaderPostAsync(TargetEnum target, String client, String rulename, Object body, final ApiCallback<RuleAndStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameAutoloaderPostValidateBeforeCall(target, client, rulename, body, _callback);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameCopytoPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param destinationtarget The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)
     * @param destinationTarget Where the copy will run. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameCopytoPostCall(TargetEnum target, String client, String rulename, TargetEnum destinationtarget, DestinationTarget destinationTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationTarget;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/copyto"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (destinationtarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationtarget", destinationtarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameCopytoPostValidateBeforeCall(TargetEnum target, String client, String rulename, TargetEnum destinationtarget, DestinationTarget destinationTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameCopytoPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameCopytoPost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameCopytoPost(Async)");
        }

        return ruleTargetClientRulenameCopytoPostCall(target, client, rulename, destinationtarget, destinationTarget, _callback);

    }

    /**
     * Copy this rule to the given target.
     * A copy of this rule will be started in the given target.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param destinationtarget The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)
     * @param destinationTarget Where the copy will run. (optional)
     * @return RuleAndStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleAndStateResponse ruleTargetClientRulenameCopytoPost(TargetEnum target, String client, String rulename, TargetEnum destinationtarget, DestinationTarget destinationTarget) throws ApiException {
        ApiResponse<RuleAndStateResponse> localVarResp = ruleTargetClientRulenameCopytoPostWithHttpInfo(target, client, rulename, destinationtarget, destinationTarget);
        return localVarResp.getData();
    }

    /**
     * Copy this rule to the given target.
     * A copy of this rule will be started in the given target.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param destinationtarget The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)
     * @param destinationTarget Where the copy will run. (optional)
     * @return ApiResponse&lt;RuleAndStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleAndStateResponse> ruleTargetClientRulenameCopytoPostWithHttpInfo(TargetEnum target, String client, String rulename, TargetEnum destinationtarget, DestinationTarget destinationTarget) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameCopytoPostValidateBeforeCall(target, client, rulename, destinationtarget, destinationTarget, null);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy this rule to the given target. (asynchronously)
     * A copy of this rule will be started in the given target.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param destinationtarget The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)
     * @param destinationTarget Where the copy will run. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameCopytoPostAsync(TargetEnum target, String client, String rulename, TargetEnum destinationtarget, DestinationTarget destinationTarget, final ApiCallback<RuleAndStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameCopytoPostValidateBeforeCall(target, client, rulename, destinationtarget, destinationTarget, _callback);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameDatagridDataGridNameGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDatagridDataGridNameGetCall(TargetEnum target, String client, String rulename, String dataGridName, CsvEnum format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()))
            .replace("{" + "dataGridName" + "}", localVarApiClient.escapeString(dataGridName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameDatagridDataGridNameGetValidateBeforeCall(TargetEnum target, String client, String rulename, String dataGridName, CsvEnum format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameDatagridDataGridNameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameDatagridDataGridNameGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDatagridDataGridNameGet(Async)");
        }

        // verify the required parameter 'dataGridName' is set
        if (dataGridName == null) {
            throw new ApiException("Missing the required parameter 'dataGridName' when calling ruleTargetClientRulenameDatagridDataGridNameGet(Async)");
        }

        return ruleTargetClientRulenameDatagridDataGridNameGetCall(target, client, rulename, dataGridName, format, _callback);

    }

    /**
     * Get information about the data grid for a specific, published rule.
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return DataGridApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataGridApiResponse ruleTargetClientRulenameDatagridDataGridNameGet(TargetEnum target, String client, String rulename, String dataGridName, CsvEnum format) throws ApiException {
        ApiResponse<DataGridApiResponse> localVarResp = ruleTargetClientRulenameDatagridDataGridNameGetWithHttpInfo(target, client, rulename, dataGridName, format);
        return localVarResp.getData();
    }

    /**
     * Get information about the data grid for a specific, published rule.
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param format If you want CSV, enter csv here (optional)
     * @return ApiResponse&lt;DataGridApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataGridApiResponse> ruleTargetClientRulenameDatagridDataGridNameGetWithHttpInfo(TargetEnum target, String client, String rulename, String dataGridName, CsvEnum format) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameDatagridDataGridNameGetValidateBeforeCall(target, client, rulename, dataGridName, format, null);
        Type localVarReturnType = new TypeToken<DataGridApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about the data grid for a specific, published rule. (asynchronously)
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param format If you want CSV, enter csv here (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDatagridDataGridNameGetAsync(TargetEnum target, String client, String rulename, String dataGridName, CsvEnum format, final ApiCallback<DataGridApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameDatagridDataGridNameGetValidateBeforeCall(target, client, rulename, dataGridName, format, _callback);
        Type localVarReturnType = new TypeToken<DataGridApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameDatagridDataGridNamePost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridDetails Specify the data for the updated data grid. Ensure wrapped in {} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDatagridDataGridNamePostCall(TargetEnum target, String client, String rulename, String dataGridName, List<DataGridDetails> dataGridDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataGridDetails;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()))
            .replace("{" + "dataGridName" + "}", localVarApiClient.escapeString(dataGridName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameDatagridDataGridNamePostValidateBeforeCall(TargetEnum target, String client, String rulename, String dataGridName, List<DataGridDetails> dataGridDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameDatagridDataGridNamePost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameDatagridDataGridNamePost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDatagridDataGridNamePost(Async)");
        }

        // verify the required parameter 'dataGridName' is set
        if (dataGridName == null) {
            throw new ApiException("Missing the required parameter 'dataGridName' when calling ruleTargetClientRulenameDatagridDataGridNamePost(Async)");
        }

        return ruleTargetClientRulenameDatagridDataGridNamePostCall(target, client, rulename, dataGridName, dataGridDetails, _callback);

    }

    /**
     * Enter new data for an exisiting data grid and update
     * If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridDetails Specify the data for the updated data grid. Ensure wrapped in {} (optional)
     * @return RuleAndStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleAndStateResponse ruleTargetClientRulenameDatagridDataGridNamePost(TargetEnum target, String client, String rulename, String dataGridName, List<DataGridDetails> dataGridDetails) throws ApiException {
        ApiResponse<RuleAndStateResponse> localVarResp = ruleTargetClientRulenameDatagridDataGridNamePostWithHttpInfo(target, client, rulename, dataGridName, dataGridDetails);
        return localVarResp.getData();
    }

    /**
     * Enter new data for an exisiting data grid and update
     * If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridDetails Specify the data for the updated data grid. Ensure wrapped in {} (optional)
     * @return ApiResponse&lt;RuleAndStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleAndStateResponse> ruleTargetClientRulenameDatagridDataGridNamePostWithHttpInfo(TargetEnum target, String client, String rulename, String dataGridName, List<DataGridDetails> dataGridDetails) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameDatagridDataGridNamePostValidateBeforeCall(target, client, rulename, dataGridName, dataGridDetails, null);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enter new data for an exisiting data grid and update (asynchronously)
     * If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridDetails Specify the data for the updated data grid. Ensure wrapped in {} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDatagridDataGridNamePostAsync(TargetEnum target, String client, String rulename, String dataGridName, List<DataGridDetails> dataGridDetails, final ApiCallback<RuleAndStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameDatagridDataGridNamePostValidateBeforeCall(target, client, rulename, dataGridName, dataGridDetails, _callback);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameDatagridDataGridNameRowsPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridRow Data grid rows (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDatagridDataGridNameRowsPostCall(TargetEnum target, String client, String rulename, String dataGridName, DataGridRow dataGridRow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataGridRow;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}/rows"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()))
            .replace("{" + "dataGridName" + "}", localVarApiClient.escapeString(dataGridName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameDatagridDataGridNameRowsPostValidateBeforeCall(TargetEnum target, String client, String rulename, String dataGridName, DataGridRow dataGridRow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost(Async)");
        }

        // verify the required parameter 'dataGridName' is set
        if (dataGridName == null) {
            throw new ApiException("Missing the required parameter 'dataGridName' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost(Async)");
        }

        return ruleTargetClientRulenameDatagridDataGridNameRowsPostCall(target, client, rulename, dataGridName, dataGridRow, _callback);

    }

    /**
     * Add new data grid rows to a rule&#39;s Data Grid
     * This is to append new data only. Existing data remains unchanged
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridRow Data grid rows (optional)
     * @return RuleAndStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleAndStateResponse ruleTargetClientRulenameDatagridDataGridNameRowsPost(TargetEnum target, String client, String rulename, String dataGridName, DataGridRow dataGridRow) throws ApiException {
        ApiResponse<RuleAndStateResponse> localVarResp = ruleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfo(target, client, rulename, dataGridName, dataGridRow);
        return localVarResp.getData();
    }

    /**
     * Add new data grid rows to a rule&#39;s Data Grid
     * This is to append new data only. Existing data remains unchanged
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridRow Data grid rows (optional)
     * @return ApiResponse&lt;RuleAndStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleAndStateResponse> ruleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfo(TargetEnum target, String client, String rulename, String dataGridName, DataGridRow dataGridRow) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameDatagridDataGridNameRowsPostValidateBeforeCall(target, client, rulename, dataGridName, dataGridRow, null);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new data grid rows to a rule&#39;s Data Grid (asynchronously)
     * This is to append new data only. Existing data remains unchanged
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param dataGridName Name of the Data Grid that will be updated (required)
     * @param dataGridRow Data grid rows (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDatagridDataGridNameRowsPostAsync(TargetEnum target, String client, String rulename, String dataGridName, DataGridRow dataGridRow, final ApiCallback<RuleAndStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameDatagridDataGridNameRowsPostValidateBeforeCall(target, client, rulename, dataGridName, dataGridRow, _callback);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameDelete
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDeleteCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameDeleteValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameDelete(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDelete(Async)");
        }

        return ruleTargetClientRulenameDeleteCall(target, client, rulename, _callback);

    }

    /**
     * Unpublish a specific rule.
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleTargetClientRulenameDelete(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleTargetClientRulenameDeleteWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Unpublish a specific rule.
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleTargetClientRulenameDeleteWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameDeleteValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpublish a specific rule. (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDeleteAsync(TargetEnum target, String client, String rulename, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameDeleteValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameDesignerGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDesignerGetCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/designer"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameDesignerGetValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameDesignerGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameDesignerGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDesignerGet(Async)");
        }

        return ruleTargetClientRulenameDesignerGetCall(target, client, rulename, _callback);

    }

    /**
     * Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleTargetClientRulenameDesignerGet(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleTargetClientRulenameDesignerGetWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleTargetClientRulenameDesignerGetWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameDesignerGetValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface (asynchronously)
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDesignerGetAsync(TargetEnum target, String client, String rulename, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameDesignerGetValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameDesignerPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDesignerPostCall(TargetEnum target, String client, String rulename, Boolean validate, RuleData ruleData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleData;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/designer"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameDesignerPostValidateBeforeCall(TargetEnum target, String client, String rulename, Boolean validate, RuleData ruleData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameDesignerPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameDesignerPost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDesignerPost(Async)");
        }

        return ruleTargetClientRulenameDesignerPostCall(target, client, rulename, validate, ruleData, _callback);

    }

    /**
     * Save or validate the rule designer JSON for a rule
     * This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return RuleDesignerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleDesignerResponse ruleTargetClientRulenameDesignerPost(TargetEnum target, String client, String rulename, Boolean validate, RuleData ruleData) throws ApiException {
        ApiResponse<RuleDesignerResponse> localVarResp = ruleTargetClientRulenameDesignerPostWithHttpInfo(target, client, rulename, validate, ruleData);
        return localVarResp.getData();
    }

    /**
     * Save or validate the rule designer JSON for a rule
     * This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return ApiResponse&lt;RuleDesignerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleDesignerResponse> ruleTargetClientRulenameDesignerPostWithHttpInfo(TargetEnum target, String client, String rulename, Boolean validate, RuleData ruleData) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameDesignerPostValidateBeforeCall(target, client, rulename, validate, ruleData, null);
        Type localVarReturnType = new TypeToken<RuleDesignerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save or validate the rule designer JSON for a rule (asynchronously)
     * This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDesignerPostAsync(TargetEnum target, String client, String rulename, Boolean validate, RuleData ruleData, final ApiCallback<RuleDesignerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameDesignerPostValidateBeforeCall(target, client, rulename, validate, ruleData, _callback);
        Type localVarReturnType = new TypeToken<RuleDesignerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameDesignerPut
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param download Download the posted rule designer JSON as a .ktr file (optional)
     * @param body Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDesignerPutCall(TargetEnum target, String client, String rulename, Boolean validate, Boolean download, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/designer"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameDesignerPutValidateBeforeCall(TargetEnum target, String client, String rulename, Boolean validate, Boolean download, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameDesignerPut(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameDesignerPut(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDesignerPut(Async)");
        }

        return ruleTargetClientRulenameDesignerPutCall(target, client, rulename, validate, download, body, _callback);

    }

    /**
     * Add a new rule via the rule designer JSON.
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param download Download the posted rule designer JSON as a .ktr file (optional)
     * @param body Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse ruleTargetClientRulenameDesignerPut(TargetEnum target, String client, String rulename, Boolean validate, Boolean download, String body) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = ruleTargetClientRulenameDesignerPutWithHttpInfo(target, client, rulename, validate, download, body);
        return localVarResp.getData();
    }

    /**
     * Add a new rule via the rule designer JSON.
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param download Download the posted rule designer JSON as a .ktr file (optional)
     * @param body Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> ruleTargetClientRulenameDesignerPutWithHttpInfo(TargetEnum target, String client, String rulename, Boolean validate, Boolean download, String body) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameDesignerPutValidateBeforeCall(target, client, rulename, validate, download, body, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new rule via the rule designer JSON. (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param validate Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)
     * @param download Download the posted rule designer JSON as a .ktr file (optional)
     * @param body Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameDesignerPutAsync(TargetEnum target, String client, String rulename, Boolean validate, Boolean download, String body, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameDesignerPutValidateBeforeCall(target, client, rulename, validate, download, body, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameGetCall(TargetEnum target, String client, String rulename, HealthScoreTimeFrame healthScore, Boolean includeStatistics, Boolean checkTemplateLatestVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (healthScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("healthScore", healthScore));
        }

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        if (checkTemplateLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkTemplateLatestVersion", checkTemplateLatestVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameGetValidateBeforeCall(TargetEnum target, String client, String rulename, HealthScoreTimeFrame healthScore, Boolean includeStatistics, Boolean checkTemplateLatestVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameGet(Async)");
        }

        return ruleTargetClientRulenameGetCall(target, client, rulename, healthScore, includeStatistics, checkTemplateLatestVersion, _callback);

    }

    /**
     * Get information about one specific, published rule.
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleTargetClientRulenameGet(TargetEnum target, String client, String rulename, HealthScoreTimeFrame healthScore, Boolean includeStatistics, Boolean checkTemplateLatestVersion) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleTargetClientRulenameGetWithHttpInfo(target, client, rulename, healthScore, includeStatistics, checkTemplateLatestVersion);
        return localVarResp.getData();
    }

    /**
     * Get information about one specific, published rule.
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleTargetClientRulenameGetWithHttpInfo(TargetEnum target, String client, String rulename, HealthScoreTimeFrame healthScore, Boolean includeStatistics, Boolean checkTemplateLatestVersion) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameGetValidateBeforeCall(target, client, rulename, healthScore, includeStatistics, checkTemplateLatestVersion, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about one specific, published rule. (asynchronously)
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameGetAsync(TargetEnum target, String client, String rulename, HealthScoreTimeFrame healthScore, Boolean includeStatistics, Boolean checkTemplateLatestVersion, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameGetValidateBeforeCall(target, client, rulename, healthScore, includeStatistics, checkTemplateLatestVersion, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameParameterPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameParameterPostCall(TargetEnum target, String client, String rulename, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/parameter"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameParameterPostValidateBeforeCall(TargetEnum target, String client, String rulename, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameParameterPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameParameterPost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameParameterPost(Async)");
        }

        return ruleTargetClientRulenameParameterPostCall(target, client, rulename, body, _callback);

    }

    /**
     * update the default values for parameters.
     * this will update the rule with new default parameters.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @return RuleAndStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleAndStateResponse ruleTargetClientRulenameParameterPost(TargetEnum target, String client, String rulename, Object body) throws ApiException {
        ApiResponse<RuleAndStateResponse> localVarResp = ruleTargetClientRulenameParameterPostWithHttpInfo(target, client, rulename, body);
        return localVarResp.getData();
    }

    /**
     * update the default values for parameters.
     * this will update the rule with new default parameters.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @return ApiResponse&lt;RuleAndStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleAndStateResponse> ruleTargetClientRulenameParameterPostWithHttpInfo(TargetEnum target, String client, String rulename, Object body) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameParameterPostValidateBeforeCall(target, client, rulename, body, null);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update the default values for parameters. (asynchronously)
     * this will update the rule with new default parameters.
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameParameterPostAsync(TargetEnum target, String client, String rulename, Object body, final ApiCallback<RuleAndStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameParameterPostValidateBeforeCall(target, client, rulename, body, _callback);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenamePauseDelete
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenamePauseDeleteCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/pause"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenamePauseDeleteValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenamePauseDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenamePauseDelete(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenamePauseDelete(Async)");
        }

        return ruleTargetClientRulenamePauseDeleteCall(target, client, rulename, _callback);

    }

    /**
     * Pause this rule
     * Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse ruleTargetClientRulenamePauseDelete(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = ruleTargetClientRulenamePauseDeleteWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Pause this rule
     * Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> ruleTargetClientRulenamePauseDeleteWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenamePauseDeleteValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pause this rule (asynchronously)
     * Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenamePauseDeleteAsync(TargetEnum target, String client, String rulename, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenamePauseDeleteValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenamePost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenamePostCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenamePostValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenamePost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenamePost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenamePost(Async)");
        }

        return ruleTargetClientRulenamePostCall(target, client, rulename, _callback);

    }

    /**
     * Start or restart one specific, published rule.
     * Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse ruleTargetClientRulenamePost(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = ruleTargetClientRulenamePostWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Start or restart one specific, published rule.
     * Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> ruleTargetClientRulenamePostWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenamePostValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start or restart one specific, published rule. (asynchronously)
     * Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenamePostAsync(TargetEnum target, String client, String rulename, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenamePostValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenamePriorityWeightingPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenamePriorityWeightingPostCall(TargetEnum target, String client, String rulename, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/priorityWeighting"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "example"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenamePriorityWeightingPostValidateBeforeCall(TargetEnum target, String client, String rulename, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenamePriorityWeightingPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenamePriorityWeightingPost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenamePriorityWeightingPost(Async)");
        }

        return ruleTargetClientRulenamePriorityWeightingPostCall(target, client, rulename, body, _callback);

    }

    /**
     * Update the rule&#39;s priority weighting
     * This will set a new value for a rule&#39;s priority weighting
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @return RuleAndStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleAndStateResponse ruleTargetClientRulenamePriorityWeightingPost(TargetEnum target, String client, String rulename, Object body) throws ApiException {
        ApiResponse<RuleAndStateResponse> localVarResp = ruleTargetClientRulenamePriorityWeightingPostWithHttpInfo(target, client, rulename, body);
        return localVarResp.getData();
    }

    /**
     * Update the rule&#39;s priority weighting
     * This will set a new value for a rule&#39;s priority weighting
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @return ApiResponse&lt;RuleAndStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleAndStateResponse> ruleTargetClientRulenamePriorityWeightingPostWithHttpInfo(TargetEnum target, String client, String rulename, Object body) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenamePriorityWeightingPostValidateBeforeCall(target, client, rulename, body, null);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the rule&#39;s priority weighting (asynchronously)
     * This will set a new value for a rule&#39;s priority weighting
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param body key value pairs of param name and value. Ensure wrapped in {} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenamePriorityWeightingPostAsync(TargetEnum target, String client, String rulename, Object body, final ApiCallback<RuleAndStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenamePriorityWeightingPostValidateBeforeCall(target, client, rulename, body, _callback);
        Type localVarReturnType = new TypeToken<RuleAndStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameResetDelete
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameResetDeleteCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/reset"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameResetDeleteValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameResetDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameResetDelete(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameResetDelete(Async)");
        }

        return ruleTargetClientRulenameResetDeleteCall(target, client, rulename, _callback);

    }

    /**
     * Perform extended actions to rules
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse ruleTargetClientRulenameResetDelete(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = ruleTargetClientRulenameResetDeleteWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Perform extended actions to rules
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> ruleTargetClientRulenameResetDeleteWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameResetDeleteValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform extended actions to rules (asynchronously)
     * 
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameResetDeleteAsync(TargetEnum target, String client, String rulename, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameResetDeleteValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameSampleDataGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameSampleDataGetCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/sampleData"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameSampleDataGetValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameSampleDataGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameSampleDataGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameSampleDataGet(Async)");
        }

        return ruleTargetClientRulenameSampleDataGetCall(target, client, rulename, _callback);

    }

    /**
     * Get JSON Schema representation of the data expected by the rule
     * Generates a JSON Schema object, following json-schema.org specification
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiJSONArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiJSONArrayResponse ruleTargetClientRulenameSampleDataGet(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<ApiJSONArrayResponse> localVarResp = ruleTargetClientRulenameSampleDataGetWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Get JSON Schema representation of the data expected by the rule
     * Generates a JSON Schema object, following json-schema.org specification
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;ApiJSONArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiJSONArrayResponse> ruleTargetClientRulenameSampleDataGetWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameSampleDataGetValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<ApiJSONArrayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get JSON Schema representation of the data expected by the rule (asynchronously)
     * Generates a JSON Schema object, following json-schema.org specification
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameSampleDataGetAsync(TargetEnum target, String client, String rulename, final ApiCallback<ApiJSONArrayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameSampleDataGetValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<ApiJSONArrayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameSnoozePost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameSnoozePostCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/snooze"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameSnoozePostValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameSnoozePost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameSnoozePost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameSnoozePost(Async)");
        }

        return ruleTargetClientRulenameSnoozePostCall(target, client, rulename, _callback);

    }

    /**
     * Make this rule start snoozing
     * Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse ruleTargetClientRulenameSnoozePost(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = ruleTargetClientRulenameSnoozePostWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Make this rule start snoozing
     * Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> ruleTargetClientRulenameSnoozePostWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameSnoozePostValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make this rule start snoozing (asynchronously)
     * Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameSnoozePostAsync(TargetEnum target, String client, String rulename, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameSnoozePostValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameTestDataDelete
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameTestDataDeleteCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/testData"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameTestDataDeleteValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameTestDataDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameTestDataDelete(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameTestDataDelete(Async)");
        }

        return ruleTargetClientRulenameTestDataDeleteCall(target, client, rulename, _callback);

    }

    /**
     * Delete all test data
     * Deletes all of user defined test data for this rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse ruleTargetClientRulenameTestDataDelete(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = ruleTargetClientRulenameTestDataDeleteWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Delete all test data
     * Deletes all of user defined test data for this rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> ruleTargetClientRulenameTestDataDeleteWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameTestDataDeleteValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all test data (asynchronously)
     * Deletes all of user defined test data for this rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameTestDataDeleteAsync(TargetEnum target, String client, String rulename, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameTestDataDeleteValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameTestDataGet
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameTestDataGetCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/testData"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameTestDataGetValidateBeforeCall(TargetEnum target, String client, String rulename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameTestDataGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameTestDataGet(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameTestDataGet(Async)");
        }

        return ruleTargetClientRulenameTestDataGetCall(target, client, rulename, _callback);

    }

    /**
     * Get the rule&#39;s test data and headers information
     * Returns the test data and header information as specified in the rule&#39;s Realtime Input step
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return TestDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestDataResponse ruleTargetClientRulenameTestDataGet(TargetEnum target, String client, String rulename) throws ApiException {
        ApiResponse<TestDataResponse> localVarResp = ruleTargetClientRulenameTestDataGetWithHttpInfo(target, client, rulename);
        return localVarResp.getData();
    }

    /**
     * Get the rule&#39;s test data and headers information
     * Returns the test data and header information as specified in the rule&#39;s Realtime Input step
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @return ApiResponse&lt;TestDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestDataResponse> ruleTargetClientRulenameTestDataGetWithHttpInfo(TargetEnum target, String client, String rulename) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameTestDataGetValidateBeforeCall(target, client, rulename, null);
        Type localVarReturnType = new TypeToken<TestDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the rule&#39;s test data and headers information (asynchronously)
     * Returns the test data and header information as specified in the rule&#39;s Realtime Input step
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameTestDataGetAsync(TargetEnum target, String client, String rulename, final ApiCallback<TestDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameTestDataGetValidateBeforeCall(target, client, rulename, _callback);
        Type localVarReturnType = new TypeToken<TestDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetClientRulenameTestDataPost
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param testData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameTestDataPostCall(TargetEnum target, String client, String rulename, List<TestData> testData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testData;

        // create path and map variables
        String localVarPath = "/rule/{target}/{client}/{rulename}/testData"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()))
            .replace("{" + "rulename" + "}", localVarApiClient.escapeString(rulename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetClientRulenameTestDataPostValidateBeforeCall(TargetEnum target, String client, String rulename, List<TestData> testData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetClientRulenameTestDataPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling ruleTargetClientRulenameTestDataPost(Async)");
        }

        // verify the required parameter 'rulename' is set
        if (rulename == null) {
            throw new ApiException("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameTestDataPost(Async)");
        }

        return ruleTargetClientRulenameTestDataPostCall(target, client, rulename, testData, _callback);

    }

    /**
     * Add test data to rule
     * User defined test data rows will be stored for this rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param testData  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse ruleTargetClientRulenameTestDataPost(TargetEnum target, String client, String rulename, List<TestData> testData) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = ruleTargetClientRulenameTestDataPostWithHttpInfo(target, client, rulename, testData);
        return localVarResp.getData();
    }

    /**
     * Add test data to rule
     * User defined test data rows will be stored for this rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param testData  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> ruleTargetClientRulenameTestDataPostWithHttpInfo(TargetEnum target, String client, String rulename, List<TestData> testData) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetClientRulenameTestDataPostValidateBeforeCall(target, client, rulename, testData, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add test data to rule (asynchronously)
     * User defined test data rows will be stored for this rule
     * @param target Target - is where rule is published. (required)
     * @param client Client name (required)
     * @param rulename Rule name (required)
     * @param testData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetClientRulenameTestDataPostAsync(TargetEnum target, String client, String rulename, List<TestData> testData, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetClientRulenameTestDataPostValidateBeforeCall(target, client, rulename, testData, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleTargetGet
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetGetCall(TargetEnum target, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule/{target}"
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (sortProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortProperty", sortProperty));
        }

        if (sortDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDescending", sortDescending));
        }

        if (createdRuleUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdRuleUrl", createdRuleUrl));
        }

        if (healthScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("healthScore", healthScore));
        }

        if (includeStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStatistics", includeStatistics));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (parameterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterName", parameterName));
        }

        if (parameterValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterValue", parameterValue));
        }

        if (templateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateFilter", templateFilter));
        }

        if (includePublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePublic", includePublic));
        }

        if (checkTemplateLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkTemplateLatestVersion", checkTemplateLatestVersion));
        }

        if (iClients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "iClients", iClients));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleTargetGetValidateBeforeCall(TargetEnum target, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling ruleTargetGet(Async)");
        }

        return ruleTargetGetCall(target, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, _callback);

    }

    /**
     * Get information about all rules published by all clients to the given target
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RuleList ruleTargetGet(TargetEnum target, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients) throws ApiException {
        ApiResponse<RuleList> localVarResp = ruleTargetGetWithHttpInfo(target, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
        return localVarResp.getData();
    }

    /**
     * Get information about all rules published by all clients to the given target
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> ruleTargetGetWithHttpInfo(TargetEnum target, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients) throws ApiException {
        okhttp3.Call localVarCall = ruleTargetGetValidateBeforeCall(target, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about all rules published by all clients to the given target (asynchronously)
     * Information returned is filtered by user permissions.
     * @param target Target - is where rule is published. (required)
     * @param from The zero-based index of the first item to return. (optional)
     * @param to The zero-based index of the last item to return. (optional)
     * @param sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)
     * @param sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)
     * @param createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)
     * @param healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)
     * @param includeStatistics Should the results include the execution statistics for each rule? Default true (optional)
     * @param searchText Filter results to those which contain this text (optional)
     * @param parameterName Get the report for a specific parameter (optional)
     * @param parameterValue Get a list of rules which have a specific parameter value (optional)
     * @param templateFilter Filter to return only rules using specified template (optional)
     * @param includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional)
     * @param checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed? (optional)
     * @param iClients Only include these client(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleTargetGetAsync(TargetEnum target, Integer from, Integer to, String sortProperty, String sortDescending, String createdRuleUrl, HealthScoreTimeFrame healthScore, Boolean includeStatistics, String searchText, String parameterName, String parameterValue, String templateFilter, Boolean includePublic, Boolean checkTemplateLatestVersion, List<String> iClients, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleTargetGetValidateBeforeCall(target, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
